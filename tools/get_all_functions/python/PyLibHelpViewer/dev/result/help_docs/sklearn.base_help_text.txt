Help on module sklearn.base in sklearn:

NAME
    sklearn.base - Base classes for all estimators.

CLASSES
    builtins.object
        BaseEstimator
        BiclusterMixin
        ClassifierMixin
        ClusterMixin
        DensityMixin
        MetaEstimatorMixin
        RegressorMixin
        TransformerMixin
    
    class BaseEstimator(builtins.object)
     |  Base class for all estimators in scikit-learn
     |  
     |  Notes
     |  -----
     |  All estimators should specify all the parameters that can be set
     |  at the class level in their ``__init__`` as explicit keyword
     |  arguments (no ``*args`` or ``**kwargs``).
     |  
     |  Methods defined here:
     |  
     |  __getstate__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setstate__(self, state)
     |  
     |  get_params(self, deep=True)
     |      Get parameters for this estimator.
     |      
     |      Parameters
     |      ----------
     |      deep : boolean, optional
     |          If True, will return the parameters for this estimator and
     |          contained subobjects that are estimators.
     |      
     |      Returns
     |      -------
     |      params : mapping of string to any
     |          Parameter names mapped to their values.
     |  
     |  set_params(self, **params)
     |      Set the parameters of this estimator.
     |      
     |      The method works on simple estimators as well as on nested objects
     |      (such as pipelines). The latter have parameters of the form
     |      ``<component>__<parameter>`` so that it's possible to update each
     |      component of a nested object.
     |      
     |      Returns
     |      -------
     |      self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BiclusterMixin(builtins.object)
     |  Mixin class for all bicluster estimators in scikit-learn
     |  
     |  Methods defined here:
     |  
     |  get_indices(self, i)
     |      Row and column indices of the i'th bicluster.
     |      
     |      Only works if ``rows_`` and ``columns_`` attributes exist.
     |      
     |      Parameters
     |      ----------
     |      i : int
     |          The index of the cluster.
     |      
     |      Returns
     |      -------
     |      row_ind : np.array, dtype=np.intp
     |          Indices of rows in the dataset that belong to the bicluster.
     |      col_ind : np.array, dtype=np.intp
     |          Indices of columns in the dataset that belong to the bicluster.
     |  
     |  get_shape(self, i)
     |      Shape of the i'th bicluster.
     |      
     |      Parameters
     |      ----------
     |      i : int
     |          The index of the cluster.
     |      
     |      Returns
     |      -------
     |      shape : (int, int)
     |          Number of rows and columns (resp.) in the bicluster.
     |  
     |  get_submatrix(self, i, data)
     |      Returns the submatrix corresponding to bicluster `i`.
     |      
     |      Parameters
     |      ----------
     |      i : int
     |          The index of the cluster.
     |      data : array
     |          The data.
     |      
     |      Returns
     |      -------
     |      submatrix : array
     |          The submatrix corresponding to bicluster i.
     |      
     |      Notes
     |      -----
     |      Works with sparse matrices. Only works if ``rows_`` and
     |      ``columns_`` attributes exist.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  biclusters_
     |      Convenient way to get row and column indicators together.
     |      
     |      Returns the ``rows_`` and ``columns_`` members.
    
    class ClassifierMixin(builtins.object)
     |  Mixin class for all classifiers in scikit-learn.
     |  
     |  Methods defined here:
     |  
     |  score(self, X, y, sample_weight=None)
     |      Returns the mean accuracy on the given test data and labels.
     |      
     |      In multi-label classification, this is the subset accuracy
     |      which is a harsh metric since you require for each sample that
     |      each label set be correctly predicted.
     |      
     |      Parameters
     |      ----------
     |      X : array-like, shape = (n_samples, n_features)
     |          Test samples.
     |      
     |      y : array-like, shape = (n_samples) or (n_samples, n_outputs)
     |          True labels for X.
     |      
     |      sample_weight : array-like, shape = [n_samples], optional
     |          Sample weights.
     |      
     |      Returns
     |      -------
     |      score : float
     |          Mean accuracy of self.predict(X) wrt. y.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ClusterMixin(builtins.object)
     |  Mixin class for all cluster estimators in scikit-learn.
     |  
     |  Methods defined here:
     |  
     |  fit_predict(self, X, y=None)
     |      Performs clustering on X and returns cluster labels.
     |      
     |      Parameters
     |      ----------
     |      X : ndarray, shape (n_samples, n_features)
     |          Input data.
     |      
     |      Returns
     |      -------
     |      y : ndarray, shape (n_samples,)
     |          cluster labels
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DensityMixin(builtins.object)
     |  Mixin class for all density estimators in scikit-learn.
     |  
     |  Methods defined here:
     |  
     |  score(self, X, y=None)
     |      Returns the score of the model on the data X
     |      
     |      Parameters
     |      ----------
     |      X : array-like, shape = (n_samples, n_features)
     |      
     |      Returns
     |      -------
     |      score : float
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class MetaEstimatorMixin(builtins.object)
     |  Mixin class for all meta estimators in scikit-learn.
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class RegressorMixin(builtins.object)
     |  Mixin class for all regression estimators in scikit-learn.
     |  
     |  Methods defined here:
     |  
     |  score(self, X, y, sample_weight=None)
     |      Returns the coefficient of determination R^2 of the prediction.
     |      
     |      The coefficient R^2 is defined as (1 - u/v), where u is the residual
     |      sum of squares ((y_true - y_pred) ** 2).sum() and v is the total
     |      sum of squares ((y_true - y_true.mean()) ** 2).sum().
     |      The best possible score is 1.0 and it can be negative (because the
     |      model can be arbitrarily worse). A constant model that always
     |      predicts the expected value of y, disregarding the input features,
     |      would get a R^2 score of 0.0.
     |      
     |      Parameters
     |      ----------
     |      X : array-like, shape = (n_samples, n_features)
     |          Test samples.
     |      
     |      y : array-like, shape = (n_samples) or (n_samples, n_outputs)
     |          True values for X.
     |      
     |      sample_weight : array-like, shape = [n_samples], optional
     |          Sample weights.
     |      
     |      Returns
     |      -------
     |      score : float
     |          R^2 of self.predict(X) wrt. y.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TransformerMixin(builtins.object)
     |  Mixin class for all transformers in scikit-learn.
     |  
     |  Methods defined here:
     |  
     |  fit_transform(self, X, y=None, **fit_params)
     |      Fit to data, then transform it.
     |      
     |      Fits transformer to X and y with optional parameters fit_params
     |      and returns a transformed version of X.
     |      
     |      Parameters
     |      ----------
     |      X : numpy array of shape [n_samples, n_features]
     |          Training set.
     |      
     |      y : numpy array of shape [n_samples]
     |          Target values.
     |      
     |      Returns
     |      -------
     |      X_new : numpy array of shape [n_samples, n_features_new]
     |          Transformed array.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    clone(estimator, safe=True)
        Constructs a new estimator with the same parameters.
        
        Clone does a deep copy of the model in an estimator
        without actually copying attached data. It yields a new estimator
        with the same parameters that has not been fit on any data.
        
        Parameters
        ----------
        estimator : estimator object, or list, tuple or set of objects
            The estimator or group of estimators to be cloned
        
        safe : boolean, optional
            If safe is false, clone will fall back to a deep copy on objects
            that are not estimators.
    
    is_classifier(estimator)
        Returns True if the given estimator is (probably) a classifier.
        
        Parameters
        ----------
        estimator : object
            Estimator object to test.
        
        Returns
        -------
        out : bool
            True if estimator is a classifier and False otherwise.
    
    is_regressor(estimator)
        Returns True if the given estimator is (probably) a regressor.
        
        
        Parameters
        ----------
        estimator : object
            Estimator object to test.
        
        Returns
        -------
        out : bool
            True if estimator is a regressor and False otherwise.

VERSION
    0.19.1

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/sklearn/base.py


