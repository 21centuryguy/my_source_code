Help on module decorator:

NAME
    decorator

DESCRIPTION
    Decorator module, see http://pypi.python.org/pypi/decorator
    for the documentation.

CLASSES
    builtins.object
        FunctionMaker
    contextlib._GeneratorContextManager(contextlib.ContextDecorator, contextlib.AbstractContextManager)
        ContextManager
    
    class ContextManager(contextlib._GeneratorContextManager)
     |  Helper for @contextmanager decorator.
     |  
     |  Method resolution order:
     |      ContextManager
     |      contextlib._GeneratorContextManager
     |      contextlib.ContextDecorator
     |      contextlib.AbstractContextManager
     |      abc.ABC
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __call__(self, func)
     |      Context manager decorator
     |  
     |  __init__(self, g, *a, **k)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from contextlib._GeneratorContextManager:
     |  
     |  __enter__(self)
     |      Return `self` upon entering the runtime context.
     |  
     |  __exit__(self, type, value, traceback)
     |      Raise any exception triggered within the runtime context.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from contextlib.ContextDecorator:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from contextlib.AbstractContextManager:
     |  
     |  __subclasshook__(C) from abc.ABCMeta
     |      Abstract classes can override this to customize issubclass().
     |      
     |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
     |      It should return True, False or NotImplemented.  If it returns
     |      NotImplemented, the normal algorithm is used.  Otherwise, it
     |      overrides the normal algorithm (and the outcome is cached).
    
    class FunctionMaker(builtins.object)
     |  An object with the ability to create functions with a given signature.
     |  It has attributes name, doc, module, signature, defaults, dict and
     |  methods update and make.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, func=None, name=None, signature=None, defaults=None, doc=None, module=None, funcdict=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  make(self, src_templ, evaldict=None, addsource=False, **attrs)
     |      Make a new function from a given template and update the signature
     |  
     |  update(self, func, **kw)
     |      Update the signature of func with the data in self
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  create(obj, body, evaldict, defaults=None, doc=None, module=None, addsource=True, **attrs) from builtins.type
     |      Create a function from the strings name, signature and body.
     |      evaldict is the evaluation dictionary. If addsource is true an
     |      attribute __source__ is added to the result. The attributes attrs
     |      are added, if any.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  args = ()
     |  
     |  defaults = ()
     |  
     |  kwonlyargs = ()
     |  
     |  kwonlydefaults = ()
     |  
     |  varargs = ()
     |  
     |  varkw = ()

FUNCTIONS
    __init__(self, g, *a, **k)
    
    append(a, vancestors)
        Append ``a`` to the list of the virtual ancestors, unless it is already
        included.
    
    contextmanager(func)
    
    decorate(func, caller, extras=())
        decorate(func, caller) decorates a function using a caller.
    
    decorator(caller, _func=None)
        decorator(caller) converts a caller function into a decorator
    
    dispatch_on(*dispatch_args)
        Factory of decorators turning a function into a generic function
        dispatching on the given arguments.
    
    get_init(cls)

DATA
    DEF = re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(')
    init = FullArgSpec(args=['self', 'func', 'args', 'kwds'...onlyargs=[],...
    n_args = 4
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...

VERSION
    4.3.0

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/decorator.py


