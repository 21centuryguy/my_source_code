Help on module urllib3._collections in urllib3:

NAME
    urllib3._collections

CLASSES
    collections.abc.MutableMapping(collections.abc.Mapping)
        HTTPHeaderDict
        RecentlyUsedContainer
    
    class HTTPHeaderDict(collections.abc.MutableMapping)
     |  :param headers:
     |      An iterable of field-value pairs. Must not contain multiple field names
     |      when compared case-insensitively.
     |  
     |  :param kwargs:
     |      Additional field-value pairs to pass in to ``dict.update``.
     |  
     |  A ``dict`` like container for storing HTTP Headers.
     |  
     |  Field names are stored and compared case-insensitively in compliance with
     |  RFC 7230. Iteration provides the first case-sensitive key seen for each
     |  case-insensitive pair.
     |  
     |  Using ``__setitem__`` syntax overwrites fields that compare equal
     |  case-insensitively in order to maintain ``dict``'s api. For fields that
     |  compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
     |  in a loop.
     |  
     |  If multiple fields that are equal case-insensitively are passed to the
     |  constructor or ``.update``, the behavior is undefined and some will be
     |  lost.
     |  
     |  >>> headers = HTTPHeaderDict()
     |  >>> headers.add('Set-Cookie', 'foo=bar')
     |  >>> headers.add('set-cookie', 'baz=quxx')
     |  >>> headers['content-length'] = '7'
     |  >>> headers['SET-cookie']
     |  'foo=bar, baz=quxx'
     |  >>> headers['Content-Length']
     |  '7'
     |  
     |  Method resolution order:
     |      HTTPHeaderDict
     |      collections.abc.MutableMapping
     |      collections.abc.Mapping
     |      collections.abc.Collection
     |      collections.abc.Sized
     |      collections.abc.Iterable
     |      collections.abc.Container
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, key)
     |  
     |  __delitem__(self, key)
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, headers=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, val)
     |  
     |  add(self, key, val)
     |      Adds a (name, value) pair, doesn't overwrite the value if it already
     |      exists.
     |      
     |      >>> headers = HTTPHeaderDict(foo='bar')
     |      >>> headers.add('Foo', 'baz')
     |      >>> headers['foo']
     |      'bar, baz'
     |  
     |  copy(self)
     |  
     |  discard(self, key)
     |  
     |  extend(self, *args, **kwargs)
     |      Generic import function for any type of header-like object.
     |      Adapted version of MutableMapping.update in order to insert items
     |      with self.add instead of self.__setitem__
     |  
     |  get_all = getlist(self, key, default=<object object at 0x1060d2390>)
     |  
     |  getallmatchingheaders = getlist(self, key, default=<object object at 0x1060d2390>)
     |  
     |  getheaders = getlist(self, key, default=<object object at 0x1060d2390>)
     |  
     |  getlist(self, key, default=<object object at 0x1060d2390>)
     |      Returns a list of all the values for the named field. Returns an
     |      empty list if the key doesn't exist.
     |  
     |  iget = getlist(self, key, default=<object object at 0x1060d2390>)
     |  
     |  items(self)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  iteritems(self)
     |      Iterate over all header lines, including duplicate ones.
     |  
     |  itermerged(self)
     |      Iterate over all headers, merging duplicate ones together.
     |  
     |  pop(self, key, default=<object object at 0x1060d2390>)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  from_httplib(message) from abc.ABCMeta
     |      Read headers from a Python 2 httplib message object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset()
     |  
     |  __hash__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from collections.abc.MutableMapping:
     |  
     |  clear(self)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  popitem(self)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair
     |      as a 2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(self, key, default=None)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(*args, **kwds)
     |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
     |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
     |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
     |      In either case, this is followed by: for k, v in F.items(): D[k] = v
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from collections.abc.Mapping:
     |  
     |  get(self, key, default=None)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  keys(self)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  values(self)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from collections.abc.Mapping:
     |  
     |  __reversed__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from collections.abc.Collection:
     |  
     |  __subclasshook__(C) from abc.ABCMeta
     |      Abstract classes can override this to customize issubclass().
     |      
     |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
     |      It should return True, False or NotImplemented.  If it returns
     |      NotImplemented, the normal algorithm is used.  Otherwise, it
     |      overrides the normal algorithm (and the outcome is cached).
    
    class RecentlyUsedContainer(collections.abc.MutableMapping)
     |  Provides a thread-safe dict-like container which maintains up to
     |  ``maxsize`` keys while throwing away the least-recently-used keys beyond
     |  ``maxsize``.
     |  
     |  :param maxsize:
     |      Maximum number of recent elements to retain.
     |  
     |  :param dispose_func:
     |      Every time an item is evicted from the container,
     |      ``dispose_func(value)`` is called.  Callback which will get called
     |  
     |  Method resolution order:
     |      RecentlyUsedContainer
     |      collections.abc.MutableMapping
     |      collections.abc.Mapping
     |      collections.abc.Collection
     |      collections.abc.Sized
     |      collections.abc.Iterable
     |      collections.abc.Container
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __delitem__(self, key)
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, maxsize=10, dispose_func=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  __setitem__(self, key, value)
     |  
     |  clear(self)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  keys(self)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ContainerCls = <class 'collections.OrderedDict'>
     |      Dictionary that remembers insertion order
     |  
     |  __abstractmethods__ = frozenset()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from collections.abc.MutableMapping:
     |  
     |  pop(self, key, default=<object object at 0x1060d2050>)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised.
     |  
     |  popitem(self)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair
     |      as a 2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(self, key, default=None)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(*args, **kwds)
     |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
     |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
     |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
     |      In either case, this is followed by: for k, v in F.items(): D[k] = v
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from collections.abc.Mapping:
     |  
     |  __contains__(self, key)
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  get(self, key, default=None)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  items(self)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  values(self)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from collections.abc.Mapping:
     |  
     |  __hash__ = None
     |  
     |  __reversed__ = None
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from collections.abc.Collection:
     |  
     |  __subclasshook__(C) from abc.ABCMeta
     |      Abstract classes can override this to customize issubclass().
     |      
     |      This is invoked early on by abc.ABCMeta.__subclasscheck__().
     |      It should return True, False or NotImplemented.  If it returns
     |      NotImplemented, the normal algorithm is used.  Otherwise, it
     |      overrides the normal algorithm (and the outcome is cached).

DATA
    __all__ = ['RecentlyUsedContainer', 'HTTPHeaderDict']

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/urllib3/_collections.py


