Help on module rope.contrib.autoimport in rope.contrib:

NAME
    rope.contrib.autoimport

CLASSES
    builtins.object
        AutoImport
    
    class AutoImport(builtins.object)
     |  A class for finding the module that provides a name
     |  
     |  This class maintains a cache of global names in python modules.
     |  Note that this cache is not accurate and might be out of date.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, project, observe=True, underlined=False)
     |      Construct an AutoImport object
     |      
     |      If `observe` is `True`, listen for project changes and update
     |      the cache.
     |      
     |      If `underlined` is `True`, underlined names are cached, too.
     |  
     |  clear_cache(self)
     |      Clear all entries in global-name cache
     |      
     |      It might be a good idea to use this function before
     |      regenerating global names.
     |  
     |  find_insertion_line(self, code)
     |      Guess at what line the new import should be inserted
     |  
     |  generate_cache(self, resources=None, underlined=None, task_handle=<rope.base.taskhandle.NullTaskHandle object at 0x106a563c8>)
     |      Generate global name cache for project files
     |      
     |      If `resources` is a list of `rope.base.resource.File`\s, only
     |      those files are searched; otherwise all python modules in the
     |      project are cached.
     |  
     |  generate_modules_cache(self, modules, underlined=None, task_handle=<rope.base.taskhandle.NullTaskHandle object at 0x106a56400>)
     |      Generate global name cache for modules listed in `modules`
     |  
     |  get_all_names(self)
     |      Return the list of all cached global names
     |  
     |  get_modules(self, name)
     |      Return the list of modules that have global `name`
     |  
     |  get_name_locations(self, name)
     |      Return a list of ``(resource, lineno)`` tuples
     |  
     |  import_assist(self, starting)
     |      Return a list of ``(name, module)`` tuples
     |      
     |      This function tries to find modules that have a global name
     |      that starts with `starting`.
     |  
     |  update_module(self, modname, underlined=None)
     |      Update the cache for global names in `modname` module
     |      
     |      `modname` is the name of a module.
     |  
     |  update_resource(self, resource, underlined=None)
     |      Update the cache for global names in `resource`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    submodules(mod)

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/rope/contrib/autoimport.py


