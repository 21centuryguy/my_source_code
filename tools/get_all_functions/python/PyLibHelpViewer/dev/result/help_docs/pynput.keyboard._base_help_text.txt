Help on module pynput.keyboard._base in pynput.keyboard:

NAME
    pynput.keyboard._base - This module contains the base implementation.

DESCRIPTION
    The actual interface to keyboard classes is defined here, but the implementation
    is located in a platform dependent module.

CLASSES
    builtins.object
        Controller
        KeyCode
    enum.Enum(builtins.object)
        Key
    pynput._util.AbstractListener(threading.Thread)
        Listener
    
    class Controller(builtins.object)
     |  A controller for sending virtual keyboard events to the system.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  press(self, key)
     |      Presses a key.
     |      
     |      A key may be either a string of length 1, one of the :class:`Key`
     |      members or a :class:`KeyCode`.
     |      
     |      Strings will be transformed to :class:`KeyCode` using
     |      :meth:`KeyCode.char`. Members of :class:`Key` will be translated to
     |      their :meth:`~Key.value`.
     |      
     |      :param key: The key to press.
     |      
     |      :raises InvalidKeyException: if the key is invalid
     |      
     |      :raises ValueError: if ``key`` is a string, but its length is not ``1``
     |  
     |  pressed(self, *args)
     |      Executes a block with some keys pressed.
     |      
     |      :param keys: The keys to keep pressed.
     |  
     |  release(self, key)
     |      Releases a key.
     |      
     |      A key may be either a string of length 1, one of the :class:`Key`
     |      members or a :class:`KeyCode`.
     |      
     |      Strings will be transformed to :class:`KeyCode` using
     |      :meth:`KeyCode.char`. Members of :class:`Key` will be translated to
     |      their :meth:`~Key.value`.
     |      
     |      :param key: The key to release. If this is a string, it is passed to
     |          :meth:`touches` and the returned releases are used.
     |      
     |      :raises InvalidKeyException: if the key is invalid
     |      
     |      :raises ValueError: if ``key`` is a string, but its length is not ``1``
     |  
     |  touch(self, key, is_press)
     |      Calls either :meth:`press` or :meth:`release` depending on the value
     |      of ``is_press``.
     |      
     |      :param key: The key to press or release.
     |      
     |      :param bool is_press: Whether to press the key.
     |      
     |      :raises InvalidKeyException: if the key is invalid
     |  
     |  type(self, string)
     |      Types a string.
     |      
     |      This method will send all key presses and releases necessary to type
     |      all characters in the string.
     |      
     |      :param str string: The string to type.
     |      
     |      :raises InvalidCharacterException: if an untypable character is
     |          encountered
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  alt_gr_pressed
     |      Whether *altgr* is pressed.
     |      
     |      Please note that this reflects only the internal state of this
     |      controller. See :attr:`modifiers` for more information.
     |  
     |  alt_pressed
     |      Whether any *alt* key is pressed.
     |      
     |      Please note that this reflects only the internal state of this
     |      controller. See :attr:`modifiers` for more information.
     |  
     |  ctrl_pressed
     |      Whether any *ctrl* key is pressed.
     |      
     |      Please note that this reflects only the internal state of this
     |      controller. See :attr:`modifiers` for more information.
     |  
     |  modifiers
     |      The currently pressed modifier keys.
     |      
     |      Please note that this reflects only the internal state of this
     |      controller, and not the state of the operating system keyboard buffer.
     |      This property cannot be used to determine whether a key is physically
     |      pressed.
     |      
     |      Only the generic modifiers will be set; when pressing either
     |      :attr:`Key.shift_l`, :attr:`Key.shift_r` or :attr:`Key.shift`, only
     |      :attr:`Key.shift` will be present.
     |      
     |      Use this property within a context block thus::
     |      
     |          with controller.modifiers as modifiers:
     |              with_block()
     |      
     |      This ensures that the modifiers cannot be modified by another thread.
     |  
     |  shift_pressed
     |      Whether any *shift* key is pressed, or *caps lock* is toggled.
     |      
     |      Please note that this reflects only the internal state of this
     |      controller. See :attr:`modifiers` for more information.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  InvalidCharacterException = <class 'pynput.keyboard._base.Controller.I...
     |      The exception raised when an invalid character is encountered in
     |      the string passed to :meth:`Controller.type`.
     |      
     |      Its first argument is the index of the character in the string, and the
     |      second the character.
     |  
     |  InvalidKeyException = <class 'pynput.keyboard._base.Controller.Invalid...
     |      The exception raised when an invalid ``key`` parameter is passed to
     |      either :meth:`Controller.press` or :meth:`Controller.release`.
     |      
     |      Its first argument is the ``key`` parameter.
    
    class Key(enum.Enum)
     |  A class representing various buttons that may not correspond to
     |  letters. This includes modifier keys and function keys.
     |  
     |  The actual values for these items differ between platforms. Some platforms
     |  may have additional buttons, but these are guaranteed to be present
     |  everywhere.
     |  
     |  Method resolution order:
     |      Key
     |      enum.Enum
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  alt = <Key.alt: 0>
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from enum.Enum:
     |  
     |  name
     |      The name of the Enum member.
     |  
     |  value
     |      The value of the Enum member.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from enum.EnumMeta:
     |  
     |  __members__
     |      Returns a mapping of member name->value.
     |      
     |      This mapping lists all enum members, including aliases. Note that this
     |      is a read-only view of the internal mapping.
    
    class KeyCode(builtins.object)
     |  A :class:`KeyCode` represents the description of a key code used by the
     |  operating system.
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, vk=None, char=None, is_dead=False)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  join(self, key)
     |      Applies this dead key to another key and returns the result.
     |      
     |      Joining a dead key with space (``' '``) or itself yields the non-dead
     |      version of this key, if one exists; for example,
     |      ``KeyCode.from_dead('~').join(KeyCode.from_char(' '))`` equals
     |      ``KeyCode.from_char('~')`` and
     |      ``KeyCode.from_dead('~').join(KeyCode.from_dead('~'))``.
     |      
     |      :param KeyCode key: The key to join with this key.
     |      
     |      :return: a key code
     |      
     |      :raises ValueError: if the keys cannot be joined
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  from_char(char, **kwargs) from builtins.type
     |      Creates a key from a character.
     |      
     |      :param str char: The character.
     |      
     |      :return: a key code
     |  
     |  from_dead(char, **kwargs) from builtins.type
     |      Creates a dead key.
     |      
     |      :param char: The dead key. This should be the unicode character
     |          representing the stand alone character, such as ``'~'`` for
     |          *COMBINING TILDE*.
     |      
     |      :return: a key code
     |  
     |  from_vk(vk, **kwargs) from builtins.type
     |      Creates a key from a virtual key code.
     |      
     |      :param vk: The virtual key code.
     |      
     |      :param kwargs: Any other parameters to pass.
     |      
     |      :return: a key code
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Listener(pynput._util.AbstractListener)
     |  A listener for keyboard events.
     |  
     |  Instances of this class can be used as context managers. This is equivalent
     |  to the following code::
     |  
     |      listener.start()
     |      try:
     |          with_statements()
     |      finally:
     |          listener.stop()
     |  
     |  This class inherits from :class:`threading.Thread` and supports all its
     |  methods. It will set :attr:`daemon` to ``True`` when created.
     |  
     |  :param callable on_press: The callback to call when a button is pressed.
     |  
     |      It will be called with the argument ``(key)``, where ``key`` is a
     |      :class:`KeyCode`, a :class:`Key` or ``None`` if the key is unknown.
     |  
     |  :param callable on_release: The callback to call when a button is release.
     |  
     |      It will be called with the argument ``(key)``, where ``key`` is a
     |      :class:`KeyCode`, a :class:`Key` or ``None`` if the key is unknown.
     |  
     |  :param bool suppress: Whether to suppress events. Setting this to ``True``
     |      will prevent the input events from being passed to the rest of the
     |      system.
     |  
     |  :param kwargs: Any non-standard platform dependent options. These should be
     |      prefixed with the platform name thus: ``darwin_``, ``xorg_`` or
     |      ``win32_``.
     |  
     |      Supported values are:
     |  
     |      ``darwin_intercept``
     |          A callable taking the arguments ``(event_type, event)``, where
     |          ``event_type`` is ``Quartz.kCGEventKeyDown`` or
     |          ``Quartz.kCGEventKeyDown``, and ``event`` is a ``CGEventRef``.
     |  
     |          This callable can freely modify the event using functions like
     |          ``Quartz.CGEventSetIntegerValueField``. If this callable does not
     |          return the event, the event is suppressed system wide.
     |  
     |      ``win32_event_filter``
     |          A callable taking the arguments ``(msg, data)``, where ``msg`` is
     |          the current message, and ``data`` associated data as a
     |          `KBLLHOOKSTRUCT <https://msdn.microsoft.com/en-us/library/windows/desktop/ms644967(v=vs.85).aspx>`_.
     |  
     |          If this callback returns ``False``, the event will not be propagated
     |          to the listener callback.
     |  
     |          If ``self.suppress_event()`` is called, the event is suppressed
     |          system wide.
     |  
     |  Method resolution order:
     |      Listener
     |      pynput._util.AbstractListener
     |      threading.Thread
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, on_press=None, on_release=None, suppress=False, **kwargs)
     |      This constructor should always be called with keyword arguments. Arguments are:
     |      
     |      *group* should be None; reserved for future extension when a ThreadGroup
     |      class is implemented.
     |      
     |      *target* is the callable object to be invoked by the run()
     |      method. Defaults to None, meaning nothing is called.
     |      
     |      *name* is the thread name. By default, a unique name is constructed of
     |      the form "Thread-N" where N is a small decimal number.
     |      
     |      *args* is the argument tuple for the target invocation. Defaults to ().
     |      
     |      *kwargs* is a dictionary of keyword arguments for the target
     |      invocation. Defaults to {}.
     |      
     |      If a subclass overrides the constructor, it must make sure to invoke
     |      the base class constructor (Thread.__init__()) before doing anything
     |      else to the thread.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pynput._util.AbstractListener:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, exc_type, value, traceback)
     |  
     |  join(self, *args)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      isAlive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  run(self)
     |      The thread runner method.
     |  
     |  stop(self)
     |      Stops listening for events.
     |      
     |      When this method returns, no more events will be delivered.
     |  
     |  wait(self)
     |      Waits for this listener to become ready.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from pynput._util.AbstractListener:
     |  
     |  running
     |      Whether the listener is currently running.
     |  
     |  suppress
     |      Whether to suppress events.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from pynput._util.AbstractListener:
     |  
     |  StopException = <class 'pynput._util.AbstractListener.StopException'>
     |      If an event listener callback raises this exception, the current
     |      listener is stopped.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  getName(self)
     |  
     |  isAlive = is_alive(self)
     |  
     |  isDaemon(self)
     |  
     |  is_alive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  setDaemon(self, daemonic)
     |  
     |  setName(self, name)
     |  
     |  start(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  daemon
     |      A boolean value indicating whether this thread is a daemon thread.
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when no alive non-daemon threads are
     |      left.
     |  
     |  ident
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  name
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/pynput/keyboard/_base.py


