Help on module bs4.dammit in bs4:

NAME
    bs4.dammit - Beautiful Soup bonus library: Unicode, Dammit

DESCRIPTION
    This library converts a bytestream to Unicode through any means
    necessary. It is heavily based on code from Mark Pilgrim's Universal
    Feed Parser. It works best on XML and HTML, but it does not rewrite the
    XML or HTML to reflect a new encoding; that's the tree builder's job.

CLASSES
    builtins.object
        EncodingDetector
        EntitySubstitution
        UnicodeDammit
    
    class EncodingDetector(builtins.object)
     |  Suggests a number of possible encodings for a bytestring.
     |  
     |  Order of precedence:
     |  
     |  1. Encodings you specifically tell EncodingDetector to try first
     |  (the override_encodings argument to the constructor).
     |  
     |  2. An encoding declared within the bytestring itself, either in an
     |  XML declaration (if the bytestring is to be interpreted as an XML
     |  document), or in a <meta> tag (if the bytestring is to be
     |  interpreted as an HTML document.)
     |  
     |  3. An encoding detected through textual analysis by chardet,
     |  cchardet, or a similar external library.
     |  
     |  4. UTF-8.
     |  
     |  5. Windows-1252.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, markup, override_encodings=None, is_html=False, exclude_encodings=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  find_declared_encoding(markup, is_html=False, search_entire_document=False) from builtins.type
     |      Given a document, tries to find its declared encoding.
     |      
     |      An XML encoding is declared at the beginning of the document.
     |      
     |      An HTML encoding is declared in a <meta> tag, hopefully near the
     |      beginning of the document.
     |  
     |  strip_byte_order_mark(data) from builtins.type
     |      If a byte-order mark is present, strip it and return the encoding it implies.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  encodings
     |      Yield a number of encodings that might work for this markup.
    
    class EntitySubstitution(builtins.object)
     |  Substitute XML or HTML entities for the corresponding characters.
     |  
     |  Class methods defined here:
     |  
     |  quoted_attribute_value(value) from builtins.type
     |      Make a value into a quoted XML attribute, possibly escaping it.
     |      
     |      Most strings will be quoted using double quotes.
     |      
     |       Bob's Bar -> "Bob's Bar"
     |      
     |      If a string contains double quotes, it will be quoted using
     |      single quotes.
     |      
     |       Welcome to "my bar" -> 'Welcome to "my bar"'
     |      
     |      If a string contains both single and double quotes, the
     |      double quotes will be escaped, and the string will be quoted
     |      using double quotes.
     |      
     |       Welcome to "Bob's Bar" -> "Welcome to &quot;Bob's bar&quot;
     |  
     |  substitute_html(s) from builtins.type
     |      Replace certain Unicode characters with named HTML entities.
     |      
     |      This differs from data.encode(encoding, 'xmlcharrefreplace')
     |      in that the goal is to make the result more readable (to those
     |      with ASCII displays) rather than to recover from
     |      errors. There's absolutely nothing wrong with a UTF-8 string
     |      containg a LATIN SMALL LETTER E WITH ACUTE, but replacing that
     |      character with "&eacute;" will make it more readable to some
     |      people.
     |  
     |  substitute_xml(value, make_quoted_attribute=False) from builtins.type
     |      Substitute XML entities for special XML characters.
     |      
     |      :param value: A string to be substituted. The less-than sign
     |        will become &lt;, the greater-than sign will become &gt;,
     |        and any ampersands will become &amp;. If you want ampersands
     |        that appear to be part of an entity definition to be left
     |        alone, use substitute_xml_containing_entities() instead.
     |      
     |      :param make_quoted_attribute: If True, then the string will be
     |       quoted, as befits an attribute value.
     |  
     |  substitute_xml_containing_entities(value, make_quoted_attribute=False) from builtins.type
     |      Substitute XML entities for special XML characters.
     |      
     |      :param value: A string to be substituted. The less-than sign will
     |        become &lt;, the greater-than sign will become &gt;, and any
     |        ampersands that are not part of an entity defition will
     |        become &amp;.
     |      
     |      :param make_quoted_attribute: If True, then the string will be
     |       quoted, as befits an attribute value.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  AMPERSAND_OR_BRACKET = re.compile('([<>&])')
     |  
     |  BARE_AMPERSAND_OR_BRACKET = re.compile('([<>]|&(?!#\\d+;|#x[0-9a-fA-F]...
     |  
     |  CHARACTER_TO_HTML_ENTITY = {'&': 'amp', '<': 'lt', '>': 'gt', '\xa0': ...
     |  
     |  CHARACTER_TO_HTML_ENTITY_RE = re.compile('[ÆÁÂÀΑÅÃÄΒÇΧ‡ΔÐÉÊÈΕΗËΓÍÎÌΙÏΚ...
     |  
     |  CHARACTER_TO_XML_ENTITY = {'"': 'quot', '&': 'amp', "'": 'apos', '<': ...
     |  
     |  HTML_ENTITY_TO_CHARACTER = {'AElig': 'Æ', 'Aacute': 'Á', 'Acirc': 'Â',...
    
    class UnicodeDammit(builtins.object)
     |  A class for detecting the encoding of a *ML document and
     |  converting it to a Unicode string. If the source encoding is
     |  windows-1252, can replace MS smart quotes with their HTML or XML
     |  equivalents.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, markup, override_encodings=[], smart_quotes_to=None, is_html=False, exclude_encodings=[])
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  find_codec(self, charset)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  detwingle(in_bytes, main_encoding='utf8', embedded_encoding='windows-1252') from builtins.type
     |      Fix characters from one encoding embedded in some other encoding.
     |      
     |      Currently the only situation supported is Windows-1252 (or its
     |      subset ISO-8859-1), embedded in UTF-8.
     |      
     |      The input must be a bytestring. If you've already converted
     |      the document to Unicode, you're too late.
     |      
     |      The output is a bytestring in which `embedded_encoding`
     |      characters have been converted to their `main_encoding`
     |      equivalents.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  declared_html_encoding
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CHARSET_ALIASES = {'macintosh': 'mac-roman', 'x-sjis': 'shift-jis'}
     |  
     |  ENCODINGS_WITH_SMART_QUOTES = ['windows-1252', 'iso-8859-1', 'iso-8859...
     |  
     |  FIRST_MULTIBYTE_MARKER = 194
     |  
     |  LAST_MULTIBYTE_MARKER = 244
     |  
     |  MS_CHARS = {b'\x80': ('euro', '20AC'), b'\x81': ' ', b'\x82': ('sbquo'...
     |  
     |  MS_CHARS_TO_ASCII = {b'\x80': 'EUR', b'\x81': ' ', b'\x82': ',', b'\x8...
     |  
     |  MULTIBYTE_MARKERS_AND_SIZES = [(194, 223, 2), (224, 239, 3), (240, 244...
     |  
     |  WINDOWS_1252_TO_UTF8 = {128: b'\xe2\x82\xac', 130: b'\xe2\x80\x9a', 13...

FUNCTIONS
    chardet_dammit(s)

DATA
    __license__ = 'MIT'
    chardet_type = None
    codepoint2name = {34: 'quot', 38: 'amp', 60: 'lt', 62: 'gt', 160: 'nbs...
    html_meta_re = re.compile(b'<\\s*meta[^>]+charset\\s*=\\s*["\']?([^>]*...
    xml_encoding_re = re.compile(b'^<\\?.*encoding=[\'"](.*?)[\'"].*\\?>',...

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/bs4/dammit.py


