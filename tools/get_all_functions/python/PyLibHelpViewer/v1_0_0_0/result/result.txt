['selenium.common', 'selenium.webdriver']
['ActionChains', 'Android', 'BlackBerry', 'Chrome', 'ChromeOptions', 'DesiredCapabilities', 'Edge', 'Firefox', 'FirefoxOptions', 'FirefoxProfile', 'Ie', 'IeOptions', 'Opera', 'PhantomJS', 'Proxy', 'Remote', 'Safari', 'TouchActions', 'WebKitGTK', 'WebKitGTKOptions', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', 'android', 'blackberry', 'chrome', 'common', 'edge', 'firefox', 'ie', 'opera', 'phantomjs', 'remote', 'safari', 'support', 'webkitgtk']


====================================================================================================
Help on class ActionChains in module selenium.webdriver.common.action_chains:

class ActionChains(builtins.object)
 |  ActionChains are a way to automate low level interactions such as
 |  mouse movements, mouse button actions, key press, and context menu interactions.
 |  This is useful for doing more complex actions like hover over and drag and drop.
 |  
 |  Generate user actions.
 |     When you call methods for actions on the ActionChains object,
 |     the actions are stored in a queue in the ActionChains object.
 |     When you call perform(), the events are fired in the order they
 |     are queued up.
 |  
 |  ActionChains can be used in a chain pattern::
 |  
 |      menu = driver.find_element_by_css_selector(".nav")
 |      hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")
 |  
 |      ActionChains(driver).move_to_element(menu).click(hidden_submenu).perform()
 |  
 |  Or actions can be queued up one by one, then performed.::
 |  
 |      menu = driver.find_element_by_css_selector(".nav")
 |      hidden_submenu = driver.find_element_by_css_selector(".nav #submenu1")
 |  
 |      actions = ActionChains(driver)
 |      actions.move_to_element(menu)
 |      actions.click(hidden_submenu)
 |      actions.perform()
 |  
 |  Either way, the actions are performed in the order they are called, one after
 |  another.
 |  
 |  Methods defined here:
 |  
 |  __enter__(self)
 |      # Context manager so ActionChains can be used in a 'with .. as' statements.
 |  
 |  __exit__(self, _type, _value, _traceback)
 |  
 |  __init__(self, driver)
 |      Creates a new ActionChains.
 |      
 |      :Args:
 |       - driver: The WebDriver instance which performs user actions.
 |  
 |  click(self, on_element=None)
 |      Clicks an element.
 |      
 |      :Args:
 |       - on_element: The element to click.
 |         If None, clicks on current mouse position.
 |  
 |  click_and_hold(self, on_element=None)
 |      Holds down the left mouse button on an element.
 |      
 |      :Args:
 |       - on_element: The element to mouse down.
 |         If None, clicks on current mouse position.
 |  
 |  context_click(self, on_element=None)
 |      Performs a context-click (right click) on an element.
 |      
 |      :Args:
 |       - on_element: The element to context-click.
 |         If None, clicks on current mouse position.
 |  
 |  double_click(self, on_element=None)
 |      Double-clicks an element.
 |      
 |      :Args:
 |       - on_element: The element to double-click.
 |         If None, clicks on current mouse position.
 |  
 |  drag_and_drop(self, source, target)
 |      Holds down the left mouse button on the source element,
 |         then moves to the target element and releases the mouse button.
 |      
 |      :Args:
 |       - source: The element to mouse down.
 |       - target: The element to mouse up.
 |  
 |  drag_and_drop_by_offset(self, source, xoffset, yoffset)
 |      Holds down the left mouse button on the source element,
 |         then moves to the target offset and releases the mouse button.
 |      
 |      :Args:
 |       - source: The element to mouse down.
 |       - xoffset: X offset to move to.
 |       - yoffset: Y offset to move to.
 |  
 |  key_down(self, value, element=None)
 |      Sends a key press only, without releasing it.
 |         Should only be used with modifier keys (Control, Alt and Shift).
 |      
 |      :Args:
 |       - value: The modifier key to send. Values are defined in `Keys` class.
 |       - element: The element to send keys.
 |         If None, sends a key to current focused element.
 |      
 |      Example, pressing ctrl+c::
 |      
 |          ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()
 |  
 |  key_up(self, value, element=None)
 |      Releases a modifier key.
 |      
 |      :Args:
 |       - value: The modifier key to send. Values are defined in Keys class.
 |       - element: The element to send keys.
 |         If None, sends a key to current focused element.
 |      
 |      Example, pressing ctrl+c::
 |      
 |          ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()
 |  
 |  move_by_offset(self, xoffset, yoffset)
 |      Moving the mouse to an offset from current mouse position.
 |      
 |      :Args:
 |       - xoffset: X offset to move to, as a positive or negative integer.
 |       - yoffset: Y offset to move to, as a positive or negative integer.
 |  
 |  move_to_element(self, to_element)
 |      Moving the mouse to the middle of an element.
 |      
 |      :Args:
 |       - to_element: The WebElement to move to.
 |  
 |  move_to_element_with_offset(self, to_element, xoffset, yoffset)
 |      Move the mouse by an offset of the specified element.
 |         Offsets are relative to the top-left corner of the element.
 |      
 |      :Args:
 |       - to_element: The WebElement to move to.
 |       - xoffset: X offset to move to.
 |       - yoffset: Y offset to move to.
 |  
 |  pause(self, seconds)
 |      Pause all inputs for the specified duration in seconds
 |  
 |  perform(self)
 |      Performs all stored actions.
 |  
 |  release(self, on_element=None)
 |      Releasing a held mouse button on an element.
 |      
 |      :Args:
 |       - on_element: The element to mouse up.
 |         If None, releases on current mouse position.
 |  
 |  reset_actions(self)
 |      Clears actions that are already stored locally and on the remote end
 |  
 |  send_keys(self, *keys_to_send)
 |      Sends keys to current focused element.
 |      
 |      :Args:
 |       - keys_to_send: The keys to send.  Modifier keys constants can be found in the
 |         'Keys' class.
 |  
 |  send_keys_to_element(self, element, *keys_to_send)
 |      Sends keys to an element.
 |      
 |      :Args:
 |       - element: The element to send keys.
 |       - keys_to_send: The keys to send.  Modifier keys constants can be found in the
 |         'Keys' class.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.android.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Simple RemoteWebDriver wrapper to start connect to Selendroid's WebView app
 |  
 |  For more info on getting started with Selendroid
 |  http://selendroid.io/mobileWeb.html
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, host='localhost', port=4444, desired_capabilities={'browserName': 'android', 'version': '', 'platform': 'ANDROID'})
 |      Creates a new instance of Selendroid using the WebView app
 |      
 |      :Args:
 |       - host - location of where selendroid is running
 |       - port - port that selendroid is running on
 |       - desired_capabilities: Dictionary object with capabilities
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  quit(self)
 |      Quits the driver and closes every associated window.
 |      
 |      :Usage:
 |          driver.quit()
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.blackberry.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls the BlackBerry Browser and allows you to drive it.
 |  
 |  :Args:
 |   - device_password - password for the BlackBerry device or emulator you are
 |     trying to drive
 |   - bb_tools_dir path to the blackberry-deploy executable. If the default
 |     is used it assumes it is in the $PATH
 |   - hostip - the ip for the device you are trying to drive. Falls back to
 |     169.254.0.1 which is the default ip used
 |   - port - the port being used for WebDriver on device. defaults to 1338
 |   - desired_capabilities: Dictionary object with non-browser specific
 |     capabilities only, such as "proxy" or "loggingPref".
 |  
 |  Note: To get blackberry-deploy you will need to install the BlackBerry
 |        WebWorks SDK - the default install will put it in the $PATH for you.
 |        Download at https://developer.blackberry.com/html5/downloads/
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, device_password, bb_tools_dir=None, hostip='169.254.0.1', port=1338, desired_capabilities={})
 |      Create a new driver that will issue commands using the wire protocol.
 |      
 |      :Args:
 |       - command_executor - Either a string representing URL of the remote server or a custom
 |           remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.
 |       - desired_capabilities - A dictionary of capabilities to request when
 |           starting the browser session. Required parameter.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.
 |           Only used if Firefox is requested. Optional.
 |       - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will
 |           be started with given proxy settings, if possible. Optional.
 |       - keep_alive - Whether to configure remote_connection.RemoteConnection to use
 |           HTTP keep-alive. Defaults to False.
 |       - file_detector - Pass custom file detector object during instantiation. If None,
 |           then default LocalFileDetector() will be used.
 |       - options - instance of a driver options.Options class
 |  
 |  quit(self)
 |      Closes the browser and shuts down the
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.chrome.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls the ChromeDriver and allows you to drive the browser.
 |  
 |  You will need to download the ChromeDriver executable from
 |  http://chromedriver.storage.googleapis.com/index.html
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, executable_path='chromedriver', port=0, options=None, service_args=None, desired_capabilities=None, service_log_path=None, chrome_options=None, keep_alive=True)
 |      Creates a new instance of the chrome driver.
 |      
 |      Starts the service and then creates new instance of chrome driver.
 |      
 |      :Args:
 |       - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH
 |       - port - port you would like the service to run, if left as 0, a free port will be found.
 |       - options - this takes an instance of ChromeOptions
 |       - service_args - List of args to pass to the driver service
 |       - desired_capabilities - Dictionary object with non-browser specific
 |         capabilities only, such as "proxy" or "loggingPref".
 |       - service_log_path - Where to log information from the driver.
 |       - chrome_options - Deprecated argument for options
 |       - keep_alive - Whether to configure ChromeRemoteConnection to use HTTP keep-alive.
 |  
 |  create_options(self)
 |  
 |  execute_cdp_cmd(self, cmd, cmd_args)
 |      Execute Chrome Devtools Protocol command and get returned result
 |      
 |      The command and command args should follow chrome devtools protocol domains/commands, refer to link
 |      https://chromedevtools.github.io/devtools-protocol/
 |      
 |      :Args:
 |       - cmd: A str, command name
 |       - cmd_args: A dict, command args. empty dict {} if there is no command args
 |      
 |      :Usage:
 |          driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': requestId})
 |      
 |      :Returns:
 |          A dict, empty dict {} if there is no result to return.
 |          For example to getResponseBody:
 |      
 |          {'base64Encoded': False, 'body': 'response body string'}
 |  
 |  get_network_conditions(self)
 |      Gets Chrome network emulation settings.
 |      
 |      :Returns:
 |          A dict. For example:
 |      
 |          {'latency': 4, 'download_throughput': 2, 'upload_throughput': 2,
 |          'offline': False}
 |  
 |  launch_app(self, id)
 |      Launches Chrome app specified by id.
 |  
 |  quit(self)
 |      Closes the browser and shuts down the ChromeDriver executable
 |      that is started when starting the ChromeDriver
 |  
 |  set_network_conditions(self, **network_conditions)
 |      Sets Chrome network emulation settings.
 |      
 |      :Args:
 |       - network_conditions: A dict with conditions specification.
 |      
 |      :Usage:
 |          driver.set_network_conditions(
 |              offline=False,
 |              latency=5,  # additional latency (ms)
 |              download_throughput=500 * 1024,  # maximal throughput
 |              upload_throughput=500 * 1024)  # maximal throughput
 |      
 |          Note: 'throughput' can be used to set both (for download and upload).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class Options in module selenium.webdriver.chrome.options:

class Options(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  add_argument(self, argument)
 |      Adds an argument to the list
 |      
 |      :Args:
 |       - Sets the arguments
 |  
 |  add_encoded_extension(self, extension)
 |      Adds Base64 encoded string with extension data to a list that will be used to extract it
 |      to the ChromeDriver
 |      
 |      :Args:
 |       - extension: Base64 encoded string with extension data
 |  
 |  add_experimental_option(self, name, value)
 |      Adds an experimental option which is passed to chrome.
 |      
 |      Args:
 |        name: The experimental option name.
 |        value: The option value.
 |  
 |  add_extension(self, extension)
 |      Adds the path to the extension to a list that will be used to extract it
 |      to the ChromeDriver
 |      
 |      :Args:
 |       - extension: path to the \*.crx file
 |  
 |  set_capability(self, name, value)
 |      Sets a capability.
 |  
 |  set_headless(self, headless=True)
 |      Deprecated, options.headless = True
 |  
 |  to_capabilities(self)
 |      Creates a capabilities with all the options that have been set and
 |      
 |      returns a dictionary with everything
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  arguments
 |      Returns a list of arguments needed for the browser
 |  
 |  binary_location
 |      Returns the location of the binary otherwise an empty string
 |  
 |  capabilities
 |  
 |  debugger_address
 |      Returns the address of the remote devtools instance
 |  
 |  experimental_options
 |      Returns a dictionary of experimental options for chrome.
 |  
 |  extensions
 |      Returns a list of encoded extensions that will be loaded into chrome
 |  
 |  headless
 |      Returns whether or not the headless argument is set
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEY = 'goog:chromeOptions'

[OK] Hlep is printed !
====================================================================================================
Help on class DesiredCapabilities in module selenium.webdriver.common.desired_capabilities:

class DesiredCapabilities(builtins.object)
 |  Set of default supported desired capabilities.
 |  
 |  Use this as a starting point for creating a desired capabilities object for
 |  requesting remote webdrivers for connecting to selenium server or selenium grid.
 |  
 |  Usage Example::
 |  
 |      from selenium import webdriver
 |  
 |      selenium_grid_url = "http://198.0.0.1:4444/wd/hub"
 |  
 |      # Create a desired capabilities object as a starting point.
 |      capabilities = DesiredCapabilities.FIREFOX.copy()
 |      capabilities['platform'] = "WINDOWS"
 |      capabilities['version'] = "10"
 |  
 |      # Instantiate an instance of Remote WebDriver with the desired capabilities.
 |      driver = webdriver.Remote(desired_capabilities=capabilities,
 |                                command_executor=selenium_grid_url)
 |  
 |  Note: Always use '.copy()' on the DesiredCapabilities object to avoid the side
 |  effects of altering the Global class instance.
 |  
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ANDROID = {'browserName': 'android', 'platform': 'ANDROID', 'version':...
 |  
 |  CHROME = {'browserName': 'chrome', 'platform': 'ANY', 'version': ''}
 |  
 |  EDGE = {'browserName': 'MicrosoftEdge', 'platform': 'WINDOWS', 'versio...
 |  
 |  FIREFOX = {'acceptInsecureCerts': True, 'browserName': 'firefox', 'mar...
 |  
 |  HTMLUNIT = {'browserName': 'htmlunit', 'platform': 'ANY', 'version': '...
 |  
 |  HTMLUNITWITHJS = {'browserName': 'htmlunit', 'javascriptEnabled': True...
 |  
 |  INTERNETEXPLORER = {'browserName': 'internet explorer', 'platform': 'W...
 |  
 |  IPAD = {'browserName': 'iPad', 'platform': 'MAC', 'version': ''}
 |  
 |  IPHONE = {'browserName': 'iPhone', 'platform': 'MAC', 'version': ''}
 |  
 |  OPERA = {'browserName': 'opera', 'platform': 'ANY', 'version': ''}
 |  
 |  PHANTOMJS = {'browserName': 'phantomjs', 'javascriptEnabled': True, 'p...
 |  
 |  SAFARI = {'browserName': 'safari', 'platform': 'MAC', 'version': ''}
 |  
 |  WEBKITGTK = {'browserName': 'MiniBrowser', 'platform': 'ANY', 'version...

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.edge.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls a browser by sending commands to a remote server.
 |  This server is expected to be running the WebDriver wire protocol
 |  as defined at
 |  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol
 |  
 |  :Attributes:
 |   - session_id - String ID of the browser session started and controlled by this WebDriver.
 |   - capabilities - Dictionaty of effective capabilities of this browser session as returned
 |       by the remote server. See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities
 |   - command_executor - remote_connection.RemoteConnection object used to execute commands.
 |   - error_handler - errorhandler.ErrorHandler object used to handle errors.
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, executable_path='MicrosoftWebDriver.exe', capabilities=None, port=0, verbose=False, service_log_path=None, log_path=None, keep_alive=False)
 |      Creates a new instance of the chrome driver.
 |      
 |      Starts the service and then creates new instance of chrome driver.
 |      
 |      :Args:
 |       - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH
 |       - capabilities - Dictionary object with non-browser specific
 |         capabilities only, such as "proxy" or "loggingPref".
 |       - port - port you would like the service to run, if left as 0, a free port will be found.
 |       - verbose - whether to set verbose logging in the service
 |       - service_log_path - Where to log information from the driver.
 |       - log_path: Deprecated argument for service_log_path
 |       - keep_alive - Whether to configure ChromeRemoteConnection to use HTTP keep-alive.
 |  
 |  quit(self)
 |      Quits the driver and closes every associated window.
 |      
 |      :Usage:
 |          driver.quit()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.firefox.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls a browser by sending commands to a remote server.
 |  This server is expected to be running the WebDriver wire protocol
 |  as defined at
 |  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol
 |  
 |  :Attributes:
 |   - session_id - String ID of the browser session started and controlled by this WebDriver.
 |   - capabilities - Dictionaty of effective capabilities of this browser session as returned
 |       by the remote server. See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities
 |   - command_executor - remote_connection.RemoteConnection object used to execute commands.
 |   - error_handler - errorhandler.ErrorHandler object used to handle errors.
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, firefox_profile=None, firefox_binary=None, timeout=30, capabilities=None, proxy=None, executable_path='geckodriver', options=None, service_log_path='geckodriver.log', firefox_options=None, service_args=None, desired_capabilities=None, log_path=None, keep_alive=True)
 |      Starts a new local session of Firefox.
 |      
 |      Based on the combination and specificity of the various keyword
 |      arguments, a capabilities dictionary will be constructed that
 |      is passed to the remote end.
 |      
 |      The keyword arguments given to this constructor are helpers to
 |      more easily allow Firefox WebDriver sessions to be customised
 |      with different options.  They are mapped on to a capabilities
 |      dictionary that is passed on to the remote end.
 |      
 |      As some of the options, such as `firefox_profile` and
 |      `options.profile` are mutually exclusive, precedence is
 |      given from how specific the setting is.  `capabilities` is the
 |      least specific keyword argument, followed by `options`,
 |      followed by `firefox_binary` and `firefox_profile`.
 |      
 |      In practice this means that if `firefox_profile` and
 |      `options.profile` are both set, the selected profile
 |      instance will always come from the most specific variable.
 |      In this case that would be `firefox_profile`.  This will result in
 |      `options.profile` to be ignored because it is considered
 |      a less specific setting than the top-level `firefox_profile`
 |      keyword argument.  Similarily, if you had specified a
 |      `capabilities["moz:firefoxOptions"]["profile"]` Base64 string,
 |      this would rank below `options.profile`.
 |      
 |      :param firefox_profile: Instance of ``FirefoxProfile`` object
 |          or a string.  If undefined, a fresh profile will be created
 |          in a temporary location on the system.
 |      :param firefox_binary: Instance of ``FirefoxBinary`` or full
 |          path to the Firefox binary.  If undefined, the system default
 |          Firefox installation will  be used.
 |      :param timeout: Time to wait for Firefox to launch when using
 |          the extension connection.
 |      :param capabilities: Dictionary of desired capabilities.
 |      :param proxy: The proxy settings to us when communicating with
 |          Firefox via the extension connection.
 |      :param executable_path: Full path to override which geckodriver
 |          binary to use for Firefox 47.0.1 and greater, which
 |          defaults to picking up the binary from the system path.
 |      :param options: Instance of ``options.Options``.
 |      :param service_log_path: Where to log information from the driver.
 |      :param firefox_options: Deprecated argument for options
 |      :param service_args: List of args to pass to the driver service
 |      :param desired_capabilities: alias of capabilities. In future
 |          versions of this library, this will replace 'capabilities'.
 |          This will make the signature consistent with RemoteWebDriver.
 |      :param log_path: Deprecated argument for service_log_path
 |      :param keep_alive: Whether to configure remote_connection.RemoteConnection to use
 |           HTTP keep-alive.
 |  
 |  context(self, context)
 |      Sets the context that Selenium commands are running in using
 |      a `with` statement. The state of the context on the server is
 |      saved before entering the block, and restored upon exiting it.
 |      
 |      :param context: Context, may be one of the class properties
 |          `CONTEXT_CHROME` or `CONTEXT_CONTENT`.
 |      
 |      Usage example::
 |      
 |          with selenium.context(selenium.CONTEXT_CHROME):
 |              # chrome scope
 |              ... do stuff ...
 |  
 |  install_addon(self, path, temporary=None)
 |      Installs Firefox addon.
 |      
 |      Returns identifier of installed addon. This identifier can later
 |      be used to uninstall addon.
 |      
 |      :param path: Absolute path to the addon that will be installed.
 |      
 |      :Usage:
 |          driver.install_addon('/path/to/firebug.xpi')
 |  
 |  quit(self)
 |      Quits the driver and close every associated window.
 |  
 |  set_context(self, context)
 |  
 |  uninstall_addon(self, identifier)
 |      Uninstalls Firefox addon using its identifier.
 |      
 |      :Usage:
 |          driver.uninstall_addon('addon@foo.com')
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  firefox_profile
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  CONTEXT_CHROME = 'chrome'
 |  
 |  CONTEXT_CONTENT = 'content'
 |  
 |  NATIVE_EVENTS_ALLOWED = False
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class Options in module selenium.webdriver.firefox.options:

class Options(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  add_argument(self, argument)
 |      Add argument to be used for the browser process.
 |  
 |  set_capability(self, name, value)
 |      Sets a capability.
 |  
 |  set_headless(self, headless=True)
 |      Deprecated, options.headless = True
 |  
 |  set_preference(self, name, value)
 |      Sets a preference.
 |  
 |  to_capabilities(self)
 |      Marshals the Firefox options to a `moz:firefoxOptions`
 |      object.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  accept_insecure_certs
 |  
 |  arguments
 |      Returns a list of browser process arguments.
 |  
 |  binary
 |      Returns the FirefoxBinary instance
 |  
 |  binary_location
 |      Returns the location of the binary.
 |  
 |  capabilities
 |  
 |  headless
 |      Returns whether or not the headless argument is set
 |  
 |  preferences
 |      Returns a dict of preferences.
 |  
 |  profile
 |      Returns the Firefox profile to use.
 |  
 |  proxy
 |      returns Proxy if set otherwise None.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEY = 'moz:firefoxOptions'

[OK] Hlep is printed !
====================================================================================================
Help on class FirefoxProfile in module selenium.webdriver.firefox.firefox_profile:

class FirefoxProfile(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, profile_directory=None)
 |      Initialises a new instance of a Firefox Profile
 |      
 |      :args:
 |       - profile_directory: Directory of profile that you want to use. If a
 |         directory is passed in it will be cloned and the cloned directory
 |         will be used by the driver when instantiated.
 |         This defaults to None and will create a new
 |         directory when object is created.
 |  
 |  add_extension(self, extension='webdriver.xpi')
 |  
 |  set_preference(self, key, value)
 |      sets the preference that we want in the profile.
 |  
 |  set_proxy(self, proxy)
 |  
 |  update_preferences(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  accept_untrusted_certs
 |  
 |  assume_untrusted_cert_issuer
 |  
 |  encoded
 |      A zipped, base64 encoded string of profile directory
 |      for use with remote WebDriver JSON wire protocol
 |  
 |  native_events_enabled
 |  
 |  path
 |      Gets the profile directory that is currently being used
 |  
 |  port
 |      Gets the port that WebDriver is working on
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ANONYMOUS_PROFILE_NAME = 'WEBDRIVER_ANONYMOUS_PROFILE'
 |  
 |  DEFAULT_PREFERENCES = None

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.ie.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls the IEServerDriver and allows you to drive Internet Explorer
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, executable_path='IEDriverServer.exe', capabilities=None, port=0, timeout=30, host=None, log_level=None, service_log_path=None, options=None, ie_options=None, desired_capabilities=None, log_file=None, keep_alive=False)
 |      Creates a new instance of the chrome driver.
 |      
 |      Starts the service and then creates new instance of chrome driver.
 |      
 |      :Args:
 |       - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH
 |       - capabilities: capabilities Dictionary object
 |       - port - port you would like the service to run, if left as 0, a free port will be found.
 |       - timeout - no longer used, kept for backward compatibility
 |       - host - IP address for the service
 |       - log_level - log level you would like the service to run.
 |       - service_log_path - target of logging of service, may be "stdout", "stderr" or file path.
 |       - options - IE Options instance, providing additional IE options
 |       - ie_options - Deprecated argument for options
 |       - desired_capabilities - alias of capabilities; this will make the signature consistent with RemoteWebDriver.
 |       - log_file - Deprecated argument for service_log_path
 |       - keep_alive - Whether to configure RemoteConnection to use HTTP keep-alive.
 |  
 |  create_options(self)
 |  
 |  quit(self)
 |      Quits the driver and closes every associated window.
 |      
 |      :Usage:
 |          driver.quit()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class Options in module selenium.webdriver.ie.options:

class Options(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  add_additional_option(self, name, value)
 |      Adds an additional option not yet added as a safe option for IE
 |      
 |      :Args:
 |       - name: name of the option to add
 |       - value: value of the option to add
 |  
 |  add_argument(self, argument)
 |      Add argument to be used for the browser process
 |  
 |  set_capability(self, name, value)
 |      Sets a capability.
 |  
 |  to_capabilities(self)
 |      Marshals the IE options to a the correct object
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  additional_options
 |      Returns the additional options
 |  
 |  arguments
 |      Returns a list of browser process arguments
 |  
 |  browser_attach_timeout
 |      Returns the options Browser Attach Timeout in milliseconds
 |  
 |  capabilities
 |  
 |  element_scroll_behavior
 |      Returns the options Element Scroll Behavior in milliseconds
 |  
 |  ensure_clean_session
 |      Returns the options Ensure Clean Session value
 |  
 |  file_upload_dialog_timeout
 |      Returns the options File Upload Dialog Timeout in milliseconds
 |  
 |  force_create_process_api
 |      Returns the options Force Create Process Api value
 |  
 |  force_shell_windows_api
 |      Returns the options Force Shell Windows Api value
 |  
 |  full_page_screenshot
 |      Returns the options Full Page Screenshot value
 |  
 |  ignore_protected_mode_settings
 |      Returns the options Ignore Protected Mode Settings value
 |  
 |  ignore_zoom_level
 |      Returns the options Ignore Zoom Level value
 |  
 |  initial_browser_url
 |      Returns the options Initial Browser Url value
 |  
 |  native_events
 |      Returns the options Native Events value
 |  
 |  options
 |      Returns a dictionary of browser options
 |  
 |  persistent_hover
 |      Returns the options Persistent Hover value
 |  
 |  require_window_focus
 |      Returns the options Require Window Focus value
 |  
 |  use_per_process_proxy
 |      Returns the options User Per Process Proxy value
 |  
 |  validate_cookie_document_type
 |      Returns the options Validate Cookie Document Type value
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  BROWSER_ATTACH_TIMEOUT = 'browserAttachTimeout'
 |  
 |  ELEMENT_SCROLL_BEHAVIOR = 'elementScrollBehavior'
 |  
 |  ENSURE_CLEAN_SESSION = 'ie.ensureCleanSession'
 |  
 |  FILE_UPLOAD_DIALOG_TIMEOUT = 'ie.fileUploadDialogTimeout'
 |  
 |  FORCE_CREATE_PROCESS_API = 'ie.forceCreateProcessApi'
 |  
 |  FORCE_SHELL_WINDOWS_API = 'ie.forceShellWindowsApi'
 |  
 |  FULL_PAGE_SCREENSHOT = 'ie.enableFullPageScreenshot'
 |  
 |  IGNORE_PROTECTED_MODE_SETTINGS = 'ignoreProtectedModeSettings'
 |  
 |  IGNORE_ZOOM_LEVEL = 'ignoreZoomSetting'
 |  
 |  INITIAL_BROWSER_URL = 'initialBrowserUrl'
 |  
 |  KEY = 'se:ieOptions'
 |  
 |  NATIVE_EVENTS = 'nativeEvents'
 |  
 |  PERSISTENT_HOVER = 'enablePersistentHover'
 |  
 |  REQUIRE_WINDOW_FOCUS = 'requireWindowFocus'
 |  
 |  SWITCHES = 'ie.browserCommandLineSwitches'
 |  
 |  USE_PER_PROCESS_PROXY = 'ie.usePerProcessProxy'
 |  
 |  VALIDATE_COOKIE_DOCUMENT_TYPE = 'ie.validateCookieDocumentType'

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.opera.webdriver:

class WebDriver(OperaDriver)
 |  Controls the new OperaDriver and allows you
 |  to drive the Opera browser based on Chromium.
 |  
 |  Method resolution order:
 |      WebDriver
 |      OperaDriver
 |      selenium.webdriver.chrome.webdriver.WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, desired_capabilities=None, executable_path=None, port=0, service_log_path=None, service_args=None, options=None)
 |      Creates a new instance of the operadriver.
 |      
 |      Starts the service and then creates new instance of operadriver.
 |      
 |      :Args:
 |       - executable_path - path to the executable. If the default is used
 |                           it assumes the executable is in the $PATH
 |       - port - port you would like the service to run, if left as 0,
 |                a free port will be found.
 |       - options: this takes an instance of OperaOptions
 |       - service_args - List of args to pass to the driver service
 |       - desired_capabilities: Dictionary object with non-browser specific
 |       - service_log_path - Where to log information from the driver.
 |       - opera_options - Deprecated argument for options
 |         capabilities only, such as "proxy" or "loggingPref".
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ServiceType = <class 'selenium.webdriver.opera.webdriver.WebDriver.Ser...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from OperaDriver:
 |  
 |  create_options(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.chrome.webdriver.WebDriver:
 |  
 |  execute_cdp_cmd(self, cmd, cmd_args)
 |      Execute Chrome Devtools Protocol command and get returned result
 |      
 |      The command and command args should follow chrome devtools protocol domains/commands, refer to link
 |      https://chromedevtools.github.io/devtools-protocol/
 |      
 |      :Args:
 |       - cmd: A str, command name
 |       - cmd_args: A dict, command args. empty dict {} if there is no command args
 |      
 |      :Usage:
 |          driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': requestId})
 |      
 |      :Returns:
 |          A dict, empty dict {} if there is no result to return.
 |          For example to getResponseBody:
 |      
 |          {'base64Encoded': False, 'body': 'response body string'}
 |  
 |  get_network_conditions(self)
 |      Gets Chrome network emulation settings.
 |      
 |      :Returns:
 |          A dict. For example:
 |      
 |          {'latency': 4, 'download_throughput': 2, 'upload_throughput': 2,
 |          'offline': False}
 |  
 |  launch_app(self, id)
 |      Launches Chrome app specified by id.
 |  
 |  quit(self)
 |      Closes the browser and shuts down the ChromeDriver executable
 |      that is started when starting the ChromeDriver
 |  
 |  set_network_conditions(self, **network_conditions)
 |      Sets Chrome network emulation settings.
 |      
 |      :Args:
 |       - network_conditions: A dict with conditions specification.
 |      
 |      :Usage:
 |          driver.set_network_conditions(
 |              offline=False,
 |              latency=5,  # additional latency (ms)
 |              download_throughput=500 * 1024,  # maximal throughput
 |              upload_throughput=500 * 1024)  # maximal throughput
 |      
 |          Note: 'throughput' can be used to set both (for download and upload).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.phantomjs.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Wrapper to communicate with PhantomJS through Ghostdriver.
 |  
 |  You will need to follow all the directions here:
 |  https://github.com/detro/ghostdriver
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, executable_path='phantomjs', port=0, desired_capabilities={'browserName': 'phantomjs', 'version': '', 'platform': 'ANY', 'javascriptEnabled': True}, service_args=None, service_log_path=None)
 |      Creates a new instance of the PhantomJS / Ghostdriver.
 |      
 |      Starts the service and then creates new instance of the driver.
 |      
 |      :Args:
 |       - executable_path - path to the executable. If the default is used it assumes the executable is in the $PATH
 |       - port - port you would like the service to run, if left as 0, a free port will be found.
 |       - desired_capabilities: Dictionary object with non-browser specific
 |         capabilities only, such as "proxy" or "loggingPref".
 |       - service_args : A List of command line arguments to pass to PhantomJS
 |       - service_log_path: Path for phantomjs service to log to.
 |  
 |  quit(self)
 |      Closes the browser and shuts down the PhantomJS executable
 |      that is started when starting the PhantomJS
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class Proxy in module selenium.webdriver.common.proxy:

class Proxy(builtins.object)
 |  Proxy contains information about proxy type and necessary proxy settings.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, raw=None)
 |      Creates a new Proxy.
 |      
 |      :Args:
 |       - raw: raw proxy data. If None, default class values are used.
 |  
 |  add_to_capabilities(self, capabilities)
 |      Adds proxy information as capability in specified capabilities.
 |      
 |      :Args:
 |       - capabilities: The capabilities to which proxy will be added.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  auto_detect
 |      Returns autodetect setting.
 |  
 |  ftp_proxy
 |      Returns ftp proxy setting.
 |  
 |  http_proxy
 |      Returns http proxy setting.
 |  
 |  no_proxy
 |      Returns noproxy setting.
 |  
 |  proxy_autoconfig_url
 |      Returns proxy autoconfig url setting.
 |  
 |  proxy_type
 |      Returns proxy type as `ProxyType`.
 |  
 |  socks_password
 |      Returns socks proxy password setting.
 |  
 |  socks_proxy
 |      Returns socks proxy setting.
 |  
 |  socks_username
 |      Returns socks proxy username setting.
 |  
 |  ssl_proxy
 |      Returns https proxy setting.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  autodetect = False
 |  
 |  ftpProxy = ''
 |  
 |  httpProxy = ''
 |  
 |  noProxy = ''
 |  
 |  proxyAutoconfigUrl = ''
 |  
 |  proxyType = {'ff_value': 6, 'string': 'UNSPECIFIED'}
 |  
 |  socksPassword = ''
 |  
 |  socksProxy = ''
 |  
 |  socksUsername = ''
 |  
 |  sslProxy = ''

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.remote.webdriver:

class WebDriver(builtins.object)
 |  Controls a browser by sending commands to a remote server.
 |  This server is expected to be running the WebDriver wire protocol
 |  as defined at
 |  https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol
 |  
 |  :Attributes:
 |   - session_id - String ID of the browser session started and controlled by this WebDriver.
 |   - capabilities - Dictionaty of effective capabilities of this browser session as returned
 |       by the remote server. See https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities
 |   - command_executor - remote_connection.RemoteConnection object used to execute commands.
 |   - error_handler - errorhandler.ErrorHandler object used to handle errors.
 |  
 |  Methods defined here:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __init__(self, command_executor='http://127.0.0.1:4444/wd/hub', desired_capabilities=None, browser_profile=None, proxy=None, keep_alive=False, file_detector=None, options=None)
 |      Create a new driver that will issue commands using the wire protocol.
 |      
 |      :Args:
 |       - command_executor - Either a string representing URL of the remote server or a custom
 |           remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.
 |       - desired_capabilities - A dictionary of capabilities to request when
 |           starting the browser session. Required parameter.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.
 |           Only used if Firefox is requested. Optional.
 |       - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will
 |           be started with given proxy settings, if possible. Optional.
 |       - keep_alive - Whether to configure remote_connection.RemoteConnection to use
 |           HTTP keep-alive. Defaults to False.
 |       - file_detector - Pass custom file detector object during instantiation. If None,
 |           then default LocalFileDetector() will be used.
 |       - options - instance of a driver options.Options class
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  quit(self)
 |      Quits the driver and closes every associated window.
 |      
 |      :Usage:
 |          driver.quit()
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.safari.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls the SafariDriver and allows you to drive the browser.
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, port=0, executable_path='/usr/bin/safaridriver', reuse_service=False, desired_capabilities={'browserName': 'safari', 'version': '', 'platform': 'MAC'}, quiet=False, keep_alive=True, service_args=None)
 |      Creates a new Safari driver instance and launches or finds a running safaridriver service.
 |      
 |      :Args:
 |       - port - The port on which the safaridriver service should listen for new connections. If zero, a free port will be found.
 |       - executable_path - Path to a custom safaridriver executable to be used. If absent, /usr/bin/safaridriver is used.
 |       - reuse_service - If True, do not spawn a safaridriver instance; instead, connect to an already-running service that was launched externally.
 |       - desired_capabilities: Dictionary object with desired capabilities (Can be used to provide various Safari switches).
 |       - quiet - If True, the driver's stdout and stderr is suppressed.
 |       - keep_alive - Whether to configure SafariRemoteConnection to use
 |           HTTP keep-alive. Defaults to False.
 |       - service_args : List of args to pass to the safaridriver service
 |  
 |  debug(self)
 |      # First available in Safari 11.1 and Safari Technology Preview 42.
 |  
 |  get_permission(self, permission)
 |      # First available in Safari 11.1 and Safari Technology Preview 41.
 |  
 |  quit(self)
 |      Closes the browser and shuts down the SafariDriver executable
 |      that is started when starting the SafariDriver
 |  
 |  set_permission(self, permission, value)
 |      # First available in Safari 11.1 and Safari Technology Preview 41.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class TouchActions in module selenium.webdriver.common.touch_actions:

class TouchActions(builtins.object)
 |  Generate touch actions. Works like ActionChains; actions are stored in the
 |  TouchActions object and are fired with perform().
 |  
 |  Methods defined here:
 |  
 |  __enter__(self)
 |      # Context manager so TouchActions can be used in a 'with .. as' statements.
 |  
 |  __exit__(self, _type, _value, _traceback)
 |  
 |  __init__(self, driver)
 |      Creates a new TouchActions object.
 |      
 |      :Args:
 |       - driver: The WebDriver instance which performs user actions.
 |         It should be with touchscreen enabled.
 |  
 |  double_tap(self, on_element)
 |      Double taps on a given element.
 |      
 |      :Args:
 |       - on_element: The element to tap.
 |  
 |  flick(self, xspeed, yspeed)
 |      Flicks, starting anywhere on the screen.
 |      
 |      :Args:
 |       - xspeed: The X speed in pixels per second.
 |       - yspeed: The Y speed in pixels per second.
 |  
 |  flick_element(self, on_element, xoffset, yoffset, speed)
 |      Flick starting at on_element, and moving by the xoffset and yoffset
 |      with specified speed.
 |      
 |      :Args:
 |       - on_element: Flick will start at center of element.
 |       - xoffset: X offset to flick to.
 |       - yoffset: Y offset to flick to.
 |       - speed: Pixels per second to flick.
 |  
 |  long_press(self, on_element)
 |      Long press on an element.
 |      
 |      :Args:
 |       - on_element: The element to long press.
 |  
 |  move(self, xcoord, ycoord)
 |      Move held tap to specified location.
 |      
 |      :Args:
 |       - xcoord: X Coordinate to move.
 |       - ycoord: Y Coordinate to move.
 |  
 |  perform(self)
 |      Performs all stored actions.
 |  
 |  release(self, xcoord, ycoord)
 |      Release previously issued tap 'and hold' command at specified location.
 |      
 |      :Args:
 |       - xcoord: X Coordinate to release.
 |       - ycoord: Y Coordinate to release.
 |  
 |  scroll(self, xoffset, yoffset)
 |      Touch and scroll, moving by xoffset and yoffset.
 |      
 |      :Args:
 |       - xoffset: X offset to scroll to.
 |       - yoffset: Y offset to scroll to.
 |  
 |  scroll_from_element(self, on_element, xoffset, yoffset)
 |      Touch and scroll starting at on_element, moving by xoffset and yoffset.
 |      
 |      :Args:
 |       - on_element: The element where scroll starts.
 |       - xoffset: X offset to scroll to.
 |       - yoffset: Y offset to scroll to.
 |  
 |  tap(self, on_element)
 |      Taps on a given element.
 |      
 |      :Args:
 |       - on_element: The element to tap.
 |  
 |  tap_and_hold(self, xcoord, ycoord)
 |      Touch down at given coordinates.
 |      
 |      :Args:
 |       - xcoord: X Coordinate to touch down.
 |       - ycoord: Y Coordinate to touch down.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

[OK] Hlep is printed !
====================================================================================================
Help on class WebDriver in module selenium.webdriver.webkitgtk.webdriver:

class WebDriver(selenium.webdriver.remote.webdriver.WebDriver)
 |  Controls the WebKitGTKDriver and allows you to drive the browser.
 |  
 |  Method resolution order:
 |      WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, executable_path='WebKitWebDriver', port=0, options=None, desired_capabilities={'browserName': 'MiniBrowser', 'version': '', 'platform': 'ANY'}, service_log_path=None, keep_alive=False)
 |      Creates a new instance of the WebKitGTK driver.
 |      
 |      Starts the service and then creates new instance of WebKitGTK Driver.
 |      
 |      :Args:
 |       - executable_path : path to the executable. If the default is used it assumes the executable is in the $PATH.
 |       - port : port you would like the service to run, if left as 0, a free port will be found.
 |       - options : an instance of WebKitGTKOptions
 |       - desired_capabilities : Dictionary object with desired capabilities
 |       - service_log_path : Path to write service stdout and stderr output.
 |       - keep_alive : Whether to configure RemoteConnection to use HTTP keep-alive.
 |  
 |  quit(self)
 |      Closes the browser and shuts down the WebKitGTKDriver executable
 |      that is started when starting the WebKitGTKDriver
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict)
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |  
 |  back(self)
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          driver.back()
 |  
 |  close(self)
 |      Closes the current window.
 |      
 |      :Usage:
 |          driver.close()
 |  
 |  create_web_element(self, element_id)
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self)
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name)
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command, params=None)
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          script = "var callback = arguments[arguments.length - 1]; "                      "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |          driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None)
 |      Find an element given a By strategy and locator. Prefer the find_element_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name)
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector)
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_)
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text)
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name)
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text)
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name)
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath)
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None)
 |      Find elements given a By strategy and locator. Prefer the find_elements_by_* methods when
 |      possible.
 |      
 |      :Usage:
 |          elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name)
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector)
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_)
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text)
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name)
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text)
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name)
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath)
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self)
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          driver.forward()
 |  
 |  fullscreen_window(self)
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url)
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name)
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self)
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          driver.get_log('browser')
 |          driver.get_log('driver')
 |          driver.get_log('client')
 |          driver.get_log('server')
 |  
 |  get_screenshot_as_base64(self)
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self)
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current')
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          driver.get_window_position()
 |  
 |  get_window_rect(self)
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current')
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait)
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.implicitly_wait(30)
 |  
 |  maximize_window(self)
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self)
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  refresh(self)
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          driver.refresh()
 |  
 |  save_screenshot(self, filename)
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait)
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait)
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current')
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None)
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          driver.set_window_rect(x=10, y=10)
 |          driver.set_window_rect(width=100, height=200)
 |          driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current')
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities, browser_profile=None)
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - browser_name - The name of the browser to request.
 |       - version - Which browser version to request.
 |       - platform - Which platform to request the browser on.
 |       - javascript_enabled - Whether the new session should support JavaScript.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  switch_to_active_element(self)
 |      Deprecated use driver.switch_to.active_element
 |  
 |  switch_to_alert(self)
 |      Deprecated use driver.switch_to.alert
 |  
 |  switch_to_default_content(self)
 |      Deprecated use driver.switch_to.default_content
 |  
 |  switch_to_frame(self, frame_reference)
 |      Deprecated use driver.switch_to.frame
 |  
 |  switch_to_window(self, window_name)
 |      Deprecated use driver.switch_to.window
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  file_detector
 |  
 |  log_types
 |      Gets a list of the available log types
 |      
 |      :Usage:
 |          driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          name = driver.name
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          orientation = driver.orientation
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          element = driver.switch_to.active_element
 |          alert = driver.switch_to.alert
 |          driver.switch_to.default_content()
 |          driver.switch_to.frame('frame_name')
 |          driver.switch_to.frame(1)
 |          driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |          driver.switch_to.parent_frame()
 |          driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          driver.window_handles

[OK] Hlep is printed !
====================================================================================================
Help on class Options in module selenium.webdriver.webkitgtk.options:

class Options(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  add_argument(self, argument)
 |      Adds an argument to the list
 |      
 |      :Args:
 |       - Sets the arguments
 |  
 |  set_capability(self, name, value)
 |      Sets a capability.
 |  
 |  to_capabilities(self)
 |      Creates a capabilities with all the options that have been set and
 |      returns a dictionary with everything
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  arguments
 |      Returns a list of arguments needed for the browser
 |  
 |  binary_location
 |      Returns the location of the browser binary otherwise an empty string
 |  
 |  capabilities
 |  
 |  overlay_scrollbars_enabled
 |      Returns whether overlay scrollbars should be enabled
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEY = 'webkitgtk:browserOptions'

[OK] Hlep is printed !
====================================================================================================
Help on dict object:

class dict(object)
 |  dict() -> new empty dictionary
 |  dict(mapping) -> new dictionary initialized from a mapping object's
 |      (key, value) pairs
 |  dict(iterable) -> new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key, /)
 |      True if D has a key k, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Returns a new dict with keys from iterable and values equal to value.
 |  
 |  get(...)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
 |  
 |  popitem(...)
 |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
 |      2-tuple; but raise KeyError if D is empty.
 |  
 |  setdefault(...)
 |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

[OK] Hlep is printed !
====================================================================================================
No Python documentation found for '/Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/__pycache__/__init__.cpython-36.pyc'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

[OK] Hlep is printed !
====================================================================================================
Help on NoneType object:

class NoneType(object)
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).

[OK] Hlep is printed !
====================================================================================================
No Python documentation found for '/Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/__init__.py'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

[OK] Hlep is printed !
====================================================================================================
Help on SourceFileLoader in module importlib._bootstrap_external object:

class SourceFileLoader(FileLoader, SourceLoader)
 |  Concrete implementation of SourceLoader using the file system.
 |  
 |  Method resolution order:
 |      SourceFileLoader
 |      FileLoader
 |      SourceLoader
 |      _LoaderBasics
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  path_stats(self, path)
 |      Return the metadata for the path.
 |  
 |  set_data(self, path, data, *, _mode=438)
 |      Write bytes data to a file.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FileLoader:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, fullname, path)
 |      Cache the module name and the path to the file found by the
 |      finder.
 |  
 |  get_data(self, path)
 |      Return the data from path as raw bytes.
 |  
 |  get_filename(self, name=None, *args, **kwargs)
 |      Return the path to the source file as found by the finder.
 |  
 |  load_module(self, name=None, *args, **kwargs)
 |      Load a module from a file.
 |      
 |      This method is deprecated.  Use exec_module() instead.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from FileLoader:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SourceLoader:
 |  
 |  get_code(self, fullname)
 |      Concrete implementation of InspectLoader.get_code.
 |      
 |      Reading of bytecode requires path_stats to be implemented. To write
 |      bytecode, set_data must also be implemented.
 |  
 |  get_source(self, fullname)
 |      Concrete implementation of InspectLoader.get_source.
 |  
 |  path_mtime(self, path)
 |      Optional method that returns the modification time (an int) for the
 |      specified path, where path is a str.
 |      
 |      Raises IOError when the path cannot be handled.
 |  
 |  source_to_code(self, data, path, *, _optimize=-1)
 |      Return the code object compiled from source.
 |      
 |      The 'data' argument can be any object type that compile() supports.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _LoaderBasics:
 |  
 |  create_module(self, spec)
 |      Use default semantics for module creation.
 |  
 |  exec_module(self, module)
 |      Execute the module.
 |  
 |  is_package(self, fullname)
 |      Concrete implementation of InspectLoader.is_package by checking if
 |      the path returned by get_filename has a filename of '__init__.py'.

[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver in selenium:

NAME
    selenium.webdriver

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    android (package)
    blackberry (package)
    chrome (package)
    common (package)
    edge (package)
    firefox (package)
    ie (package)
    opera (package)
    phantomjs (package)
    remote (package)
    safari (package)
    support (package)
    webkitgtk (package)

VERSION
    3.14.1

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver in selenium:

NAME
    selenium.webdriver

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    android (package)
    blackberry (package)
    chrome (package)
    common (package)
    edge (package)
    firefox (package)
    ie (package)
    opera (package)
    phantomjs (package)
    remote (package)
    safari (package)
    support (package)
    webkitgtk (package)

VERSION
    3.14.1

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on list object:

class list(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  append(...)
 |      L.append(object) -> None -- append object to end
 |  
 |  clear(...)
 |      L.clear() -> None -- remove all items from L
 |  
 |  copy(...)
 |      L.copy() -> list -- a shallow copy of L
 |  
 |  count(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |  
 |  extend(...)
 |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
 |  
 |  index(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |  
 |  insert(...)
 |      L.insert(index, object) -- insert object before index
 |  
 |  pop(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(...)
 |      L.remove(value) -> None -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(...)
 |      L.reverse() -- reverse *IN PLACE*
 |  
 |  sort(...)
 |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

[OK] Hlep is printed !
====================================================================================================
Help on ModuleSpec in module importlib._bootstrap object:

class ModuleSpec(builtins.object)
 |  The specification for a module, used for loading.
 |  
 |  A module's spec is the source for information about the module.  For
 |  data associated with the module, including source, use the spec's
 |  loader.
 |  
 |  `name` is the absolute name of the module.  `loader` is the loader
 |  to use when loading the module.  `parent` is the name of the
 |  package the module is in.  The parent is derived from the name.
 |  
 |  `is_package` determines if the module is considered a package or
 |  not.  On modules this is reflected by the `__path__` attribute.
 |  
 |  `origin` is the specific location used by the loader from which to
 |  load the module, if that information is available.  When filename is
 |  set, origin will match.
 |  
 |  `has_location` indicates that a spec's "origin" reflects a location.
 |  When this is True, `__file__` attribute of the module is set.
 |  
 |  `cached` is the location of the cached bytecode file, if any.  It
 |  corresponds to the `__cached__` attribute.
 |  
 |  `submodule_search_locations` is the sequence of path entries to
 |  search when importing submodules.  If set, is_package should be
 |  True--and False otherwise.
 |  
 |  Packages are simply modules that (may) have submodules.  If a spec
 |  has a non-None value in `submodule_search_locations`, the import
 |  system will consider modules loaded from the spec as packages.
 |  
 |  Only finders (see importlib.abc.MetaPathFinder and
 |  importlib.abc.PathEntryFinder) should modify ModuleSpec instances.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __init__(self, name, loader, *, origin=None, loader_state=None, is_package=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  cached
 |  
 |  has_location
 |  
 |  parent
 |      The name of the module's parent.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

[OK] Hlep is printed !
====================================================================================================
No Python documentation found for '3.14.1'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.android in selenium.webdriver:

NAME
    selenium.webdriver.android

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/android/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.blackberry in selenium.webdriver:

NAME
    selenium.webdriver.blackberry

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/blackberry/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.chrome in selenium.webdriver:

NAME
    selenium.webdriver.chrome

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    options
    remote_connection
    service
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/chrome/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.common in selenium.webdriver:

NAME
    selenium.webdriver.common

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    action_chains
    actions (package)
    alert
    by
    desired_capabilities
    html5 (package)
    keys
    proxy
    service
    touch_actions
    utils

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/common/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.edge in selenium.webdriver:

NAME
    selenium.webdriver.edge

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    options
    service
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/edge/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.firefox in selenium.webdriver:

NAME
    selenium.webdriver.firefox

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    extension_connection
    firefox_binary
    firefox_profile
    options
    remote_connection
    service
    webdriver
    webelement

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/firefox/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.ie in selenium.webdriver:

NAME
    selenium.webdriver.ie

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    options
    service
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/ie/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.opera in selenium.webdriver:

NAME
    selenium.webdriver.opera

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    options
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/opera/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.phantomjs in selenium.webdriver:

NAME
    selenium.webdriver.phantomjs

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    service
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/phantomjs/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.remote in selenium.webdriver:

NAME
    selenium.webdriver.remote

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    command
    errorhandler
    file_detector
    mobile
    remote_connection
    switch_to
    utils
    webdriver
    webelement

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/remote/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.safari in selenium.webdriver:

NAME
    selenium.webdriver.safari

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    permissions
    remote_connection
    service
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/safari/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.support in selenium.webdriver:

NAME
    selenium.webdriver.support

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    abstract_event_listener
    color
    event_firing_webdriver
    events
    expected_conditions
    select
    ui
    wait

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/support/__init__.py


[OK] Hlep is printed !
====================================================================================================
Help on package selenium.webdriver.webkitgtk in selenium.webdriver:

NAME
    selenium.webdriver.webkitgtk

DESCRIPTION
    # Licensed to the Software Freedom Conservancy (SFC) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The SFC licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.

PACKAGE CONTENTS
    options
    service
    webdriver

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/selenium/webdriver/webkitgtk/__init__.py


[OK] Hlep is printed !
====================================================================================================
['ActionChains', 'Android', 'BlackBerry', 'Chrome', 'ChromeOptions', 'DesiredCapabilities', 'Edge', 'Firefox', 'FirefoxOptions', 'FirefoxProfile', 'Ie', 'IeOptions', 'Opera', 'PhantomJS', 'Proxy', 'Remote', 'Safari', 'TouchActions', 'WebKitGTK', 'WebKitGTKOptions', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', 'android', 'blackberry', 'chrome', 'common', 'edge', 'firefox', 'ie', 'opera', 'phantomjs', 'remote', 'safari', 'support', 'webkitgtk']
====================================================================================================
