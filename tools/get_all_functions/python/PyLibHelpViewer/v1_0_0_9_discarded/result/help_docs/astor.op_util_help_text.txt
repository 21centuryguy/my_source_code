Help on module astor.op_util in astor:

NAME
    astor.op_util - Part of the astor library for Python AST manipulation.

DESCRIPTION
    License: 3-clause BSD
    
    Copyright (c) 2015 Patrick Maupin
    
    This module provides data and functions for mapping
    AST nodes to symbols and precedences.

CLASSES
    builtins.object
        Precedence
    
    class Precedence(builtins.object)
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Add = 45
     |  
     |  And = 31
     |  
     |  AnnAssign = 5
     |  
     |  Assert = 21
     |  
     |  Assign = 3
     |  
     |  AsyncFor = 9
     |  
     |  AugAssign = 5
     |  
     |  Await = 55
     |  
     |  BitAnd = 41
     |  
     |  BitOr = 37
     |  
     |  BitXor = 39
     |  
     |  Comma = 21
     |  
     |  Div = 47
     |  
     |  Eq = 35
     |  
     |  Expr = 5
     |  
     |  ExtSlice = 17
     |  
     |  FloorDiv = 47
     |  
     |  For = 9
     |  
     |  GeneratorExp = 1
     |  
     |  Gt = 35
     |  
     |  GtE = 35
     |  
     |  If = 9
     |  
     |  IfExp = 25
     |  
     |  In = 35
     |  
     |  Index = 15
     |  
     |  Invert = 51
     |  
     |  Is = 35
     |  
     |  IsNot = 35
     |  
     |  LShift = 43
     |  
     |  Lambda = 25
     |  
     |  Lt = 35
     |  
     |  LtE = 35
     |  
     |  MatMult = 47
     |  
     |  Mod = 47
     |  
     |  Mult = 47
     |  
     |  Not = 33
     |  
     |  NotEq = 35
     |  
     |  NotIn = 35
     |  
     |  Num = 57
     |  
     |  Or = 29
     |  
     |  Pow = 53
     |  
     |  PowRHS = 49
     |  
     |  RShift = 43
     |  
     |  Raise = 21
     |  
     |  Return = 11
     |  
     |  Slice = 13
     |  
     |  Sub = 45
     |  
     |  Subscript = 13
     |  
     |  Tuple = 19
     |  
     |  UAdd = 51
     |  
     |  USub = 51
     |  
     |  While = 9
     |  
     |  Yield = 7
     |  
     |  YieldFrom = 7
     |  
     |  call_one_arg = 23
     |  
     |  comprehension = 27
     |  
     |  comprehension_target = 19
     |  
     |  highest = 59

FUNCTIONS
    get_op_precedence(obj, precedence_data={<class '_ast.GeneratorExp'>: 1, <class '_ast.Assign'>: 3, <class '_ast.AnnAssign'>: 5, <class '_ast.AugAssign'>: 5, <class '_ast.Expr'>: 5, <class '_ast.Yield'>: 7, <class '_ast.YieldFrom'>: 7, <class '_ast.If'>: 9, <class '_ast.For'>: 9, <class '_ast.AsyncFor'>: 9, <class '_ast.While'>: 9, <class '_ast.Return'>: 11, <class '_ast.Slice'>: 13, <class '_ast.Subscript'>: 13, <class '_ast.Index'>: 15, <class '_ast.ExtSlice'>: 17, None: 49, <class '_ast.Tuple'>: 19, <class '_ast.Assert'>: 21, <class '_ast.Raise'>: 21, <class '_ast.Lambda'>: 25, <class '_ast.IfExp'>: 25, <class '_ast.comprehension'>: 27, <class '_ast.Or'>: 29, <class '_ast.And'>: 31, <class '_ast.Not'>: 33, <class '_ast.Eq'>: 35, <class '_ast.Gt'>: 35, <class '_ast.GtE'>: 35, <class '_ast.In'>: 35, <class '_ast.Is'>: 35, <class '_ast.NotEq'>: 35, <class '_ast.Lt'>: 35, <class '_ast.LtE'>: 35, <class '_ast.NotIn'>: 35, <class '_ast.IsNot'>: 35, <class '_ast.BitOr'>: 37, <class '_ast.BitXor'>: 39, <class '_ast.BitAnd'>: 41, <class '_ast.LShift'>: 43, <class '_ast.RShift'>: 43, <class '_ast.Add'>: 45, <class '_ast.Sub'>: 45, <class '_ast.Mult'>: 47, <class '_ast.Div'>: 47, <class '_ast.Mod'>: 47, <class '_ast.FloorDiv'>: 47, <class '_ast.MatMult'>: 47, <class '_ast.Invert'>: 51, <class '_ast.UAdd'>: 51, <class '_ast.USub'>: 51, <class '_ast.Pow'>: 53, <class '_ast.Await'>: 55, <class '_ast.Num'>: 57}, type=<class 'type'>)
        Given an AST node object, returns the precedence.
    
    get_op_symbol(obj, fmt='%s', symbol_data={<class '_ast.GeneratorExp'>: '', <class '_ast.Assign'>: '', <class '_ast.AnnAssign'>: '', <class '_ast.AugAssign'>: '', <class '_ast.Expr'>: '', <class '_ast.Yield'>: '', <class '_ast.YieldFrom'>: '', <class '_ast.If'>: '', <class '_ast.For'>: '', <class '_ast.AsyncFor'>: '', <class '_ast.While'>: '', <class '_ast.Return'>: '', <class '_ast.Slice'>: '', <class '_ast.Subscript'>: '', <class '_ast.Index'>: '', <class '_ast.ExtSlice'>: '', None: '', <class '_ast.Tuple'>: '', <class '_ast.Assert'>: '', <class '_ast.Raise'>: '', <class '_ast.Lambda'>: '', <class '_ast.IfExp'>: '', <class '_ast.comprehension'>: '', <class '_ast.Or'>: 'or', <class '_ast.And'>: 'and', <class '_ast.Not'>: 'not', <class '_ast.Eq'>: '==', <class '_ast.Gt'>: '>', <class '_ast.GtE'>: '>=', <class '_ast.In'>: 'in', <class '_ast.Is'>: 'is', <class '_ast.NotEq'>: '!=', <class '_ast.Lt'>: '<', <class '_ast.LtE'>: '<=', <class '_ast.NotIn'>: 'not in', <class '_ast.IsNot'>: 'is not', <class '_ast.BitOr'>: '|', <class '_ast.BitXor'>: '^', <class '_ast.BitAnd'>: '&', <class '_ast.LShift'>: '<<', <class '_ast.RShift'>: '>>', <class '_ast.Add'>: '+', <class '_ast.Sub'>: '-', <class '_ast.Mult'>: '*', <class '_ast.Div'>: '/', <class '_ast.Mod'>: '%', <class '_ast.FloorDiv'>: '//', <class '_ast.MatMult'>: '@', <class '_ast.Invert'>: '~', <class '_ast.UAdd'>: '+', <class '_ast.USub'>: '-', <class '_ast.Pow'>: '**', <class '_ast.Await'>: '', <class '_ast.Num'>: ''}, type=<class 'type'>)
        Given an AST node object, returns a string containing the symbol.

DATA
    index = 56
    op_data = [['GeneratorExp', '', 1], ['Assign', '', 3], ['AnnAssign', '...
    precedence_data = {<class '_ast.GeneratorExp'>: 1, <class '_ast.Assign...
    symbol_data = {<class '_ast.GeneratorExp'>: '', <class '_ast.Assign'>:...

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/astor/op_util.py


