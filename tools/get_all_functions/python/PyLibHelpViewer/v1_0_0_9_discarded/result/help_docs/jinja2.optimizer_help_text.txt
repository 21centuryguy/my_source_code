Help on module jinja2.optimizer in jinja2:

NAME
    jinja2.optimizer

DESCRIPTION
    jinja2.optimizer
    ~~~~~~~~~~~~~~~~
    
    The jinja optimizer is currently trying to constant fold a few expressions
    and modify the AST in place so that it should be easier to evaluate it.
    
    Because the AST does not contain all the scoping information and the
    compiler has to find that out, we cannot do all the optimizations we
    want.  For example loop unrolling doesn't work because unrolled loops would
    have a different scoping.
    
    The solution would be a second syntax tree that has the scoping rules stored.
    
    :copyright: (c) 2017 by the Jinja Team.
    :license: BSD.

CLASSES
    jinja2.visitor.NodeTransformer(jinja2.visitor.NodeVisitor)
        Optimizer
    
    class Optimizer(jinja2.visitor.NodeTransformer)
     |  Walks the abstract syntax tree and allows modifications of nodes.
     |  
     |  The `NodeTransformer` will walk the AST and use the return value of the
     |  visitor functions to replace or remove the old node.  If the return
     |  value of the visitor function is `None` the node will be removed
     |  from the previous location otherwise it's replaced with the return
     |  value.  The return value may be the original node in which case no
     |  replacement takes place.
     |  
     |  Method resolution order:
     |      Optimizer
     |      jinja2.visitor.NodeTransformer
     |      jinja2.visitor.NodeVisitor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, environment)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  visit_Add = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_And = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Call = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Compare = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_CondExpr = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Div = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Filter = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_FloorDiv = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Getattr = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Getitem = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Mod = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Mul = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Neg = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Not = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Or = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Pos = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Pow = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Sub = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  visit_Test = fold(self, node, eval_ctx=None)
     |      Do constant folding.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from jinja2.visitor.NodeTransformer:
     |  
     |  generic_visit(self, node, *args, **kwargs)
     |      Called if no explicit visitor function exists for a node.
     |  
     |  visit_list(self, node, *args, **kwargs)
     |      As transformers may return lists in some places this method
     |      can be used to enforce a list as return value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from jinja2.visitor.NodeVisitor:
     |  
     |  get_visitor(self, node)
     |      Return the visitor function for this node or `None` if no visitor
     |      exists for this node.  In that case the generic visit function is
     |      used instead.
     |  
     |  visit(self, node, *args, **kwargs)
     |      Visit a node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from jinja2.visitor.NodeVisitor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    optimize(node, environment)
        The context hint can be used to perform an static optimization
        based on the context given.

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/jinja2/optimizer.py


