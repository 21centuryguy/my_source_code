Help on module ipywidgets.widgets.widget_controller in ipywidgets.widgets:

NAME
    ipywidgets.widgets.widget_controller - Controller class.

DESCRIPTION
    Represents a Gamepad or Joystick controller.

CLASSES
    ipywidgets.widgets.domwidget.DOMWidget(ipywidgets.widgets.widget.Widget)
        Axis(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
        Button(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
        Controller(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.widget_core.CoreWidget)
    ipywidgets.widgets.valuewidget.ValueWidget(ipywidgets.widgets.widget.Widget)
        Axis(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
        Button(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
    ipywidgets.widgets.widget_core.CoreWidget(ipywidgets.widgets.widget.Widget)
        Axis(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
        Button(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
        Controller(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.widget_core.CoreWidget)
    
    class Axis(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
     |  Represents a gamepad or joystick axis.
     |  
     |  Method resolution order:
     |      Axis
     |      ipywidgets.widgets.domwidget.DOMWidget
     |      ipywidgets.widgets.valuewidget.ValueWidget
     |      ipywidgets.widgets.widget_core.CoreWidget
     |      ipywidgets.widgets.widget.Widget
     |      ipywidgets.widgets.widget.LoggingHasTraits
     |      traitlets.traitlets.HasTraits
     |      traitlets.traitlets.HasDescriptors
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  value
     |      A float trait.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.domwidget.DOMWidget:
     |  
     |  add_class(self, className)
     |      Adds a class to the top level element of the widget.
     |      
     |      Doesn't add the class if it already exists.
     |  
     |  remove_class(self, className)
     |      Removes a class from the top level element of the widget.
     |      
     |      Doesn't remove the class if it doesn't exist.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.domwidget.DOMWidget:
     |  
     |  layout
     |      An instance trait which coerces a dict to an instance.
     |      
     |      This lets the instance be specified as a dict, which is used
     |      to initialize the instance.
     |      
     |      Also, we default to a trivial instance, even if args and kwargs
     |      is not specified.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.valuewidget.ValueWidget:
     |  
     |  get_interact_value(self)
     |      Return the value for this widget which should be passed to
     |      interactive functions. Custom widgets can change this method
     |      to process the raw value ``self.value``.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  __del__(self)
     |      Object disposal
     |  
     |  __init__(self, **kwargs)
     |      Public constructor
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_traits(self, **traits)
     |      Dynamically add trait attributes to the Widget.
     |  
     |  close(self)
     |      Close method.
     |      
     |      Closes the underlying comm.
     |      When the comm is closed, all of the widget views are automatically
     |      removed from the front-end.
     |  
     |  get_state(self, key=None, drop_defaults=False)
     |      Gets the widget state, or a piece of it.
     |      
     |      Parameters
     |      ----------
     |      key : unicode or iterable (optional)
     |          A single property's name or iterable of property names to get.
     |      
     |      Returns
     |      -------
     |      state : dict of states
     |      metadata : dict
     |          metadata for each field: {key: metadata}
     |  
     |  get_view_spec(self)
     |  
     |  hold_sync(self)
     |      Hold syncing any state until the outermost context manager exits
     |  
     |  notify_change(self, change)
     |      Called when a property has changed.
     |  
     |  on_displayed(self, callback, remove=False)
     |      (Un)Register a widget displayed callback.
     |      
     |      Parameters
     |      ----------
     |      callback: method handler
     |          Must have a signature of::
     |      
     |              callback(widget, **kwargs)
     |      
     |          kwargs from display are passed through without modification.
     |      remove: bool
     |          True if the callback should be unregistered.
     |  
     |  on_msg(self, callback, remove=False)
     |      (Un)Register a custom msg receive callback.
     |      
     |      Parameters
     |      ----------
     |      callback: callable
     |          callback will be passed three arguments when a message arrives::
     |      
     |              callback(widget, content, buffers)
     |      
     |      remove: bool
     |          True if the callback should be unregistered.
     |  
     |  open(self)
     |      Open a comm to the frontend if one isn't already open.
     |  
     |  send(self, content, buffers=None)
     |      Sends a custom msg to the widget model in the front-end.
     |      
     |      Parameters
     |      ----------
     |      content : dict
     |          Content of the message to send.
     |      buffers : list of binary buffers
     |          Binary buffers to send with message
     |  
     |  send_state(self, key=None)
     |      Sends the widget state, or a piece of it, to the front-end, if it exists.
     |      
     |      Parameters
     |      ----------
     |      key : unicode, or iterable (optional)
     |          A single property's name or iterable of property names to sync with the front-end.
     |  
     |  set_state(self, sync_data)
     |      Called when a state is received from the front-end.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  close_all() from traitlets.traitlets.MetaHasTraits
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  get_manager_state(drop_defaults=False, widgets=None)
     |      Returns the full state for a widget manager for embedding
     |      
     |      :param drop_defaults: when True, it will not include default value
     |      :param widgets: list with widgets to include in the state (or all widgets when None)
     |      :return:
     |  
     |  handle_comm_opened(comm, msg)
     |      Static method, called when a widget is constructed.
     |  
     |  on_widget_constructed(callback)
     |      Registers a callback to be called when a widget is constructed.
     |      
     |      The callback must have the following signature:
     |      callback(widget)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  comm
     |      A trait whose value must be an instance of a specified class.
     |      
     |      The value can also be an instance of a subclass of the specified class.
     |      
     |      Subclasses can declare default classes by overriding the klass attribute
     |  
     |  keys
     |      An instance of a Python list.
     |  
     |  model_id
     |      Gets the model id of this widget.
     |      
     |      If a Comm doesn't exist yet, a Comm will be created automagically.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  widget_types = <ipywidgets.widgets.widget.WidgetRegistry object>
     |  
     |  widgets = {}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.widget.LoggingHasTraits:
     |  
     |  log
     |      A trait whose value must be an instance of a specified class.
     |      
     |      The value can also be an instance of a subclass of the specified class.
     |      
     |      Subclasses can declare default classes by overriding the klass attribute
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from traitlets.traitlets.HasTraits:
     |  
     |  __getstate__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  has_trait(self, name)
     |      Returns True if the object has a trait with the specified name.
     |  
     |  hold_trait_notifications(self)
     |      Context manager for bundling trait change notifications and cross
     |      validation.
     |      
     |      Use this when doing multiple trait assignments (init, config), to avoid
     |      race conditions in trait notifiers requesting other trait values.
     |      All trait notifications will fire after all values have been assigned.
     |  
     |  observe(self, handler, names=traitlets.All, type='change')
     |      Setup a handler to be called when a trait changes.
     |      
     |      This is used to setup dynamic notifications of trait changes.
     |      
     |      Parameters
     |      ----------
     |      handler : callable
     |          A callable that is called when a trait changes. Its
     |          signature should be ``handler(change)``, where ``change`` is a
     |          dictionary. The change dictionary at least holds a 'type' key.
     |          * ``type``: the type of notification.
     |          Other keys may be passed depending on the value of 'type'. In the
     |          case where type is 'change', we also have the following keys:
     |          * ``owner`` : the HasTraits instance
     |          * ``old`` : the old value of the modified trait attribute
     |          * ``new`` : the new value of the modified trait attribute
     |          * ``name`` : the name of the modified trait attribute.
     |      names : list, str, All
     |          If names is All, the handler will apply to all traits.  If a list
     |          of str, handler will apply to all names in the list.  If a
     |          str, the handler will apply just to that name.
     |      type : str, All (default: 'change')
     |          The type of notification to filter by. If equal to All, then all
     |          notifications are passed to the observe handler.
     |  
     |  on_trait_change(self, handler=None, name=None, remove=False)
     |      DEPRECATED: Setup a handler to be called when a trait changes.
     |      
     |      This is used to setup dynamic notifications of trait changes.
     |      
     |      Static handlers can be created by creating methods on a HasTraits
     |      subclass with the naming convention '_[traitname]_changed'.  Thus,
     |      to create static handler for the trait 'a', create the method
     |      _a_changed(self, name, old, new) (fewer arguments can be used, see
     |      below).
     |      
     |      If `remove` is True and `handler` is not specified, all change
     |      handlers for the specified name are uninstalled.
     |      
     |      Parameters
     |      ----------
     |      handler : callable, None
     |          A callable that is called when a trait changes.  Its
     |          signature can be handler(), handler(name), handler(name, new),
     |          handler(name, old, new), or handler(name, old, new, self).
     |      name : list, str, None
     |          If None, the handler will apply to all traits.  If a list
     |          of str, handler will apply to all names in the list.  If a
     |          str, the handler will apply just to that name.
     |      remove : bool
     |          If False (the default), then install the handler.  If True
     |          then unintall it.
     |  
     |  set_trait(self, name, value)
     |      Forcibly sets trait attribute, including read-only attributes.
     |  
     |  setup_instance(self, *args, **kwargs)
     |      This is called **before** self.__init__ is called.
     |  
     |  trait_metadata(self, traitname, key, default=None)
     |      Get metadata values for trait by key.
     |  
     |  trait_names(self, **metadata)
     |      Get a list of all the names of this class' traits.
     |  
     |  traits(self, **metadata)
     |      Get a ``dict`` of all the traits of this class.  The dictionary
     |      is keyed on the name and the values are the TraitType objects.
     |      
     |      The TraitTypes returned don't know anything about the values
     |      that the various HasTrait's instances are holding.
     |      
     |      The metadata kwargs allow functions to be passed in which
     |      filter traits based on metadata values.  The functions should
     |      take a single value as an argument and return a boolean.  If
     |      any function returns False, then the trait is not included in
     |      the output.  If a metadata key doesn't exist, None will be passed
     |      to the function.
     |  
     |  unobserve(self, handler, names=traitlets.All, type='change')
     |      Remove a trait change handler.
     |      
     |      This is used to unregister handlers to trait change notifications.
     |      
     |      Parameters
     |      ----------
     |      handler : callable
     |          The callable called when a trait attribute changes.
     |      names : list, str, All (default: All)
     |          The names of the traits for which the specified handler should be
     |          uninstalled. If names is All, the specified handler is uninstalled
     |          from the list of notifiers corresponding to all changes.
     |      type : str or All (default: 'change')
     |          The type of notification to filter by. If All, the specified handler
     |          is uninstalled from the list of notifiers corresponding to all types.
     |  
     |  unobserve_all(self, name=traitlets.All)
     |      Remove trait change handlers of any type for the specified name.
     |      If name is not specified, removes all trait notifiers.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from traitlets.traitlets.HasTraits:
     |  
     |  class_own_trait_events(name) from traitlets.traitlets.MetaHasTraits
     |      Get a dict of all event handlers defined on this class, not a parent.
     |      
     |      Works like ``event_handlers``, except for excluding traits from parents.
     |  
     |  class_own_traits(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a dict of all the traitlets defined on this class, not a parent.
     |      
     |      Works like `class_traits`, except for excluding traits from parents.
     |  
     |  class_trait_names(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a list of all the names of this class' traits.
     |      
     |      This method is just like the :meth:`trait_names` method,
     |      but is unbound.
     |  
     |  class_traits(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a ``dict`` of all the traits of this class.  The dictionary
     |      is keyed on the name and the values are the TraitType objects.
     |      
     |      This method is just like the :meth:`traits` method, but is unbound.
     |      
     |      The TraitTypes returned don't know anything about the values
     |      that the various HasTrait's instances are holding.
     |      
     |      The metadata kwargs allow functions to be passed in which
     |      filter traits based on metadata values.  The functions should
     |      take a single value as an argument and return a boolean.  If
     |      any function returns False, then the trait is not included in
     |      the output.  If a metadata key doesn't exist, None will be passed
     |      to the function.
     |  
     |  trait_events(name=None) from traitlets.traitlets.MetaHasTraits
     |      Get a ``dict`` of all the event handlers of this class.
     |      
     |      Parameters
     |      ----------
     |      name: str (default: None)
     |          The name of a trait of this class. If name is ``None`` then all
     |          the event handlers of this class will be returned instead.
     |      
     |      Returns
     |      -------
     |      The event handlers associated with a trait name, or all event handlers.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from traitlets.traitlets.HasTraits:
     |  
     |  cross_validation_lock
     |      A contextmanager for running a block with our cross validation lock set
     |      to True.
     |      
     |      At the end of the block, the lock's value is restored to its value
     |      prior to entering the block.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from traitlets.traitlets.HasDescriptors:
     |  
     |  __new__(cls, *args, **kwargs)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from traitlets.traitlets.HasDescriptors:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Button(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.valuewidget.ValueWidget, ipywidgets.widgets.widget_core.CoreWidget)
     |  Represents a gamepad or joystick button.
     |  
     |  Method resolution order:
     |      Button
     |      ipywidgets.widgets.domwidget.DOMWidget
     |      ipywidgets.widgets.valuewidget.ValueWidget
     |      ipywidgets.widgets.widget_core.CoreWidget
     |      ipywidgets.widgets.widget.Widget
     |      ipywidgets.widgets.widget.LoggingHasTraits
     |      traitlets.traitlets.HasTraits
     |      traitlets.traitlets.HasDescriptors
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  pressed
     |      A boolean (True, False) trait.
     |  
     |  value
     |      A float trait.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.domwidget.DOMWidget:
     |  
     |  add_class(self, className)
     |      Adds a class to the top level element of the widget.
     |      
     |      Doesn't add the class if it already exists.
     |  
     |  remove_class(self, className)
     |      Removes a class from the top level element of the widget.
     |      
     |      Doesn't remove the class if it doesn't exist.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.domwidget.DOMWidget:
     |  
     |  layout
     |      An instance trait which coerces a dict to an instance.
     |      
     |      This lets the instance be specified as a dict, which is used
     |      to initialize the instance.
     |      
     |      Also, we default to a trivial instance, even if args and kwargs
     |      is not specified.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.valuewidget.ValueWidget:
     |  
     |  get_interact_value(self)
     |      Return the value for this widget which should be passed to
     |      interactive functions. Custom widgets can change this method
     |      to process the raw value ``self.value``.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  __del__(self)
     |      Object disposal
     |  
     |  __init__(self, **kwargs)
     |      Public constructor
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_traits(self, **traits)
     |      Dynamically add trait attributes to the Widget.
     |  
     |  close(self)
     |      Close method.
     |      
     |      Closes the underlying comm.
     |      When the comm is closed, all of the widget views are automatically
     |      removed from the front-end.
     |  
     |  get_state(self, key=None, drop_defaults=False)
     |      Gets the widget state, or a piece of it.
     |      
     |      Parameters
     |      ----------
     |      key : unicode or iterable (optional)
     |          A single property's name or iterable of property names to get.
     |      
     |      Returns
     |      -------
     |      state : dict of states
     |      metadata : dict
     |          metadata for each field: {key: metadata}
     |  
     |  get_view_spec(self)
     |  
     |  hold_sync(self)
     |      Hold syncing any state until the outermost context manager exits
     |  
     |  notify_change(self, change)
     |      Called when a property has changed.
     |  
     |  on_displayed(self, callback, remove=False)
     |      (Un)Register a widget displayed callback.
     |      
     |      Parameters
     |      ----------
     |      callback: method handler
     |          Must have a signature of::
     |      
     |              callback(widget, **kwargs)
     |      
     |          kwargs from display are passed through without modification.
     |      remove: bool
     |          True if the callback should be unregistered.
     |  
     |  on_msg(self, callback, remove=False)
     |      (Un)Register a custom msg receive callback.
     |      
     |      Parameters
     |      ----------
     |      callback: callable
     |          callback will be passed three arguments when a message arrives::
     |      
     |              callback(widget, content, buffers)
     |      
     |      remove: bool
     |          True if the callback should be unregistered.
     |  
     |  open(self)
     |      Open a comm to the frontend if one isn't already open.
     |  
     |  send(self, content, buffers=None)
     |      Sends a custom msg to the widget model in the front-end.
     |      
     |      Parameters
     |      ----------
     |      content : dict
     |          Content of the message to send.
     |      buffers : list of binary buffers
     |          Binary buffers to send with message
     |  
     |  send_state(self, key=None)
     |      Sends the widget state, or a piece of it, to the front-end, if it exists.
     |      
     |      Parameters
     |      ----------
     |      key : unicode, or iterable (optional)
     |          A single property's name or iterable of property names to sync with the front-end.
     |  
     |  set_state(self, sync_data)
     |      Called when a state is received from the front-end.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  close_all() from traitlets.traitlets.MetaHasTraits
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  get_manager_state(drop_defaults=False, widgets=None)
     |      Returns the full state for a widget manager for embedding
     |      
     |      :param drop_defaults: when True, it will not include default value
     |      :param widgets: list with widgets to include in the state (or all widgets when None)
     |      :return:
     |  
     |  handle_comm_opened(comm, msg)
     |      Static method, called when a widget is constructed.
     |  
     |  on_widget_constructed(callback)
     |      Registers a callback to be called when a widget is constructed.
     |      
     |      The callback must have the following signature:
     |      callback(widget)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  comm
     |      A trait whose value must be an instance of a specified class.
     |      
     |      The value can also be an instance of a subclass of the specified class.
     |      
     |      Subclasses can declare default classes by overriding the klass attribute
     |  
     |  keys
     |      An instance of a Python list.
     |  
     |  model_id
     |      Gets the model id of this widget.
     |      
     |      If a Comm doesn't exist yet, a Comm will be created automagically.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  widget_types = <ipywidgets.widgets.widget.WidgetRegistry object>
     |  
     |  widgets = {}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.widget.LoggingHasTraits:
     |  
     |  log
     |      A trait whose value must be an instance of a specified class.
     |      
     |      The value can also be an instance of a subclass of the specified class.
     |      
     |      Subclasses can declare default classes by overriding the klass attribute
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from traitlets.traitlets.HasTraits:
     |  
     |  __getstate__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  has_trait(self, name)
     |      Returns True if the object has a trait with the specified name.
     |  
     |  hold_trait_notifications(self)
     |      Context manager for bundling trait change notifications and cross
     |      validation.
     |      
     |      Use this when doing multiple trait assignments (init, config), to avoid
     |      race conditions in trait notifiers requesting other trait values.
     |      All trait notifications will fire after all values have been assigned.
     |  
     |  observe(self, handler, names=traitlets.All, type='change')
     |      Setup a handler to be called when a trait changes.
     |      
     |      This is used to setup dynamic notifications of trait changes.
     |      
     |      Parameters
     |      ----------
     |      handler : callable
     |          A callable that is called when a trait changes. Its
     |          signature should be ``handler(change)``, where ``change`` is a
     |          dictionary. The change dictionary at least holds a 'type' key.
     |          * ``type``: the type of notification.
     |          Other keys may be passed depending on the value of 'type'. In the
     |          case where type is 'change', we also have the following keys:
     |          * ``owner`` : the HasTraits instance
     |          * ``old`` : the old value of the modified trait attribute
     |          * ``new`` : the new value of the modified trait attribute
     |          * ``name`` : the name of the modified trait attribute.
     |      names : list, str, All
     |          If names is All, the handler will apply to all traits.  If a list
     |          of str, handler will apply to all names in the list.  If a
     |          str, the handler will apply just to that name.
     |      type : str, All (default: 'change')
     |          The type of notification to filter by. If equal to All, then all
     |          notifications are passed to the observe handler.
     |  
     |  on_trait_change(self, handler=None, name=None, remove=False)
     |      DEPRECATED: Setup a handler to be called when a trait changes.
     |      
     |      This is used to setup dynamic notifications of trait changes.
     |      
     |      Static handlers can be created by creating methods on a HasTraits
     |      subclass with the naming convention '_[traitname]_changed'.  Thus,
     |      to create static handler for the trait 'a', create the method
     |      _a_changed(self, name, old, new) (fewer arguments can be used, see
     |      below).
     |      
     |      If `remove` is True and `handler` is not specified, all change
     |      handlers for the specified name are uninstalled.
     |      
     |      Parameters
     |      ----------
     |      handler : callable, None
     |          A callable that is called when a trait changes.  Its
     |          signature can be handler(), handler(name), handler(name, new),
     |          handler(name, old, new), or handler(name, old, new, self).
     |      name : list, str, None
     |          If None, the handler will apply to all traits.  If a list
     |          of str, handler will apply to all names in the list.  If a
     |          str, the handler will apply just to that name.
     |      remove : bool
     |          If False (the default), then install the handler.  If True
     |          then unintall it.
     |  
     |  set_trait(self, name, value)
     |      Forcibly sets trait attribute, including read-only attributes.
     |  
     |  setup_instance(self, *args, **kwargs)
     |      This is called **before** self.__init__ is called.
     |  
     |  trait_metadata(self, traitname, key, default=None)
     |      Get metadata values for trait by key.
     |  
     |  trait_names(self, **metadata)
     |      Get a list of all the names of this class' traits.
     |  
     |  traits(self, **metadata)
     |      Get a ``dict`` of all the traits of this class.  The dictionary
     |      is keyed on the name and the values are the TraitType objects.
     |      
     |      The TraitTypes returned don't know anything about the values
     |      that the various HasTrait's instances are holding.
     |      
     |      The metadata kwargs allow functions to be passed in which
     |      filter traits based on metadata values.  The functions should
     |      take a single value as an argument and return a boolean.  If
     |      any function returns False, then the trait is not included in
     |      the output.  If a metadata key doesn't exist, None will be passed
     |      to the function.
     |  
     |  unobserve(self, handler, names=traitlets.All, type='change')
     |      Remove a trait change handler.
     |      
     |      This is used to unregister handlers to trait change notifications.
     |      
     |      Parameters
     |      ----------
     |      handler : callable
     |          The callable called when a trait attribute changes.
     |      names : list, str, All (default: All)
     |          The names of the traits for which the specified handler should be
     |          uninstalled. If names is All, the specified handler is uninstalled
     |          from the list of notifiers corresponding to all changes.
     |      type : str or All (default: 'change')
     |          The type of notification to filter by. If All, the specified handler
     |          is uninstalled from the list of notifiers corresponding to all types.
     |  
     |  unobserve_all(self, name=traitlets.All)
     |      Remove trait change handlers of any type for the specified name.
     |      If name is not specified, removes all trait notifiers.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from traitlets.traitlets.HasTraits:
     |  
     |  class_own_trait_events(name) from traitlets.traitlets.MetaHasTraits
     |      Get a dict of all event handlers defined on this class, not a parent.
     |      
     |      Works like ``event_handlers``, except for excluding traits from parents.
     |  
     |  class_own_traits(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a dict of all the traitlets defined on this class, not a parent.
     |      
     |      Works like `class_traits`, except for excluding traits from parents.
     |  
     |  class_trait_names(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a list of all the names of this class' traits.
     |      
     |      This method is just like the :meth:`trait_names` method,
     |      but is unbound.
     |  
     |  class_traits(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a ``dict`` of all the traits of this class.  The dictionary
     |      is keyed on the name and the values are the TraitType objects.
     |      
     |      This method is just like the :meth:`traits` method, but is unbound.
     |      
     |      The TraitTypes returned don't know anything about the values
     |      that the various HasTrait's instances are holding.
     |      
     |      The metadata kwargs allow functions to be passed in which
     |      filter traits based on metadata values.  The functions should
     |      take a single value as an argument and return a boolean.  If
     |      any function returns False, then the trait is not included in
     |      the output.  If a metadata key doesn't exist, None will be passed
     |      to the function.
     |  
     |  trait_events(name=None) from traitlets.traitlets.MetaHasTraits
     |      Get a ``dict`` of all the event handlers of this class.
     |      
     |      Parameters
     |      ----------
     |      name: str (default: None)
     |          The name of a trait of this class. If name is ``None`` then all
     |          the event handlers of this class will be returned instead.
     |      
     |      Returns
     |      -------
     |      The event handlers associated with a trait name, or all event handlers.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from traitlets.traitlets.HasTraits:
     |  
     |  cross_validation_lock
     |      A contextmanager for running a block with our cross validation lock set
     |      to True.
     |      
     |      At the end of the block, the lock's value is restored to its value
     |      prior to entering the block.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from traitlets.traitlets.HasDescriptors:
     |  
     |  __new__(cls, *args, **kwargs)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from traitlets.traitlets.HasDescriptors:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Controller(ipywidgets.widgets.domwidget.DOMWidget, ipywidgets.widgets.widget_core.CoreWidget)
     |  Represents a game controller.
     |  
     |  Method resolution order:
     |      Controller
     |      ipywidgets.widgets.domwidget.DOMWidget
     |      ipywidgets.widgets.widget_core.CoreWidget
     |      ipywidgets.widgets.widget.Widget
     |      ipywidgets.widgets.widget.LoggingHasTraits
     |      traitlets.traitlets.HasTraits
     |      traitlets.traitlets.HasDescriptors
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  axes
     |      A trait for a tuple of any length with type-checked elements.
     |  
     |  buttons
     |      A trait for a tuple of any length with type-checked elements.
     |  
     |  connected
     |      A boolean (True, False) trait.
     |  
     |  index
     |      An int trait.
     |  
     |  mapping
     |      A trait for unicode strings.
     |  
     |  name
     |      A trait for unicode strings.
     |  
     |  timestamp
     |      A float trait.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.domwidget.DOMWidget:
     |  
     |  add_class(self, className)
     |      Adds a class to the top level element of the widget.
     |      
     |      Doesn't add the class if it already exists.
     |  
     |  remove_class(self, className)
     |      Removes a class from the top level element of the widget.
     |      
     |      Doesn't remove the class if it doesn't exist.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.domwidget.DOMWidget:
     |  
     |  layout
     |      An instance trait which coerces a dict to an instance.
     |      
     |      This lets the instance be specified as a dict, which is used
     |      to initialize the instance.
     |      
     |      Also, we default to a trivial instance, even if args and kwargs
     |      is not specified.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  __del__(self)
     |      Object disposal
     |  
     |  __init__(self, **kwargs)
     |      Public constructor
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_traits(self, **traits)
     |      Dynamically add trait attributes to the Widget.
     |  
     |  close(self)
     |      Close method.
     |      
     |      Closes the underlying comm.
     |      When the comm is closed, all of the widget views are automatically
     |      removed from the front-end.
     |  
     |  get_state(self, key=None, drop_defaults=False)
     |      Gets the widget state, or a piece of it.
     |      
     |      Parameters
     |      ----------
     |      key : unicode or iterable (optional)
     |          A single property's name or iterable of property names to get.
     |      
     |      Returns
     |      -------
     |      state : dict of states
     |      metadata : dict
     |          metadata for each field: {key: metadata}
     |  
     |  get_view_spec(self)
     |  
     |  hold_sync(self)
     |      Hold syncing any state until the outermost context manager exits
     |  
     |  notify_change(self, change)
     |      Called when a property has changed.
     |  
     |  on_displayed(self, callback, remove=False)
     |      (Un)Register a widget displayed callback.
     |      
     |      Parameters
     |      ----------
     |      callback: method handler
     |          Must have a signature of::
     |      
     |              callback(widget, **kwargs)
     |      
     |          kwargs from display are passed through without modification.
     |      remove: bool
     |          True if the callback should be unregistered.
     |  
     |  on_msg(self, callback, remove=False)
     |      (Un)Register a custom msg receive callback.
     |      
     |      Parameters
     |      ----------
     |      callback: callable
     |          callback will be passed three arguments when a message arrives::
     |      
     |              callback(widget, content, buffers)
     |      
     |      remove: bool
     |          True if the callback should be unregistered.
     |  
     |  open(self)
     |      Open a comm to the frontend if one isn't already open.
     |  
     |  send(self, content, buffers=None)
     |      Sends a custom msg to the widget model in the front-end.
     |      
     |      Parameters
     |      ----------
     |      content : dict
     |          Content of the message to send.
     |      buffers : list of binary buffers
     |          Binary buffers to send with message
     |  
     |  send_state(self, key=None)
     |      Sends the widget state, or a piece of it, to the front-end, if it exists.
     |      
     |      Parameters
     |      ----------
     |      key : unicode, or iterable (optional)
     |          A single property's name or iterable of property names to sync with the front-end.
     |  
     |  set_state(self, sync_data)
     |      Called when a state is received from the front-end.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  close_all() from traitlets.traitlets.MetaHasTraits
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  get_manager_state(drop_defaults=False, widgets=None)
     |      Returns the full state for a widget manager for embedding
     |      
     |      :param drop_defaults: when True, it will not include default value
     |      :param widgets: list with widgets to include in the state (or all widgets when None)
     |      :return:
     |  
     |  handle_comm_opened(comm, msg)
     |      Static method, called when a widget is constructed.
     |  
     |  on_widget_constructed(callback)
     |      Registers a callback to be called when a widget is constructed.
     |      
     |      The callback must have the following signature:
     |      callback(widget)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  comm
     |      A trait whose value must be an instance of a specified class.
     |      
     |      The value can also be an instance of a subclass of the specified class.
     |      
     |      Subclasses can declare default classes by overriding the klass attribute
     |  
     |  keys
     |      An instance of a Python list.
     |  
     |  model_id
     |      Gets the model id of this widget.
     |      
     |      If a Comm doesn't exist yet, a Comm will be created automagically.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ipywidgets.widgets.widget.Widget:
     |  
     |  widget_types = <ipywidgets.widgets.widget.WidgetRegistry object>
     |  
     |  widgets = {}
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ipywidgets.widgets.widget.LoggingHasTraits:
     |  
     |  log
     |      A trait whose value must be an instance of a specified class.
     |      
     |      The value can also be an instance of a subclass of the specified class.
     |      
     |      Subclasses can declare default classes by overriding the klass attribute
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from traitlets.traitlets.HasTraits:
     |  
     |  __getstate__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  has_trait(self, name)
     |      Returns True if the object has a trait with the specified name.
     |  
     |  hold_trait_notifications(self)
     |      Context manager for bundling trait change notifications and cross
     |      validation.
     |      
     |      Use this when doing multiple trait assignments (init, config), to avoid
     |      race conditions in trait notifiers requesting other trait values.
     |      All trait notifications will fire after all values have been assigned.
     |  
     |  observe(self, handler, names=traitlets.All, type='change')
     |      Setup a handler to be called when a trait changes.
     |      
     |      This is used to setup dynamic notifications of trait changes.
     |      
     |      Parameters
     |      ----------
     |      handler : callable
     |          A callable that is called when a trait changes. Its
     |          signature should be ``handler(change)``, where ``change`` is a
     |          dictionary. The change dictionary at least holds a 'type' key.
     |          * ``type``: the type of notification.
     |          Other keys may be passed depending on the value of 'type'. In the
     |          case where type is 'change', we also have the following keys:
     |          * ``owner`` : the HasTraits instance
     |          * ``old`` : the old value of the modified trait attribute
     |          * ``new`` : the new value of the modified trait attribute
     |          * ``name`` : the name of the modified trait attribute.
     |      names : list, str, All
     |          If names is All, the handler will apply to all traits.  If a list
     |          of str, handler will apply to all names in the list.  If a
     |          str, the handler will apply just to that name.
     |      type : str, All (default: 'change')
     |          The type of notification to filter by. If equal to All, then all
     |          notifications are passed to the observe handler.
     |  
     |  on_trait_change(self, handler=None, name=None, remove=False)
     |      DEPRECATED: Setup a handler to be called when a trait changes.
     |      
     |      This is used to setup dynamic notifications of trait changes.
     |      
     |      Static handlers can be created by creating methods on a HasTraits
     |      subclass with the naming convention '_[traitname]_changed'.  Thus,
     |      to create static handler for the trait 'a', create the method
     |      _a_changed(self, name, old, new) (fewer arguments can be used, see
     |      below).
     |      
     |      If `remove` is True and `handler` is not specified, all change
     |      handlers for the specified name are uninstalled.
     |      
     |      Parameters
     |      ----------
     |      handler : callable, None
     |          A callable that is called when a trait changes.  Its
     |          signature can be handler(), handler(name), handler(name, new),
     |          handler(name, old, new), or handler(name, old, new, self).
     |      name : list, str, None
     |          If None, the handler will apply to all traits.  If a list
     |          of str, handler will apply to all names in the list.  If a
     |          str, the handler will apply just to that name.
     |      remove : bool
     |          If False (the default), then install the handler.  If True
     |          then unintall it.
     |  
     |  set_trait(self, name, value)
     |      Forcibly sets trait attribute, including read-only attributes.
     |  
     |  setup_instance(self, *args, **kwargs)
     |      This is called **before** self.__init__ is called.
     |  
     |  trait_metadata(self, traitname, key, default=None)
     |      Get metadata values for trait by key.
     |  
     |  trait_names(self, **metadata)
     |      Get a list of all the names of this class' traits.
     |  
     |  traits(self, **metadata)
     |      Get a ``dict`` of all the traits of this class.  The dictionary
     |      is keyed on the name and the values are the TraitType objects.
     |      
     |      The TraitTypes returned don't know anything about the values
     |      that the various HasTrait's instances are holding.
     |      
     |      The metadata kwargs allow functions to be passed in which
     |      filter traits based on metadata values.  The functions should
     |      take a single value as an argument and return a boolean.  If
     |      any function returns False, then the trait is not included in
     |      the output.  If a metadata key doesn't exist, None will be passed
     |      to the function.
     |  
     |  unobserve(self, handler, names=traitlets.All, type='change')
     |      Remove a trait change handler.
     |      
     |      This is used to unregister handlers to trait change notifications.
     |      
     |      Parameters
     |      ----------
     |      handler : callable
     |          The callable called when a trait attribute changes.
     |      names : list, str, All (default: All)
     |          The names of the traits for which the specified handler should be
     |          uninstalled. If names is All, the specified handler is uninstalled
     |          from the list of notifiers corresponding to all changes.
     |      type : str or All (default: 'change')
     |          The type of notification to filter by. If All, the specified handler
     |          is uninstalled from the list of notifiers corresponding to all types.
     |  
     |  unobserve_all(self, name=traitlets.All)
     |      Remove trait change handlers of any type for the specified name.
     |      If name is not specified, removes all trait notifiers.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from traitlets.traitlets.HasTraits:
     |  
     |  class_own_trait_events(name) from traitlets.traitlets.MetaHasTraits
     |      Get a dict of all event handlers defined on this class, not a parent.
     |      
     |      Works like ``event_handlers``, except for excluding traits from parents.
     |  
     |  class_own_traits(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a dict of all the traitlets defined on this class, not a parent.
     |      
     |      Works like `class_traits`, except for excluding traits from parents.
     |  
     |  class_trait_names(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a list of all the names of this class' traits.
     |      
     |      This method is just like the :meth:`trait_names` method,
     |      but is unbound.
     |  
     |  class_traits(**metadata) from traitlets.traitlets.MetaHasTraits
     |      Get a ``dict`` of all the traits of this class.  The dictionary
     |      is keyed on the name and the values are the TraitType objects.
     |      
     |      This method is just like the :meth:`traits` method, but is unbound.
     |      
     |      The TraitTypes returned don't know anything about the values
     |      that the various HasTrait's instances are holding.
     |      
     |      The metadata kwargs allow functions to be passed in which
     |      filter traits based on metadata values.  The functions should
     |      take a single value as an argument and return a boolean.  If
     |      any function returns False, then the trait is not included in
     |      the output.  If a metadata key doesn't exist, None will be passed
     |      to the function.
     |  
     |  trait_events(name=None) from traitlets.traitlets.MetaHasTraits
     |      Get a ``dict`` of all the event handlers of this class.
     |      
     |      Parameters
     |      ----------
     |      name: str (default: None)
     |          The name of a trait of this class. If name is ``None`` then all
     |          the event handlers of this class will be returned instead.
     |      
     |      Returns
     |      -------
     |      The event handlers associated with a trait name, or all event handlers.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from traitlets.traitlets.HasTraits:
     |  
     |  cross_validation_lock
     |      A contextmanager for running a block with our cross validation lock set
     |      to True.
     |      
     |      At the end of the block, the lock's value is restored to its value
     |      prior to entering the block.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from traitlets.traitlets.HasDescriptors:
     |  
     |  __new__(cls, *args, **kwargs)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from traitlets.traitlets.HasDescriptors:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

DATA
    widget_serialization = {'from_json': <function _json_to_widget>, 'to_j...

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/ipywidgets/widgets/widget_controller.py


