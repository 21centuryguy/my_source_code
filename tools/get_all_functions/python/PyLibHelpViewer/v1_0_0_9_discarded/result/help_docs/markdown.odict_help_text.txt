Help on module markdown.odict in markdown:

NAME
    markdown.odict

CLASSES
    builtins.dict(builtins.object)
        OrderedDict
    
    class OrderedDict(builtins.dict)
     |  A dictionary that keeps its keys in the order in which they're inserted.
     |  
     |  Copied from Django's SortedDict with some modifications.
     |  
     |  Method resolution order:
     |      OrderedDict
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __copy__(self)
     |  
     |  __deepcopy__(self, memo)
     |  
     |  __delitem__(self, key)
     |      Delete self[key].
     |  
     |  __init__(self, data=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |      Implement iter(self).
     |  
     |  __repr__(self)
     |      Replaces the normal dict.__repr__ with a version that returns the keys
     |      in their Ordered order.
     |  
     |  __reversed__(self)
     |  
     |  __setitem__(self, key, value)
     |      Set self[key] to value.
     |  
     |  add(self, key, value, location)
     |      Insert by key location.
     |  
     |  clear(self)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(self)
     |      Returns a copy of this object.
     |  
     |  index(self, key)
     |      Return the index of a given key.
     |  
     |  index_for_location(self, location)
     |      Return index or None for a given location.
     |  
     |  insert(self, index, key, value)
     |      Inserts the key, value pair before the item with the given index.
     |  
     |  items = _iteritems(self)
     |  
     |  keys = _iterkeys(self)
     |  
     |  link(self, key, location)
     |      Change location of an existing item.
     |  
     |  pop(self, k, *args)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(self)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
     |      2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(self, key, default)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(self, dict_)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  value_for_index(self, index)
     |      Returns the value of the item at the given zero-based index.
     |  
     |  values = _itervalues(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, *args, **kwargs)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if D has a key k, else False.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Returns a new dict with keys from iterable and values equal to value.
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

DATA
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...

FILE
    /usr/local/lib/python3.6/site-packages/markdown/odict.py


