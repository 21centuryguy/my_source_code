Help on module markdown.blockprocessors in markdown:

NAME
    markdown.blockprocessors - Python Markdown

DESCRIPTION
    A Python implementation of John Gruber's Markdown.
    
    Documentation: https://python-markdown.github.io/
    GitHub: https://github.com/Python-Markdown/markdown/
    PyPI: https://pypi.org/project/Markdown/
    
    Started by Manfred Stienstra (http://www.dwerg.net/).
    Maintained for a few years by Yuri Takhteyev (http://www.freewisdom.org).
    Currently maintained by Waylan Limberg (https://github.com/waylan),
    Dmitry Shachnev (https://github.com/mitya57) and Isaac Muse (https://github.com/facelessuser).
    
    Copyright 2007-2018 The Python Markdown Project (v. 1.7 and later)
    Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b)
    Copyright 2004 Manfred Stienstra (the original version)
    
    License: BSD (see LICENSE.md for details).
    
    CORE MARKDOWN BLOCKPARSER
    ===========================================================================
    
    This parser handles basic parsing of Markdown blocks.  It doesn't concern
    itself with inline elements such as **bold** or *italics*, but rather just
    catches blocks, lists, quotes, etc.
    
    The BlockParser is made up of a bunch of BlockProcessors, each handling a
    different type of block. Extensions may add/replace/remove BlockProcessors
    as they need to alter how markdown blocks are parsed.

CLASSES
    builtins.object
        BlockProcessor
            BlockQuoteProcessor
            CodeBlockProcessor
            EmptyBlockProcessor
            HRProcessor
            HashHeaderProcessor
            ListIndentProcessor
            OListProcessor
                UListProcessor
            ParagraphProcessor
            SetextHeaderProcessor
    
    class BlockProcessor(builtins.object)
     |  Base class for block processors.
     |  
     |  Each subclass will provide the methods below to work with the source and
     |  tree. Each processor will need to define it's own ``test`` and ``run``
     |  methods. The ``test`` method should return True or False, to indicate
     |  whether the current block should be processed by this processor. If the
     |  test passes, the parser will call the processors ``run`` method.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BlockQuoteProcessor(BlockProcessor)
     |  Base class for block processors.
     |  
     |  Each subclass will provide the methods below to work with the source and
     |  tree. Each processor will need to define it's own ``test`` and ``run``
     |  methods. The ``test`` method should return True or False, to indicate
     |  whether the current block should be processed by this processor. If the
     |  test passes, the parser will call the processors ``run`` method.
     |  
     |  Method resolution order:
     |      BlockQuoteProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  clean(self, line)
     |      Remove ``>`` from beginning of a line.
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  RE = re.compile('(^|\\n)[ ]{0,3}>[ ]?(.*)')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class CodeBlockProcessor(BlockProcessor)
     |  Process code blocks.
     |  
     |  Method resolution order:
     |      CodeBlockProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class EmptyBlockProcessor(BlockProcessor)
     |  Process blocks that are empty or start with an empty line.
     |  
     |  Method resolution order:
     |      EmptyBlockProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class HRProcessor(BlockProcessor)
     |  Process Horizontal Rules.
     |  
     |  Method resolution order:
     |      HRProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  RE = r'^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\*+[ ]{0,2}){3,})[...
     |  
     |  SEARCH_RE = re.compile('^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class HashHeaderProcessor(BlockProcessor)
     |  Process Hash Headers.
     |  
     |  Method resolution order:
     |      HashHeaderProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  RE = re.compile('(^|\\n)(?P<level>#{1,6})(?P<header>.*?)#*(\\n|$)')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ListIndentProcessor(BlockProcessor)
     |  Process children of list items.
     |  
     |  Example:
     |      * a list item
     |          process this part
     |  
     |          or this part
     |  
     |  Method resolution order:
     |      ListIndentProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  create_item(self, parent, block)
     |      Create a new li and parse the block with it as the parent.
     |  
     |  get_level(self, parent, block)
     |      Get level of indent based on list level.
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ITEM_TYPES = ['li']
     |  
     |  LIST_TYPES = ['ul', 'ol']
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class OListProcessor(BlockProcessor)
     |  Process ordered list blocks.
     |  
     |  Method resolution order:
     |      OListProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_items(self, block)
     |      Break a block into list items.
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  LAZY_OL = True
     |  
     |  SIBLING_TAGS = ['ol', 'ul']
     |  
     |  STARTSWITH = '1'
     |  
     |  TAG = 'ol'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ParagraphProcessor(BlockProcessor)
     |  Process Paragraph blocks.
     |  
     |  Method resolution order:
     |      ParagraphProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SetextHeaderProcessor(BlockProcessor)
     |  Process Setext-style Headers.
     |  
     |  Method resolution order:
     |      SetextHeaderProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  RE = re.compile('^.*?\\n[=-]+[ ]*(\\n|$)', re.MULTILINE)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class UListProcessor(OListProcessor)
     |  Process unordered list blocks.
     |  
     |  Method resolution order:
     |      UListProcessor
     |      OListProcessor
     |      BlockProcessor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, parser)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  TAG = 'ul'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from OListProcessor:
     |  
     |  get_items(self, block)
     |      Break a block into list items.
     |  
     |  run(self, parent, blocks)
     |      Run processor. Must be overridden by subclasses.
     |      
     |      When the parser determines the appropriate type of a block, the parser
     |      will call the corresponding processor's ``run`` method. This method
     |      should parse the individual lines of the block and append them to
     |      the etree.
     |      
     |      Note that both the ``parent`` and ``etree`` keywords are pointers
     |      to instances of the objects which should be edited in place. Each
     |      processor must make changes to the existing objects as there is no
     |      mechanism to return new/different objects to replace them.
     |      
     |      This means that this method should be adding SubElements or adding text
     |      to the parent, and should remove (``pop``) or add (``insert``) items to
     |      the list of blocks.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which is the parent of the current block.
     |      * ``blocks``: A list of all remaining blocks of the document.
     |  
     |  test(self, parent, block)
     |      Test for block type. Must be overridden by subclasses.
     |      
     |      As the parser loops through processors, it will call the ``test``
     |      method on each to determine if the given block of text is of that
     |      type. This method must return a boolean ``True`` or ``False``. The
     |      actual method of testing is left to the needs of that particular
     |      block type. It could be as simple as ``block.startswith(some_string)``
     |      or a complex regular expression. As the block type may be different
     |      depending on the parent of the block (i.e. inside a list), the parent
     |      etree element is also provided and may be used as part of the test.
     |      
     |      Keywords:
     |      
     |      * ``parent``: A etree element which will be the parent of the block.
     |      * ``block``: A block of text from the source which has been split at
     |          blank lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from OListProcessor:
     |  
     |  LAZY_OL = True
     |  
     |  SIBLING_TAGS = ['ol', 'ul']
     |  
     |  STARTSWITH = '1'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BlockProcessor:
     |  
     |  detab(self, text)
     |      Remove a tab from the front of each line of the given text.
     |  
     |  lastChild(self, parent)
     |      Return the last child of an etree element.
     |  
     |  looseDetab(self, text, level=1)
     |      Remove a tab from front of lines but allowing dedented lines.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BlockProcessor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    build_block_parser(md, **kwargs)
        Build the default block parser used by Markdown.

DATA
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192...
    logger = <Logger MARKDOWN (WARNING)>
    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...

FILE
    /usr/local/lib/python3.6/site-packages/markdown/blockprocessors.py


