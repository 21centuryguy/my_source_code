Help on module markdown.blockparser in markdown:

NAME
    markdown.blockparser - Python Markdown

DESCRIPTION
    A Python implementation of John Gruber's Markdown.
    
    Documentation: https://python-markdown.github.io/
    GitHub: https://github.com/Python-Markdown/markdown/
    PyPI: https://pypi.org/project/Markdown/
    
    Started by Manfred Stienstra (http://www.dwerg.net/).
    Maintained for a few years by Yuri Takhteyev (http://www.freewisdom.org).
    Currently maintained by Waylan Limberg (https://github.com/waylan),
    Dmitry Shachnev (https://github.com/mitya57) and Isaac Muse (https://github.com/facelessuser).
    
    Copyright 2007-2018 The Python Markdown Project (v. 1.7 and later)
    Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b)
    Copyright 2004 Manfred Stienstra (the original version)
    
    License: BSD (see LICENSE.md for details).

CLASSES
    builtins.list(builtins.object)
        State
    builtins.object
        BlockParser
    
    class BlockParser(builtins.object)
     |  Parse Markdown blocks into an ElementTree object.
     |  
     |  A wrapper class that stitches the various BlockProcessors together,
     |  looping through them and creating an ElementTree object.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, md)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  parseBlocks(self, parent, blocks)
     |      Process blocks of markdown text and attach to given etree node.
     |      
     |      Given a list of ``blocks``, each blockprocessor is stepped through
     |      until there are no blocks left. While an extension could potentially
     |      call this method directly, it's generally expected to be used
     |      internally.
     |      
     |      This is a public method as an extension may need to add/alter
     |      additional BlockProcessors which call this method to recursively
     |      parse a nested block.
     |  
     |  parseChunk(self, parent, text)
     |      Parse a chunk of markdown text and attach to given etree node.
     |      
     |      While the ``text`` argument is generally assumed to contain multiple
     |      blocks which will be split on blank lines, it could contain only one
     |      block. Generally, this method would be called by extensions when
     |      block parsing is required.
     |      
     |      The ``parent`` etree Element passed in is altered in place.
     |      Nothing is returned.
     |  
     |  parseDocument(self, lines)
     |      Parse a markdown document into an ElementTree.
     |      
     |      Given a list of lines, an ElementTree object (not just a parent
     |      Element) is created and the root element is passed to the parser
     |      as the parent. The ElementTree object is returned.
     |      
     |      This should only be called on an entire document, not pieces.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  markdown
    
    class State(builtins.list)
     |  Track the current and nested state of the parser.
     |  
     |  This utility class is used to track the state of the BlockParser and
     |  support multiple levels if nesting. It's just a simple API wrapped around
     |  a list. Each time a state is set, that state is appended to the end of the
     |  list. Each time a state is reset, that state is removed from the end of
     |  the list.
     |  
     |  Therefore, each time a state is set for a nested block, that state must be
     |  reset when we back out of that level of nesting or the state could be
     |  corrupted.
     |  
     |  While all the methods of a list object are available, only the three
     |  defined below need be used.
     |  
     |  Method resolution order:
     |      State
     |      builtins.list
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  isstate(self, state)
     |      Test that top (current) level is of given state.
     |  
     |  reset(self)
     |      Step back one step in nested state.
     |  
     |  set(self, state)
     |      Set a new state.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.list:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iadd__(self, value, /)
     |      Implement self+=value.
     |  
     |  __imul__(self, value, /)
     |      Implement self*=value.
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.n
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(...)
     |      L.__reversed__() -- return a reverse iterator over the list
     |  
     |  __rmul__(self, value, /)
     |      Return self*value.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      L.__sizeof__() -- size of L in memory, in bytes
     |  
     |  append(...)
     |      L.append(object) -> None -- append object to end
     |  
     |  clear(...)
     |      L.clear() -> None -- remove all items from L
     |  
     |  copy(...)
     |      L.copy() -> list -- a shallow copy of L
     |  
     |  count(...)
     |      L.count(value) -> integer -- return number of occurrences of value
     |  
     |  extend(...)
     |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
     |  
     |  index(...)
     |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
     |      Raises ValueError if the value is not present.
     |  
     |  insert(...)
     |      L.insert(index, object) -- insert object before index
     |  
     |  pop(...)
     |      L.pop([index]) -> item -- remove and return item at index (default last).
     |      Raises IndexError if list is empty or index is out of range.
     |  
     |  remove(...)
     |      L.remove(value) -> None -- remove first occurrence of value.
     |      Raises ValueError if the value is not present.
     |  
     |  reverse(...)
     |      L.reverse() -- reverse *IN PLACE*
     |  
     |  sort(...)
     |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.list:
     |  
     |  __hash__ = None

DATA
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...

FILE
    /usr/local/lib/python3.6/site-packages/markdown/blockparser.py


