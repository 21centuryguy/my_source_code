Help on module astor.tree_walk in astor:

NAME
    astor.tree_walk - Part of the astor library for Python AST manipulation.

DESCRIPTION
    License: 3-clause BSD
    
    Copyright 2012 (c) Patrick Maupin
    Copyright 2013 (c) Berker Peksag
    
    This file contains a TreeWalk class that views a node tree
    as a unified whole and allows several modes of traversal.

CLASSES
    builtins.object
        MetaFlatten
        TreeWalk
    
    class MetaFlatten(builtins.object)
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TreeWalk(builtins.object)
     |  The TreeWalk class can be used as a superclass in order
     |  to walk an AST or similar tree.
     |  
     |  Unlike other treewalkers, this class can walk a tree either
     |  recursively or non-recursively.  Subclasses can define
     |  methods with the following signatures::
     |  
     |      def pre_xxx(self):
     |          pass
     |  
     |      def post_xxx(self):
     |          pass
     |  
     |      def init_xxx(self):
     |          pass
     |  
     |  Where 'xxx' is one of:
     |  
     |    - A class name
     |    - An attribute member name concatenated with '_name'
     |      For example, 'pre_targets_name' will process nodes
     |      that are referenced by the name 'targets' in their
     |      parent's node.
     |    - An attribute member name concatenated with '_item'
     |      For example, 'pre_targets_item'  will process nodes
     |      that are in a list that is the targets attribute
     |      of some node.
     |  
     |  pre_xxx will process a node before processing any of its subnodes.
     |  if the return value from pre_xxx evalates to true, then walk
     |  will not process any of the subnodes.  Those can be manually
     |  processed, if desired, by calling self.walk(node) on the subnodes
     |  before returning True.
     |  
     |  post_xxx will process a node after processing all its subnodes.
     |  
     |  init_xxx methods can decorate the class instance with subclass-specific
     |  information.  A single init_whatever method could be written, but to
     |  make it easy to keep initialization with use, any number of init_xxx
     |  methods can be written.  They will be called in alphabetical order.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, node=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  replace(self, new_node)
     |      Replace a node after first checking integrity of node stack.
     |  
     |  setup(self)
     |      All the node-specific handlers are setup at
     |      object initialization time.
     |  
     |  walk(self, node, name='', list=<class 'list'>, len=<built-in function len>, type=<class 'type'>)
     |      Walk the tree starting at a given node.
     |      
     |      Maintain a stack of nodes.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  parent
     |      Return the parent node of the current node.
     |  
     |  parent_name
     |      Return the parent node and name.

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/astor/tree_walk.py


