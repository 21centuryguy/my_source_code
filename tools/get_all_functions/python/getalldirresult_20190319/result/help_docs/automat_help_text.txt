Help on package automat:

NAME
    automat - # -*- test-case-name: automat -*-

PACKAGE CONTENTS
    _core
    _discover
    _introspection
    _methodical
    _test (package)
    _visualize

CLASSES
    builtins.Exception(builtins.BaseException)
        automat._core.NoTransition
    builtins.object
        automat._methodical.MethodicalMachine
    
    class MethodicalMachine(builtins.object)
     |  A :class:`MethodicalMachine` is an interface to an `Automaton`
     |  that uses methods on a class.
     |  
     |  Methods defined here:
     |  
     |  __get__(self, oself, type=None)
     |      L{MethodicalMachine} is an implementation detail for setting up
     |      class-level state; applications should never need to access it on an
     |      instance.
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  asDigraph(self)
     |      Generate a L{graphviz.Digraph} that represents this machine's
     |      states and transitions.
     |      
     |      @return: L{graphviz.Digraph} object; for more information, please
     |          see the documentation for
     |          U{graphviz<https://graphviz.readthedocs.io/>}
     |  
     |  input(self)
     |      Declare an input.
     |      
     |      This is a decorator for methods.
     |  
     |  output(self)
     |      Declare an output.
     |      
     |      This is a decorator for methods.
     |      
     |      This method will be called when the state machine transitions to this
     |      state as specified in the decorated `output` method.
     |  
     |  serializer(self)
     |  
     |  state(self, initial=False, terminal=False, serialized=None)
     |      Declare a state, possibly an initial state or a terminal state.
     |      
     |      This is a decorator for methods, but it will modify the method so as
     |      not to be callable any more.
     |      
     |      :param bool initial: is this state the initial state?
     |          Only one state on this :class:`automat.MethodicalMachine`
     |          may be an initial state; more than one is an error.
     |      
     |      :param bool terminal: Is this state a terminal state?
     |          i.e. a state that the machine can end up in?
     |          (This is purely informational at this point.)
     |      
     |      :param Hashable serialized: a serializable value
     |          to be used to represent this state to external systems.
     |          This value should be hashable;
     |          :py:func:`unicode` is a good type to use.
     |  
     |  unserializer(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class NoTransition(builtins.Exception)
     |  A finite state machine in C{state} has no transition for C{symbol}.
     |  
     |  @param state: the finite state machine's state at the time of the
     |      illegal transition.
     |  
     |  @param symbol: the input symbol for which no transition exists.
     |  
     |  Method resolution order:
     |      NoTransition
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, state, symbol)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

DATA
    __all__ = ['MethodicalMachine', 'NoTransition']

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/automat/__init__.py


