Help on module numpy.core.umath in numpy.core:

NAME
    numpy.core.umath

FUNCTIONS
    frompyfunc(...)
        frompyfunc(func, nin, nout)
        
        Takes an arbitrary Python function and returns a NumPy ufunc.
        
        Can be used, for example, to add broadcasting to a built-in Python
        function (see Examples section).
        
        Parameters
        ----------
        func : Python function object
            An arbitrary Python function.
        nin : int
            The number of input arguments.
        nout : int
            The number of objects returned by `func`.
        
        Returns
        -------
        out : ufunc
            Returns a NumPy universal function (``ufunc``) object.
        
        See Also
        --------
        vectorize : evaluates pyfunc over input arrays using broadcasting rules of numpy
        
        Notes
        -----
        The returned ufunc always returns PyObject arrays.
        
        Examples
        --------
        Use frompyfunc to add broadcasting to the Python function ``oct``:
        
        >>> oct_array = np.frompyfunc(oct, 1, 1)
        >>> oct_array(np.array((10, 30, 100)))
        array([012, 036, 0144], dtype=object)
        >>> np.array((oct(10), oct(30), oct(100))) # for comparison
        array(['012', '036', '0144'],
              dtype='|S4')
    
    geterrobj(...)
        geterrobj()
        
        Return the current object that defines floating-point error handling.
        
        The error object contains all information that defines the error handling
        behavior in NumPy. `geterrobj` is used internally by the other
        functions that get and set error handling behavior (`geterr`, `seterr`,
        `geterrcall`, `seterrcall`).
        
        Returns
        -------
        errobj : list
            The error object, a list containing three elements:
            [internal numpy buffer size, error mask, error callback function].
        
            The error mask is a single integer that holds the treatment information
            on all four floating point errors. The information for each error type
            is contained in three bits of the integer. If we print it in base 8, we
            can see what treatment is set for "invalid", "under", "over", and
            "divide" (in that order). The printed string can be interpreted with
        
            * 0 : 'ignore'
            * 1 : 'warn'
            * 2 : 'raise'
            * 3 : 'call'
            * 4 : 'print'
            * 5 : 'log'
        
        See Also
        --------
        seterrobj, seterr, geterr, seterrcall, geterrcall
        getbufsize, setbufsize
        
        Notes
        -----
        For complete documentation of the types of floating-point exceptions and
        treatment options, see `seterr`.
        
        Examples
        --------
        >>> np.geterrobj()  # first get the defaults
        [10000, 0, None]
        
        >>> def err_handler(type, flag):
        ...     print("Floating point error (%s), with flag %s" % (type, flag))
        ...
        >>> old_bufsize = np.setbufsize(20000)
        >>> old_err = np.seterr(divide='raise')
        >>> old_handler = np.seterrcall(err_handler)
        >>> np.geterrobj()
        [20000, 2, <function err_handler at 0x91dcaac>]
        
        >>> old_err = np.seterr(all='ignore')
        >>> np.base_repr(np.geterrobj()[1], 8)
        '0'
        >>> old_err = np.seterr(divide='warn', over='log', under='call',
                                invalid='print')
        >>> np.base_repr(np.geterrobj()[1], 8)
        '4351'
    
    seterrobj(...)
        seterrobj(errobj)
        
        Set the object that defines floating-point error handling.
        
        The error object contains all information that defines the error handling
        behavior in NumPy. `seterrobj` is used internally by the other
        functions that set error handling behavior (`seterr`, `seterrcall`).
        
        Parameters
        ----------
        errobj : list
            The error object, a list containing three elements:
            [internal numpy buffer size, error mask, error callback function].
        
            The error mask is a single integer that holds the treatment information
            on all four floating point errors. The information for each error type
            is contained in three bits of the integer. If we print it in base 8, we
            can see what treatment is set for "invalid", "under", "over", and
            "divide" (in that order). The printed string can be interpreted with
        
            * 0 : 'ignore'
            * 1 : 'warn'
            * 2 : 'raise'
            * 3 : 'call'
            * 4 : 'print'
            * 5 : 'log'
        
        See Also
        --------
        geterrobj, seterr, geterr, seterrcall, geterrcall
        getbufsize, setbufsize
        
        Notes
        -----
        For complete documentation of the types of floating-point exceptions and
        treatment options, see `seterr`.
        
        Examples
        --------
        >>> old_errobj = np.geterrobj()  # first get the defaults
        >>> old_errobj
        [10000, 0, None]
        
        >>> def err_handler(type, flag):
        ...     print("Floating point error (%s), with flag %s" % (type, flag))
        ...
        >>> new_errobj = [20000, 12, err_handler]
        >>> np.seterrobj(new_errobj)
        >>> np.base_repr(12, 8)  # int for divide=4 ('print') and over=1 ('warn')
        '14'
        >>> np.geterr()
        {'over': 'warn', 'divide': 'print', 'invalid': 'ignore', 'under': 'ignore'}
        >>> np.geterrcall() is err_handler
        True

DATA
    ERR_CALL = 3
    ERR_DEFAULT = 521
    ERR_IGNORE = 0
    ERR_LOG = 5
    ERR_PRINT = 4
    ERR_RAISE = 2
    ERR_WARN = 1
    FLOATING_POINT_SUPPORT = 1
    FPE_DIVIDEBYZERO = 1
    FPE_INVALID = 8
    FPE_OVERFLOW = 2
    FPE_UNDERFLOW = 4
    NAN = nan
    NINF = -inf
    NZERO = -0.0
    PINF = inf
    PZERO = 0.0
    SHIFT_DIVIDEBYZERO = 0
    SHIFT_INVALID = 9
    SHIFT_OVERFLOW = 3
    SHIFT_UNDERFLOW = 6
    UFUNC_BUFSIZE_DEFAULT = 8192
    UFUNC_PYVALS_NAME = 'UFUNC_PYVALS'
    absolute = <ufunc 'absolute'>
    add = <ufunc 'add'>
    arccos = <ufunc 'arccos'>
    arccosh = <ufunc 'arccosh'>
    arcsin = <ufunc 'arcsin'>
    arcsinh = <ufunc 'arcsinh'>
    arctan = <ufunc 'arctan'>
    arctan2 = <ufunc 'arctan2'>
    arctanh = <ufunc 'arctanh'>
    bitwise_and = <ufunc 'bitwise_and'>
    bitwise_or = <ufunc 'bitwise_or'>
    bitwise_xor = <ufunc 'bitwise_xor'>
    cbrt = <ufunc 'cbrt'>
    ceil = <ufunc 'ceil'>
    conj = <ufunc 'conjugate'>
    conjugate = <ufunc 'conjugate'>
    copysign = <ufunc 'copysign'>
    cos = <ufunc 'cos'>
    cosh = <ufunc 'cosh'>
    deg2rad = <ufunc 'deg2rad'>
    degrees = <ufunc 'degrees'>
    divide = <ufunc 'true_divide'>
    divmod = <ufunc 'divmod'>
    e = 2.718281828459045
    equal = <ufunc 'equal'>
    euler_gamma = 0.5772156649015329
    exp = <ufunc 'exp'>
    exp2 = <ufunc 'exp2'>
    expm1 = <ufunc 'expm1'>
    fabs = <ufunc 'fabs'>
    float_power = <ufunc 'float_power'>
    floor = <ufunc 'floor'>
    floor_divide = <ufunc 'floor_divide'>
    fmax = <ufunc 'fmax'>
    fmin = <ufunc 'fmin'>
    fmod = <ufunc 'fmod'>
    frexp = <ufunc 'frexp'>
    gcd = <ufunc 'gcd'>
    greater = <ufunc 'greater'>
    greater_equal = <ufunc 'greater_equal'>
    heaviside = <ufunc 'heaviside'>
    hypot = <ufunc 'hypot'>
    invert = <ufunc 'invert'>
    isfinite = <ufunc 'isfinite'>
    isinf = <ufunc 'isinf'>
    isnan = <ufunc 'isnan'>
    isnat = <ufunc 'isnat'>
    lcm = <ufunc 'lcm'>
    ldexp = <ufunc 'ldexp'>
    left_shift = <ufunc 'left_shift'>
    less = <ufunc 'less'>
    less_equal = <ufunc 'less_equal'>
    log = <ufunc 'log'>
    log10 = <ufunc 'log10'>
    log1p = <ufunc 'log1p'>
    log2 = <ufunc 'log2'>
    logaddexp = <ufunc 'logaddexp'>
    logaddexp2 = <ufunc 'logaddexp2'>
    logical_and = <ufunc 'logical_and'>
    logical_not = <ufunc 'logical_not'>
    logical_or = <ufunc 'logical_or'>
    logical_xor = <ufunc 'logical_xor'>
    maximum = <ufunc 'maximum'>
    minimum = <ufunc 'minimum'>
    mod = <ufunc 'remainder'>
    modf = <ufunc 'modf'>
    multiply = <ufunc 'multiply'>
    negative = <ufunc 'negative'>
    nextafter = <ufunc 'nextafter'>
    not_equal = <ufunc 'not_equal'>
    pi = 3.141592653589793
    positive = <ufunc 'positive'>
    power = <ufunc 'power'>
    rad2deg = <ufunc 'rad2deg'>
    radians = <ufunc 'radians'>
    reciprocal = <ufunc 'reciprocal'>
    remainder = <ufunc 'remainder'>
    right_shift = <ufunc 'right_shift'>
    rint = <ufunc 'rint'>
    sign = <ufunc 'sign'>
    signbit = <ufunc 'signbit'>
    sin = <ufunc 'sin'>
    sinh = <ufunc 'sinh'>
    spacing = <ufunc 'spacing'>
    sqrt = <ufunc 'sqrt'>
    square = <ufunc 'square'>
    subtract = <ufunc 'subtract'>
    tan = <ufunc 'tan'>
    tanh = <ufunc 'tanh'>
    true_divide = <ufunc 'true_divide'>
    trunc = <ufunc 'trunc'>

FILE
    /Users/jack/.local/lib/python3.6/site-packages/numpy/core/umath.cpython-36m-darwin.so


