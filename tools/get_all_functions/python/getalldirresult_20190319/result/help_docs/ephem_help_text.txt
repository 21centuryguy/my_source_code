Help on package ephem:

NAME
    ephem

DESCRIPTION
    # The core functionalty of PyEphem lives in the C-language _libastro
    # module, which packages the astronomy routines from XEphem as
    # convenient Python types.

PACKAGE CONTENTS
    _libastro
    cities
    stars
    tests (package)

CLASSES
    _libastro.Observer(builtins.object)
        Observer
    builtins.ValueError(builtins.Exception)
        CircumpolarError
            AlwaysUpError
            NeverUpError
    builtins.float(builtins.object)
        Angle
        Date
    builtins.object
        Body
            EarthSatellite
            FixedBody
            Planet
                EllipticalBody
                HyperbolicBody
                Jupiter
                Mars
                Mercury
                Moon
                Neptune
                ParabolicBody
                Pluto
                Saturn
                Sun
                Uranus
                Venus
        Coordinate
            Equatorial
            LonLatCoordinate
                Ecliptic
                Galactic
        PlanetMoon
            Ariel
            Callisto
            Deimos
            Dione
            Enceladus
            Europa
            Ganymede
            Hyperion
            Iapetus
            Io
            Mimas
            Miranda
            Oberon
            Phobos
            Rhea
            Tethys
            Titan
            Titania
            Umbriel
    
    class AlwaysUpError(CircumpolarError)
     |  Inappropriate argument value (of correct type).
     |  
     |  Method resolution order:
     |      AlwaysUpError
     |      CircumpolarError
     |      builtins.ValueError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from CircumpolarError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.ValueError:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class Angle(builtins.float)
     |  An angle in radians that can print itself in an astronomical format.
     |  Use ephem.degrees() and ephem.radians() to create one.
     |  
     |  Method resolution order:
     |      Angle
     |      builtins.float
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  norm
     |      Return this angle normalized to the interval [0, 2*pi).
     |  
     |  znorm
     |      Return this angle normalized to the interval (-pi, pi].
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.float:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(...)
     |      float.__format__(format_spec) -> string
     |      
     |      Formats the float according to format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getformat__(...) from builtins.type
     |      float.__getformat__(typestr) -> string
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  This function returns whichever of
     |      'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
     |      format of floating point numbers used by the C type named by typestr.
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __round__(...)
     |      Return the Integral closest to x, rounding half toward even.
     |      When an argument is passed, work like built-in round(x, ndigits).
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __setformat__(...) from builtins.type
     |      float.__setformat__(typestr, fmt) -> None
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
     |      'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
     |      one of the latter two if it appears to match the underlying C reality.
     |      
     |      Override the automatic determination of C-level floating point type.
     |      This affects how floats are converted to and from binary strings.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Return the Integral closest to x between 0 and x.
     |  
     |  as_integer_ratio(...)
     |      float.as_integer_ratio() -> (int, int)
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original
     |      float and with a positive denominator.
     |      Raise OverflowError on infinities and a ValueError on NaNs.
     |      
     |      >>> (10.0).as_integer_ratio()
     |      (10, 1)
     |      >>> (0.0).as_integer_ratio()
     |      (0, 1)
     |      >>> (-.25).as_integer_ratio()
     |      (-1, 4)
     |  
     |  conjugate(...)
     |      Return self, the complex conjugate of any float.
     |  
     |  fromhex(...) from builtins.type
     |      float.fromhex(string) -> float
     |      
     |      Create a floating-point number from a hexadecimal string.
     |      >>> float.fromhex('0x1.ffffp10')
     |      2047.984375
     |      >>> float.fromhex('-0x1p-1074')
     |      -5e-324
     |  
     |  hex(...)
     |      float.hex() -> string
     |      
     |      Return a hexadecimal representation of a floating-point number.
     |      >>> (-0.1).hex()
     |      '-0x1.999999999999ap-4'
     |      >>> 3.14159.hex()
     |      '0x1.921f9f01b866ep+1'
     |  
     |  is_integer(...)
     |      Return True if the float is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.float:
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  real
     |      the real part of a complex number
    
    class Ariel(PlanetMoon)
     |  Create a Body instance representing Ariel
     |  
     |  Method resolution order:
     |      Ariel
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 24
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Body(builtins.object)
     |  A celestial body, that can compute() its sky position
     |  
     |  Methods defined here:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Callisto(PlanetMoon)
     |  Create a Body instance representing Callisto
     |  
     |  Method resolution order:
     |      Callisto
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 15
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class CircumpolarError(builtins.ValueError)
     |  Inappropriate argument value (of correct type).
     |  
     |  Method resolution order:
     |      CircumpolarError
     |      builtins.ValueError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.ValueError:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class Coordinate(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Date(builtins.float)
     |  Floating point value used by ephem to represent a date.
     |  The value is the number of days since 1899 December 31 12:00 UT. When
     |  creating an instance you can pass in a Python datetime instance, timetuple,
     |  year-month-day triple, or a plain float. Run str() onthis object to see
     |  the UTC date it represents.
     |  
     |  Method resolution order:
     |      Date
     |      builtins.float
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  datetime(...)
     |      Return the date as a (year, month, day, hour, minute, second) tuple
     |  
     |  triple(...)
     |      Return the date as a (year, month, day_with_fraction) tuple
     |  
     |  tuple(...)
     |      Return the date as a (year, month, day, hour, minute, second) tuple
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.float:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(...)
     |      float.__format__(format_spec) -> string
     |      
     |      Formats the float according to format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getformat__(...) from builtins.type
     |      float.__getformat__(typestr) -> string
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  This function returns whichever of
     |      'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
     |      format of floating point numbers used by the C type named by typestr.
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __round__(...)
     |      Return the Integral closest to x, rounding half toward even.
     |      When an argument is passed, work like built-in round(x, ndigits).
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __setformat__(...) from builtins.type
     |      float.__setformat__(typestr, fmt) -> None
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
     |      'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
     |      one of the latter two if it appears to match the underlying C reality.
     |      
     |      Override the automatic determination of C-level floating point type.
     |      This affects how floats are converted to and from binary strings.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Return the Integral closest to x between 0 and x.
     |  
     |  as_integer_ratio(...)
     |      float.as_integer_ratio() -> (int, int)
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original
     |      float and with a positive denominator.
     |      Raise OverflowError on infinities and a ValueError on NaNs.
     |      
     |      >>> (10.0).as_integer_ratio()
     |      (10, 1)
     |      >>> (0.0).as_integer_ratio()
     |      (0, 1)
     |      >>> (-.25).as_integer_ratio()
     |      (-1, 4)
     |  
     |  conjugate(...)
     |      Return self, the complex conjugate of any float.
     |  
     |  fromhex(...) from builtins.type
     |      float.fromhex(string) -> float
     |      
     |      Create a floating-point number from a hexadecimal string.
     |      >>> float.fromhex('0x1.ffffp10')
     |      2047.984375
     |      >>> float.fromhex('-0x1p-1074')
     |      -5e-324
     |  
     |  hex(...)
     |      float.hex() -> string
     |      
     |      Return a hexadecimal representation of a floating-point number.
     |      >>> (-0.1).hex()
     |      '-0x1.999999999999ap-4'
     |      >>> 3.14159.hex()
     |      '0x1.921f9f01b866ep+1'
     |  
     |  is_integer(...)
     |      Return True if the float is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.float:
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  real
     |      the real part of a complex number
    
    class Deimos(PlanetMoon)
     |  Create a Body instance representing Deimos
     |  
     |  Method resolution order:
     |      Deimos
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 11
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Dione(PlanetMoon)
     |  Create a Body instance representing Dione
     |  
     |  Method resolution order:
     |      Dione
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 19
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class EarthSatellite(Body)
     |  A satellite in orbit around the Earth, usually built by passing the text of a TLE entry to the `ephem.readtle()` routine. You can read and write its orbital parameters through the following attributes:
     |  
     |  _ap -- argument of perigee at epoch (degrees)
     |  _decay -- orbit decay rate (revolutions per day-squared)
     |  _drag -- object drag coefficient (per earth radius)
     |  _e -- eccentricity
     |  _epoch -- reference epoch (mjd)
     |  _inc -- inclination (degrees)
     |  _M -- mean anomaly (degrees from perigee at epoch)
     |  _n -- mean motion (revolutions per day)
     |  _orbit -- integer orbit number of epoch
     |  _raan -- right ascension of ascending node (degrees)
     |  
     |  Method resolution order:
     |      EarthSatellite
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  catalog_number
     |      catalog number from TLE file
     |  
     |  eclipsed
     |      whether satellite is in earth's shadow
     |  
     |  elevation
     |      height above sea level in meters
     |  
     |  name
     |      object name
     |  
     |  range
     |      distance from observer to satellite in meters
     |  
     |  range_velocity
     |      range rate of change in meters per second
     |  
     |  sublat
     |      latitude beneath satellite as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  sublong
     |      longitude beneath satellite as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Ecliptic(LonLatCoordinate)
     |  An ecliptic latitude and longitude.
     |  
     |  Method resolution order:
     |      Ecliptic
     |      LonLatCoordinate
     |      Coordinate
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  from_radec(self, ra, dec)
     |  
     |  to_radec(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from LonLatCoordinate:
     |  
     |  get(self)
     |  
     |  set(self, lon, lat)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from LonLatCoordinate:
     |  
     |  long
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Coordinate:
     |  
     |  __init__(self, *args, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Coordinate:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class EllipticalBody(Planet)
     |  A celestial body, that can compute() its sky position
     |  
     |  Method resolution order:
     |      EllipticalBody
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  name
     |      object name
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Enceladus(PlanetMoon)
     |  Create a Body instance representing Enceladus
     |  
     |  Method resolution order:
     |      Enceladus
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 17
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Equatorial(Coordinate)
     |  An equatorial sky coordinate in right ascension and declination.
     |  
     |  Method resolution order:
     |      Equatorial
     |      Coordinate
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  from_radec = set(self, ra, dec)
     |  
     |  get(self)
     |  
     |  set(self, ra, dec)
     |  
     |  to_radec = get(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Coordinate:
     |  
     |  __init__(self, *args, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Coordinate:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Europa(PlanetMoon)
     |  Create a Body instance representing Europa
     |  
     |  Method resolution order:
     |      Europa
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 13
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class FixedBody(Body)
     |  A celestial body, that can compute() its sky position
     |  
     |  Method resolution order:
     |      FixedBody
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Galactic(LonLatCoordinate)
     |  A galactic latitude and longitude.
     |  
     |  Method resolution order:
     |      Galactic
     |      LonLatCoordinate
     |      Coordinate
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  from_radec(self, ra, dec)
     |  
     |  to_radec(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from LonLatCoordinate:
     |  
     |  get(self)
     |  
     |  set(self, lon, lat)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from LonLatCoordinate:
     |  
     |  long
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Coordinate:
     |  
     |  __init__(self, *args, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Coordinate:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Ganymede(PlanetMoon)
     |  Create a Body instance representing Ganymede
     |  
     |  Method resolution order:
     |      Ganymede
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 14
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class HyperbolicBody(Planet)
     |  A celestial body, that can compute() its sky position
     |  
     |  Method resolution order:
     |      HyperbolicBody
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  name
     |      object name
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Hyperion(PlanetMoon)
     |  Create a Body instance representing Hyperion
     |  
     |  Method resolution order:
     |      Hyperion
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 22
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Iapetus(PlanetMoon)
     |  Create a Body instance representing Iapetus
     |  
     |  Method resolution order:
     |      Iapetus
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 23
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Io(PlanetMoon)
     |  Create a Body instance representing Io
     |  
     |  Method resolution order:
     |      Io
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 12
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Jupiter(Planet)
     |  Create a Body instance representing Jupiter.
     |  
     |  Method resolution order:
     |      Jupiter
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cmlI
     |      central meridian longitude, System I as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  cmlII
     |      central meridian longitude, System II as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class LonLatCoordinate(Coordinate)
     |  A coordinate that is measured with a longitude and latitude.
     |  
     |  Method resolution order:
     |      LonLatCoordinate
     |      Coordinate
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get(self)
     |  
     |  set(self, lon, lat)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  long
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Coordinate:
     |  
     |  __init__(self, *args, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Coordinate:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    LongLatCoordinate = class LonLatCoordinate(Coordinate)
     |  A coordinate that is measured with a longitude and latitude.
     |  
     |  Method resolution order:
     |      LonLatCoordinate
     |      Coordinate
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get(self)
     |  
     |  set(self, lon, lat)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  long
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Coordinate:
     |  
     |  __init__(self, *args, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Coordinate:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Mars(Planet)
     |  Create a Body instance representing Mars
     |  
     |  Method resolution order:
     |      Mars
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Mercury(Planet)
     |  Create a Body instance representing Mercury
     |  
     |  Method resolution order:
     |      Mercury
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Mimas(PlanetMoon)
     |  Create a Body instance representing Mimas
     |  
     |  Method resolution order:
     |      Mimas
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 16
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Miranda(PlanetMoon)
     |  Create a Body instance representing Miranda
     |  
     |  Method resolution order:
     |      Miranda
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 28
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Moon(Planet)
     |  Create a Body Instance representing the Moon.
     |  
     |  Method resolution order:
     |      Moon
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  colong
     |      lunar selenographic colongitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  libration_lat
     |      lunar libration in latitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  libration_long
     |      lunar libration in longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  moon_phase
     |      fraction of lunar surface illuminated when viewed from earth
     |  
     |  subsolar_lat
     |      lunar latitude of subsolar point as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Neptune(Planet)
     |  Create a Body instance representing Neptune
     |  
     |  Method resolution order:
     |      Neptune
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 6
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class NeverUpError(CircumpolarError)
     |  Inappropriate argument value (of correct type).
     |  
     |  Method resolution order:
     |      NeverUpError
     |      CircumpolarError
     |      builtins.ValueError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors inherited from CircumpolarError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.ValueError:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class Oberon(PlanetMoon)
     |  Create a Body instance representing Oberon
     |  
     |  Method resolution order:
     |      Oberon
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 27
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Observer(_libastro.Observer)
     |  A location on earth for which positions are to be computed.
     |  
     |  An `Observer` instance allows you to compute the positions of
     |  celestial bodies as seen from a particular latitude and longitude on
     |  the Earth's surface.  The constructor takes no parameters; instead,
     |  set its attributes once you have created it.  Defaults:
     |  
     |  `date` - the moment the `Observer` is created
     |  `lat` - zero degrees latitude
     |  `lon` - zero degrees longitude
     |  `elevation` - 0 meters above sea level
     |  `horizon` - 0 degrees
     |  `epoch` - J2000
     |  `temp` - 15 degrees Celsius
     |  `pressure` - 1010 mBar
     |  
     |  Method resolution order:
     |      Observer
     |      _libastro.Observer
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __repr__(self)
     |      Return a useful textual representation of this Observer.
     |  
     |  compute_pressure(self)
     |      Set the atmospheric pressure for the current elevation.
     |  
     |  copy(self)
     |  
     |  disallow_circumpolar(self, declination)
     |      Raise an exception if the given declination is circumpolar.
     |      
     |      Raises NeverUpError if an object at the given declination is
     |      always below this Observer's horizon, or AlwaysUpError if such
     |      an object would always be above the horizon.
     |  
     |  next_antitransit(self, body, start=None)
     |      Find the next passage of a body across the anti-meridian.
     |  
     |  next_pass(self, body)
     |      Return the next rising, culmination, and setting of a satellite.
     |  
     |  next_rising(self, body, start=None, use_center=False)
     |      Search for the given body's next rising, returning its date.
     |      
     |      The search starts at the `date` of this `Observer` and is limited to
     |      the single circuit of the sky, from antitransit to antitransit, that
     |      the `body` was in the middle of describing at that date and time.
     |      If the body did not, in fact, cross the horizon in the direction you
     |      are asking about during that particular circuit, then the search
     |      must raise a `CircumpolarError` exception like `NeverUpError` or
     |      `AlwaysUpError` instead of returning a date.
     |  
     |  next_setting(self, body, start=None, use_center=False)
     |      Search for the given body's next setting, returning its date.
     |      
     |      The search starts at the `date` of this `Observer` and is limited to
     |      the single circuit of the sky, from antitransit to antitransit, that
     |      the `body` was in the middle of describing at that date and time.
     |      If the body did not, in fact, cross the horizon in the direction you
     |      are asking about during that particular circuit, then the search
     |      must raise a `CircumpolarError` exception like `NeverUpError` or
     |      `AlwaysUpError` instead of returning a date.
     |  
     |  next_transit(self, body, start=None)
     |      Find the next passage of a body across the meridian.
     |  
     |  previous_antitransit(self, body, start=None)
     |      Find the previous passage of a body across the anti-meridian.
     |  
     |  previous_rising(self, body, start=None, use_center=False)
     |      Search for the given body's previous rising, returning its date.
     |      
     |      The search starts at the `date` of this `Observer` and is limited to
     |      the single circuit of the sky, from antitransit to antitransit, that
     |      the `body` was in the middle of describing at that date and time.
     |      If the body did not, in fact, cross the horizon in the direction you
     |      are asking about during that particular circuit, then the search
     |      must raise a `CircumpolarError` exception like `NeverUpError` or
     |      `AlwaysUpError` instead of returning a date.
     |  
     |  previous_setting(self, body, start=None, use_center=False)
     |      Search for the given body's previous setting, returning its date.
     |      
     |      The search starts at the `date` of this `Observer` and is limited to
     |      the single circuit of the sky, from antitransit to antitransit, that
     |      the `body` was in the middle of describing at that date and time.
     |      If the body did not, in fact, cross the horizon in the direction you
     |      are asking about during that particular circuit, then the search
     |      must raise a `CircumpolarError` exception like `NeverUpError` or
     |      `AlwaysUpError` instead of returning a date.
     |  
     |  previous_transit(self, body, start=None)
     |      Find the previous passage of a body across the meridian.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  elev
     |      Elevation above sea level in meters
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _libastro.Observer:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  radec_of(...)
     |      compute the right ascension and declination of a point identified by its azimuth and altitude
     |  
     |  sidereal_time(...)
     |      compute the local sidereal time for this location and time
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _libastro.Observer:
     |  
     |  date
     |      Date
     |  
     |  elevation
     |      Elevation above sea level in meters
     |  
     |  epoch
     |      Precession epoch
     |  
     |  horizon
     |      The angle above (+) or below (-) the horizon at which an object should be considered at the moment of rising or setting as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  lat
     |      Latitude north of the Equator as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  lon
     |      Longitude east of Greenwich as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  long
     |      Longitude east of Greenwich as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  pressure
     |      atmospheric pressure in millibar
     |  
     |  temp
     |      atmospheric temperature in degrees Celsius
    
    class ParabolicBody(Planet)
     |  A celestial body, that can compute() its sky position
     |  
     |  Method resolution order:
     |      ParabolicBody
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  name
     |      object name
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Phobos(PlanetMoon)
     |  Create a Body instance representing Phobos
     |  
     |  Method resolution order:
     |      Phobos
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 10
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Planet(Body)
     |  A celestial body, that can compute() its sky position
     |  
     |  Method resolution order:
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class PlanetMoon(builtins.object)
     |  A celestial body, that can compute() its sky position
     |  
     |  Methods defined here:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Pluto(Planet)
     |  Create a Body instance representing Pluto
     |  
     |  Method resolution order:
     |      Pluto
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 7
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Rhea(PlanetMoon)
     |  Create a Body instance representing Rhea
     |  
     |  Method resolution order:
     |      Rhea
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 20
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Saturn(Planet)
     |  Create a Body instance representing Saturn.
     |  
     |  Method resolution order:
     |      Saturn
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  earth_tilt
     |      tilt of rings towards Earth, positive for southward tilt, as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  sun_tilt
     |      tilt of rings towards Sun, positive for southward tilt, as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Sun(Planet)
     |  Create a Body instance representing Sun
     |  
     |  Method resolution order:
     |      Sun
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 8
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Tethys(PlanetMoon)
     |  Create a Body instance representing Tethys
     |  
     |  Method resolution order:
     |      Tethys
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 18
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Titan(PlanetMoon)
     |  Create a Body instance representing Titan
     |  
     |  Method resolution order:
     |      Titan
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 21
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Titania(PlanetMoon)
     |  Create a Body instance representing Titania
     |  
     |  Method resolution order:
     |      Titania
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 26
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Umbriel(PlanetMoon)
     |  Create a Body instance representing Umbriel
     |  
     |  Method resolution order:
     |      Umbriel
     |      PlanetMoon
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 25
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PlanetMoon:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PlanetMoon:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  earth_visible
     |      whether visible from earth
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  name
     |      object name (read-only string)
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  sun_visible
     |      whether visible from sun
     |  
     |  x
     |      how far east or west of its planet the moon lies in the sky in planet radii; east is positive
     |  
     |  y
     |      how far north or south of its planet the moon lies in the sky in planet radii; south is positive
     |  
     |  z
     |      how much closer or farther from Earth the moon is than its planet in planet radii; closer to Earth is positive
    
    class Uranus(Planet)
     |  Create a Body instance representing Uranus
     |  
     |  Method resolution order:
     |      Uranus
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 5
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    class Venus(Planet)
     |  Create a Body instance representing Venus
     |  
     |  Method resolution order:
     |      Venus
     |      Planet
     |      Body
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __planet__ = 1
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Planet:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Planet:
     |  
     |  earth_distance
     |      distance from earth in AU
     |  
     |  hlat
     |      heliocentric latitude (but Sun().hlat means the hlat of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlon
     |      heliocentric longitude (but Sun().hlon means the hlon of Earth) as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  hlong
     |      heliocentric longitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  phase
     |      phase as percent of the surface illuminated
     |  
     |  sun_distance
     |      distance from sun in AU
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Body:
     |  
     |  __copy__(...)
     |      Return a new copy of this body
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  compute(...)
     |      compute the location of the body for the given date or Observer, or for the current time if no date is supplied
     |  
     |  copy(...)
     |      Return a new copy of this body
     |  
     |  parallactic_angle(...)
     |      return the parallactic angle to the body; an Observer must have been provided to the most recent compute() call, because a parallactic angle is always measured with respect to a specfic observer
     |  
     |  writedb(...)
     |      return a string representation of the body appropriate for inclusion in an ephem database file
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Body:
     |  
     |  a_dec
     |      astrometric geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  a_epoch
     |      date giving the equinox of the body's astrometric right ascension and declination
     |  
     |  a_ra
     |      astrometric geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  alt
     |      altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  az
     |      azimuth as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  circumpolar
     |      whether object remains above the horizon this day
     |  
     |  dec
     |      declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  elong
     |      elongation as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_dec
     |      apparent geocentric declination as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  g_ra
     |      apparent geocentric right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  mag
     |      magnitude
     |  
     |  name
     |      object name (read-only string)
     |  
     |  neverup
     |      whether object never rises above the horizon this day
     |  
     |  ra
     |      right ascension as a float giving radians, or a string giving hours:minutes:seconds
     |  
     |  radius
     |      visual radius as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_az
     |      azimuth at which the body rises as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  rise_time
     |      rise time
     |  
     |  set_az
     |      azimuth at which the body sets as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  set_time
     |      set time
     |  
     |  size
     |      visual size in arcseconds
     |  
     |  transit_alt
     |      transit altitude as a float giving radians, or a string giving degrees:minutes:seconds
     |  
     |  transit_time
     |      transit time
    
    angle = class Angle(builtins.float)
     |  An angle in radians that can print itself in an astronomical format.
     |  Use ephem.degrees() and ephem.radians() to create one.
     |  
     |  Method resolution order:
     |      Angle
     |      builtins.float
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  norm
     |      Return this angle normalized to the interval [0, 2*pi).
     |  
     |  znorm
     |      Return this angle normalized to the interval (-pi, pi].
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.float:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(...)
     |      float.__format__(format_spec) -> string
     |      
     |      Formats the float according to format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getformat__(...) from builtins.type
     |      float.__getformat__(typestr) -> string
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  This function returns whichever of
     |      'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
     |      format of floating point numbers used by the C type named by typestr.
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __round__(...)
     |      Return the Integral closest to x, rounding half toward even.
     |      When an argument is passed, work like built-in round(x, ndigits).
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __setformat__(...) from builtins.type
     |      float.__setformat__(typestr, fmt) -> None
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
     |      'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
     |      one of the latter two if it appears to match the underlying C reality.
     |      
     |      Override the automatic determination of C-level floating point type.
     |      This affects how floats are converted to and from binary strings.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Return the Integral closest to x between 0 and x.
     |  
     |  as_integer_ratio(...)
     |      float.as_integer_ratio() -> (int, int)
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original
     |      float and with a positive denominator.
     |      Raise OverflowError on infinities and a ValueError on NaNs.
     |      
     |      >>> (10.0).as_integer_ratio()
     |      (10, 1)
     |      >>> (0.0).as_integer_ratio()
     |      (0, 1)
     |      >>> (-.25).as_integer_ratio()
     |      (-1, 4)
     |  
     |  conjugate(...)
     |      Return self, the complex conjugate of any float.
     |  
     |  fromhex(...) from builtins.type
     |      float.fromhex(string) -> float
     |      
     |      Create a floating-point number from a hexadecimal string.
     |      >>> float.fromhex('0x1.ffffp10')
     |      2047.984375
     |      >>> float.fromhex('-0x1p-1074')
     |      -5e-324
     |  
     |  hex(...)
     |      float.hex() -> string
     |      
     |      Return a hexadecimal representation of a floating-point number.
     |      >>> (-0.1).hex()
     |      '-0x1.999999999999ap-4'
     |      >>> 3.14159.hex()
     |      '0x1.921f9f01b866ep+1'
     |  
     |  is_integer(...)
     |      Return True if the float is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.float:
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  real
     |      the real part of a complex number
    
    date = class Date(builtins.float)
     |  Floating point value used by ephem to represent a date.
     |  The value is the number of days since 1899 December 31 12:00 UT. When
     |  creating an instance you can pass in a Python datetime instance, timetuple,
     |  year-month-day triple, or a plain float. Run str() onthis object to see
     |  the UTC date it represents.
     |  
     |  Method resolution order:
     |      Date
     |      builtins.float
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  datetime(...)
     |      Return the date as a (year, month, day, hour, minute, second) tuple
     |  
     |  triple(...)
     |      Return the date as a (year, month, day_with_fraction) tuple
     |  
     |  tuple(...)
     |      Return the date as a (year, month, day, hour, minute, second) tuple
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.float:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __float__(self, /)
     |      float(self)
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __format__(...)
     |      float.__format__(format_spec) -> string
     |      
     |      Formats the float according to format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getformat__(...) from builtins.type
     |      float.__getformat__(typestr) -> string
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  This function returns whichever of
     |      'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the
     |      format of floating point numbers used by the C type named by typestr.
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __int__(self, /)
     |      int(self)
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __pow__(self, value, mod=None, /)
     |      Return pow(self, value, mod).
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __round__(...)
     |      Return the Integral closest to x, rounding half toward even.
     |      When an argument is passed, work like built-in round(x, ndigits).
     |  
     |  __rpow__(self, value, mod=None, /)
     |      Return pow(value, self, mod).
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __setformat__(...) from builtins.type
     |      float.__setformat__(typestr, fmt) -> None
     |      
     |      You probably don't want to use this function.  It exists mainly to be
     |      used in Python's test suite.
     |      
     |      typestr must be 'double' or 'float'.  fmt must be one of 'unknown',
     |      'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be
     |      one of the latter two if it appears to match the underlying C reality.
     |      
     |      Override the automatic determination of C-level floating point type.
     |      This affects how floats are converted to and from binary strings.
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  __trunc__(...)
     |      Return the Integral closest to x between 0 and x.
     |  
     |  as_integer_ratio(...)
     |      float.as_integer_ratio() -> (int, int)
     |      
     |      Return a pair of integers, whose ratio is exactly equal to the original
     |      float and with a positive denominator.
     |      Raise OverflowError on infinities and a ValueError on NaNs.
     |      
     |      >>> (10.0).as_integer_ratio()
     |      (10, 1)
     |      >>> (0.0).as_integer_ratio()
     |      (0, 1)
     |      >>> (-.25).as_integer_ratio()
     |      (-1, 4)
     |  
     |  conjugate(...)
     |      Return self, the complex conjugate of any float.
     |  
     |  fromhex(...) from builtins.type
     |      float.fromhex(string) -> float
     |      
     |      Create a floating-point number from a hexadecimal string.
     |      >>> float.fromhex('0x1.ffffp10')
     |      2047.984375
     |      >>> float.fromhex('-0x1p-1074')
     |      -5e-324
     |  
     |  hex(...)
     |      float.hex() -> string
     |      
     |      Return a hexadecimal representation of a floating-point number.
     |      >>> (-0.1).hex()
     |      '-0x1.999999999999ap-4'
     |      >>> 3.14159.hex()
     |      '0x1.921f9f01b866ep+1'
     |  
     |  is_integer(...)
     |      Return True if the float is an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.float:
     |  
     |  imag
     |      the imaginary part of a complex number
     |  
     |  real
     |      the real part of a complex number

FUNCTIONS
    city(name)
        Load the cities database and return a city.
    
    constellation(...)
        Return the constellation in which the object or coordinates lie
    
    degrees(...)
        build an angle measured in degrees
    
    delta_t(...)
        Compute the difference between Terrestrial Time and Coordinated Universal Time.
    
    holiday(d0, motion, offset)
        Function that assists the finding of equinoxes and solstices.
    
    hours(...)
        build an angle measured in hours of arc
    
    julian_date(...)
        Return the Julian date of the current time, or of an argument that can be converted into an ephem.Date.
    
    localtime(date)
        Convert a PyEphem date into local time, returning a Python datetime.
    
    millennium_atlas(...)
        given right ascension and declination (in radians), return the page of the Millenium Star Atlas displaying that location
    
    newton(f, x0, x1, precision=1.1574074074074074e-06)
        Return an x-value at which the given function reaches zero.
        
        Stops and declares victory once the x-value is within ``precision``
        of the solution, which defaults to a half-second of clock time.
    
    next_autumn_equinox = next_autumnal_equinox(date)
        Return the date of the next autumnal equinox.
    
    next_autumnal_equinox(date)
        Return the date of the next autumnal equinox.
    
    next_equinox(date)
        Return the date of the next equinox.
    
    next_fall_equinox = next_autumnal_equinox(date)
        Return the date of the next autumnal equinox.
    
    next_first_quarter_moon(date)
        Return the date of the next First Quarter Moon.
    
    next_full_moon(date)
        Return the date of the next Full Moon.
    
    next_last_quarter_moon(date)
        Return the date of the next Last Quarter Moon.
    
    next_new_moon(date)
        Return the date of the next New Moon.
    
    next_solstice(date)
        Return the date of the next solstice.
    
    next_spring_equinox = next_vernal_equinox(date)
        Return the date of the next vernal equinox.
    
    next_summer_solstice(date)
        Return the date of the next summer solstice.
    
    next_vernal_equinox(date)
        Return the date of the next vernal equinox.
    
    next_winter_solstice(date)
        Return the date of the next winter solstice.
    
    now(...)
        Return the current time
    
    previous_autumn_equinox = previous_autumnal_equinox(date)
        Return the date of the previous autumnal equinox.
    
    previous_autumnal_equinox(date)
        Return the date of the previous autumnal equinox.
    
    previous_equinox(date)
        Return the date of the previous equinox.
    
    previous_fall_equinox = previous_autumnal_equinox(date)
        Return the date of the previous autumnal equinox.
    
    previous_first_quarter_moon(date)
        Return the date of the previous First Quarter Moon.
    
    previous_full_moon(date)
        Return the date of the previous Full Moon.
    
    previous_last_quarter_moon(date)
        Return the date of the previous Last Quarter Moon.
    
    previous_new_moon(date)
        Return the date of the previous New Moon.
    
    previous_solstice(date)
        Return the date of the previous solstice.
    
    previous_spring_equinox = previous_vernal_equinox(date)
        Return the date of the previous vernal equinox.
    
    previous_summer_solstice(date)
        Return the date of the previous summer solstice.
    
    previous_vernal_equinox(date)
        Return the date of the previous vernal equinox.
    
    previous_winter_solstice(date)
        Return the date of the previous winter solstice.
    
    readdb(...)
        Read an ephem database entry
    
    readtle(...)
        Read TLE-format satellite elements
    
    separation(...)
        Return the angular separation between two objects or positions as a float giving radians, or a string giving degrees:minutes:seconds
    
    star(name, *args, **kwargs)
        Load the stars database and return a star.
    
    uranometria(...)
        given right ascension and declination (in radians), return the page of the original Uranometria displaying that location
    
    uranometria2000(...)
        given right ascension and declination (in radians), return the page of the Uranometria 2000.0 displaying that location

DATA
    B1900 = 0.3135000001639128
    B1950 = 18262.423500000034
    J2000 = 36525.0
    arcminute = 0.0002908882086657216
    arcsecond = 4.84813681109536e-06
    c = 299792458.0
    default_newton_precision = 1.1574074074074074e-06
    degree = 0.017453292519943295
    earth_radius = 6378160.0
    eighthpi = 0.39269908169872414
    half_arcsecond = 2.42406840554768e-06
    halfpi = 1.5707963267948966
    hour = 0.041666666666666664
    meters_per_au = 149597870000.0
    minute = 0.0006944444444444444
    moon_radius = 1740000.0
    pi = 3.141592653589793
    quarterpi = 0.7853981633974483
    second = 1.1574074074074073e-05
    sun_radius = 695000000.0
    tiny = 1.346704669748711e-08
    twopi = 6.283185307179586

VERSION
    3.7.6.0

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/ephem/__init__.py


