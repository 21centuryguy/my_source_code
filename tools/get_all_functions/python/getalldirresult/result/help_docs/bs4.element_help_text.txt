Help on module bs4.element in bs4:

NAME
    bs4.element

DESCRIPTION
    # Use of this source code is governed by a BSD-style license that can be
    # found in the LICENSE file.

CLASSES
    bs4.dammit.EntitySubstitution(builtins.object)
        HTMLAwareEntitySubstitution
    builtins.list(builtins.object)
        ResultSet
    builtins.object
        PageElement
            NavigableString(builtins.str, PageElement)
                PreformattedString
                    CData
                    Comment
                    Declaration
                    Doctype
                    ProcessingInstruction
                        XMLProcessingInstruction
            Tag
        SoupStrainer
    builtins.str(builtins.object)
        AttributeValueWithCharsetSubstitution
            CharsetMetaAttributeValue
            ContentMetaAttributeValue
        NamespacedAttribute
        NavigableString(builtins.str, PageElement)
            PreformattedString
                CData
                Comment
                Declaration
                Doctype
                ProcessingInstruction
                    XMLProcessingInstruction
    
    class AttributeValueWithCharsetSubstitution(builtins.str)
     |  A stand-in object for a character encoding specified in HTML.
     |  
     |  Method resolution order:
     |      AttributeValueWithCharsetSubstitution
     |      builtins.str
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
    
    class CData(PreformattedString)
     |  A NavigableString not subject to the normal formatting rules.
     |  
     |  The string will be passed into the formatter (to trigger side effects),
     |  but the return value will be ignored.
     |  
     |  Method resolution order:
     |      CData
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  PREFIX = '<![CDATA['
     |  
     |  SUFFIX = ']]>'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PreformattedString:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class CharsetMetaAttributeValue(AttributeValueWithCharsetSubstitution)
     |  A generic stand-in for the value of a meta tag's 'charset' attribute.
     |  
     |  When Beautiful Soup parses the markup '<meta charset="utf8">', the
     |  value of the 'charset' attribute will be one of these objects.
     |  
     |  Method resolution order:
     |      CharsetMetaAttributeValue
     |      AttributeValueWithCharsetSubstitution
     |      builtins.str
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  encode(self, encoding)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, original_value)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from AttributeValueWithCharsetSubstitution:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
    
    class Comment(PreformattedString)
     |  A NavigableString not subject to the normal formatting rules.
     |  
     |  The string will be passed into the formatter (to trigger side effects),
     |  but the return value will be ignored.
     |  
     |  Method resolution order:
     |      Comment
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  PREFIX = '<!--'
     |  
     |  SUFFIX = '-->'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PreformattedString:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class ContentMetaAttributeValue(AttributeValueWithCharsetSubstitution)
     |  A generic stand-in for the value of a meta tag's 'content' attribute.
     |  
     |  When Beautiful Soup parses the markup:
     |   <meta http-equiv="content-type" content="text/html; charset=utf8">
     |  
     |  The value of the 'content' attribute will be one of these objects.
     |  
     |  Method resolution order:
     |      ContentMetaAttributeValue
     |      AttributeValueWithCharsetSubstitution
     |      builtins.str
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  encode(self, encoding)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, original_value)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CHARSET_RE = re.compile('((^|;)\\s*charset=)([^;]*)', re.MULTILINE)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from AttributeValueWithCharsetSubstitution:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
    
    class Declaration(PreformattedString)
     |  A NavigableString not subject to the normal formatting rules.
     |  
     |  The string will be passed into the formatter (to trigger side effects),
     |  but the return value will be ignored.
     |  
     |  Method resolution order:
     |      Declaration
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  PREFIX = '<?'
     |  
     |  SUFFIX = '?>'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PreformattedString:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class Doctype(PreformattedString)
     |  A NavigableString not subject to the normal formatting rules.
     |  
     |  The string will be passed into the formatter (to trigger side effects),
     |  but the return value will be ignored.
     |  
     |  Method resolution order:
     |      Doctype
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Class methods defined here:
     |  
     |  for_name_and_ids(name, pub_id, system_id) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  PREFIX = '<!DOCTYPE '
     |  
     |  SUFFIX = '>\n'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PreformattedString:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class HTMLAwareEntitySubstitution(bs4.dammit.EntitySubstitution)
     |  Entity substitution rules that are aware of some HTML quirks.
     |  
     |  Specifically, the contents of <script> and <style> tags should not
     |  undergo entity substitution.
     |  
     |  Incoming NavigableString objects are checked to see if they're the
     |  direct children of a <script> or <style> tag.
     |  
     |  Method resolution order:
     |      HTMLAwareEntitySubstitution
     |      bs4.dammit.EntitySubstitution
     |      builtins.object
     |  
     |  Class methods defined here:
     |  
     |  substitute_html(ns) from builtins.type
     |      Replace certain Unicode characters with named HTML entities.
     |      
     |      This differs from data.encode(encoding, 'xmlcharrefreplace')
     |      in that the goal is to make the result more readable (to those
     |      with ASCII displays) rather than to recover from
     |      errors. There's absolutely nothing wrong with a UTF-8 string
     |      containg a LATIN SMALL LETTER E WITH ACUTE, but replacing that
     |      character with "&eacute;" will make it more readable to some
     |      people.
     |  
     |  substitute_xml(ns) from builtins.type
     |      Substitute XML entities for special XML characters.
     |      
     |      :param value: A string to be substituted. The less-than sign
     |        will become &lt;, the greater-than sign will become &gt;,
     |        and any ampersands will become &amp;. If you want ampersands
     |        that appear to be part of an entity definition to be left
     |        alone, use substitute_xml_containing_entities() instead.
     |      
     |      :param make_quoted_attribute: If True, then the string will be
     |       quoted, as befits an attribute value.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  cdata_containing_tags = {'script', 'style'}
     |  
     |  preformatted_tags = {'pre'}
     |  
     |  preserve_whitespace_tags = {'pre', 'textarea'}
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from bs4.dammit.EntitySubstitution:
     |  
     |  quoted_attribute_value(value) from builtins.type
     |      Make a value into a quoted XML attribute, possibly escaping it.
     |      
     |      Most strings will be quoted using double quotes.
     |      
     |       Bob's Bar -> "Bob's Bar"
     |      
     |      If a string contains double quotes, it will be quoted using
     |      single quotes.
     |      
     |       Welcome to "my bar" -> 'Welcome to "my bar"'
     |      
     |      If a string contains both single and double quotes, the
     |      double quotes will be escaped, and the string will be quoted
     |      using double quotes.
     |      
     |       Welcome to "Bob's Bar" -> "Welcome to &quot;Bob's bar&quot;
     |  
     |  substitute_xml_containing_entities(value, make_quoted_attribute=False) from builtins.type
     |      Substitute XML entities for special XML characters.
     |      
     |      :param value: A string to be substituted. The less-than sign will
     |        become &lt;, the greater-than sign will become &gt;, and any
     |        ampersands that are not part of an entity defition will
     |        become &amp;.
     |      
     |      :param make_quoted_attribute: If True, then the string will be
     |       quoted, as befits an attribute value.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from bs4.dammit.EntitySubstitution:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from bs4.dammit.EntitySubstitution:
     |  
     |  AMPERSAND_OR_BRACKET = re.compile('([<>&])')
     |  
     |  BARE_AMPERSAND_OR_BRACKET = re.compile('([<>]|&(?!#\\d+;|#x[0-9a-fA-F]...
     |  
     |  CHARACTER_TO_HTML_ENTITY = {'&': 'amp', '<': 'lt', '>': 'gt', '\xa0': ...
     |  
     |  CHARACTER_TO_HTML_ENTITY_RE = re.compile('[ÆÁÂÀΑÅÃÄΒÇΧ‡ΔÐÉÊÈΕΗËΓÍÎÌΙÏΚ...
     |  
     |  CHARACTER_TO_XML_ENTITY = {'"': 'quot', '&': 'amp', "'": 'apos', '<': ...
     |  
     |  HTML_ENTITY_TO_CHARACTER = {'AElig': 'Æ', 'Aacute': 'Á', 'Acirc': 'Â',...
    
    class NamespacedAttribute(builtins.str)
     |  str(object='') -> str
     |  str(bytes_or_buffer[, encoding[, errors]]) -> str
     |  
     |  Create a new string object from the given object. If encoding or
     |  errors is specified, then the object must expose a data buffer
     |  that will be decoded using the given encoding and error handler.
     |  Otherwise, returns the result of object.__str__() (if defined)
     |  or repr(object).
     |  encoding defaults to sys.getdefaultencoding().
     |  errors defaults to 'strict'.
     |  
     |  Method resolution order:
     |      NamespacedAttribute
     |      builtins.str
     |      builtins.object
     |  
     |  Static methods defined here:
     |  
     |  __new__(cls, prefix, name, namespace=None)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __getnewargs__(...)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
    
    class NavigableString(builtins.str, PageElement)
     |  str(object='') -> str
     |  str(bytes_or_buffer[, encoding[, errors]]) -> str
     |  
     |  Create a new string object from the given object. If encoding or
     |  errors is specified, then the object must expose a data buffer
     |  that will be decoded using the given encoding and error handler.
     |  Otherwise, returns the result of object.__str__() (if defined)
     |  or repr(object).
     |  encoding defaults to sys.getdefaultencoding().
     |  errors defaults to 'strict'.
     |  
     |  Method resolution order:
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  output_ready(self, formatter='minimal')
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  PREFIX = ''
     |  
     |  SUFFIX = ''
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class PageElement(builtins.object)
     |  Contains the navigational information for some part of the page
     |  (either a tag or a piece of text)
     |  
     |  Methods defined here:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class PreformattedString(NavigableString)
     |  A NavigableString not subject to the normal formatting rules.
     |  
     |  The string will be passed into the formatter (to trigger side effects),
     |  but the return value will be ignored.
     |  
     |  Method resolution order:
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  PREFIX = ''
     |  
     |  SUFFIX = ''
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class ProcessingInstruction(PreformattedString)
     |  A SGML processing instruction.
     |  
     |  Method resolution order:
     |      ProcessingInstruction
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  PREFIX = '<?'
     |  
     |  SUFFIX = '>'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PreformattedString:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class ResultSet(builtins.list)
     |  A ResultSet is just a list that keeps track of the SoupStrainer
     |  that created it.
     |  
     |  Method resolution order:
     |      ResultSet
     |      builtins.list
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getattr__(self, key)
     |  
     |  __init__(self, source, result=())
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.list:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iadd__(self, value, /)
     |      Implement self+=value.
     |  
     |  __imul__(self, value, /)
     |      Implement self*=value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(...)
     |      L.__reversed__() -- return a reverse iterator over the list
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      L.__sizeof__() -- size of L in memory, in bytes
     |  
     |  append(...)
     |      L.append(object) -> None -- append object to end
     |  
     |  clear(...)
     |      L.clear() -> None -- remove all items from L
     |  
     |  copy(...)
     |      L.copy() -> list -- a shallow copy of L
     |  
     |  count(...)
     |      L.count(value) -> integer -- return number of occurrences of value
     |  
     |  extend(...)
     |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
     |  
     |  index(...)
     |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
     |      Raises ValueError if the value is not present.
     |  
     |  insert(...)
     |      L.insert(index, object) -- insert object before index
     |  
     |  pop(...)
     |      L.pop([index]) -> item -- remove and return item at index (default last).
     |      Raises IndexError if list is empty or index is out of range.
     |  
     |  remove(...)
     |      L.remove(value) -> None -- remove first occurrence of value.
     |      Raises ValueError if the value is not present.
     |  
     |  reverse(...)
     |      L.reverse() -- reverse *IN PLACE*
     |  
     |  sort(...)
     |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.list:
     |  
     |  __hash__ = None
    
    class SoupStrainer(builtins.object)
     |  Encapsulates a number of ways of matching a markup element (tag or
     |  text).
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, attrs={}, text=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  search(self, markup)
     |  
     |  searchTag = search_tag(self, markup_name=None, markup_attrs={})
     |  
     |  search_tag(self, markup_name=None, markup_attrs={})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Tag(PageElement)
     |  Represents a found HTML tag with its attributes and contents.
     |  
     |  Method resolution order:
     |      Tag
     |      PageElement
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __bool__(self)
     |      A tag is non-None even if it has no contents.
     |  
     |  __call__(self, *args, **kwargs)
     |      Calling a tag like a function is the same as calling its
     |      find_all() method. Eg. tag('a') returns a list of all the A tags
     |      found within this tag.
     |  
     |  __contains__(self, x)
     |  
     |  __copy__(self)
     |      A copy of a Tag is a new Tag, unconnected to the parse tree.
     |      Its contents are a copy of the old Tag's contents.
     |  
     |  __delitem__(self, key)
     |      Deleting tag[key] deletes all 'key' attributes for the tag.
     |  
     |  __eq__(self, other)
     |      Returns true iff this tag has the same name, the same attributes,
     |      and the same contents (recursively) as the given tag.
     |  
     |  __getattr__(self, tag)
     |  
     |  __getitem__(self, key)
     |      tag[key] returns the value of the 'key' attribute for the tag,
     |      and throws an exception if it's not there.
     |  
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, parser=None, builder=None, name=None, namespace=None, prefix=None, attrs=None, parent=None, previous=None, is_xml=None)
     |      Basic constructor.
     |  
     |  __iter__(self)
     |      Iterating over a tag iterates over its contents.
     |  
     |  __len__(self)
     |      The length of a tag is the length of its list of contents.
     |  
     |  __ne__(self, other)
     |      Returns true iff this tag is not identical to the other tag,
     |      as defined in __eq__.
     |  
     |  __repr__ = __unicode__(self)
     |  
     |  __setitem__(self, key, value)
     |      Setting tag[key] sets the value of the 'key' attribute for the
     |      tag.
     |  
     |  __str__ = __unicode__(self)
     |  
     |  __unicode__(self)
     |  
     |  childGenerator(self)
     |      # Old names for backwards compatibility
     |  
     |  clear(self, decompose=False)
     |      Extract all children. If decompose is True, decompose instead.
     |  
     |  decode(self, indent_level=None, eventual_encoding='utf-8', formatter='minimal')
     |      Returns a Unicode representation of this tag and its contents.
     |      
     |      :param eventual_encoding: The tag is destined to be
     |         encoded into this encoding. This method is _not_
     |         responsible for performing that encoding. This information
     |         is passed in so that it can be substituted in if the
     |         document contains a <META> tag that mentions the document's
     |         encoding.
     |  
     |  decode_contents(self, indent_level=None, eventual_encoding='utf-8', formatter='minimal')
     |      Renders the contents of this tag as a Unicode string.
     |      
     |      :param indent_level: Each line of the rendering will be
     |         indented this many spaces.
     |      
     |      :param eventual_encoding: The tag is destined to be
     |         encoded into this encoding. This method is _not_
     |         responsible for performing that encoding. This information
     |         is passed in so that it can be substituted in if the
     |         document contains a <META> tag that mentions the document's
     |         encoding.
     |      
     |      :param formatter: The output formatter responsible for converting
     |         entities to Unicode characters.
     |  
     |  decompose(self)
     |      Recursively destroys the contents of this tree.
     |  
     |  encode(self, encoding='utf-8', indent_level=None, formatter='minimal', errors='xmlcharrefreplace')
     |  
     |  encode_contents(self, indent_level=None, encoding='utf-8', formatter='minimal')
     |      Renders the contents of this tag as a bytestring.
     |      
     |      :param indent_level: Each line of the rendering will be
     |         indented this many spaces.
     |      
     |      :param eventual_encoding: The bytestring will be in this encoding.
     |      
     |      :param formatter: The output formatter responsible for converting
     |         entities to Unicode characters.
     |  
     |  find(self, name=None, attrs={}, recursive=True, text=None, **kwargs)
     |      Return only the first child of this Tag matching the given
     |      criteria.
     |  
     |  findAll = find_all(self, name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)
     |  
     |  findChild = find(self, name=None, attrs={}, recursive=True, text=None, **kwargs)
     |  
     |  findChildren = find_all(self, name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)
     |  
     |  find_all(self, name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)
     |      Extracts a list of Tag objects that match the given
     |      criteria.  You can specify the name of the Tag and any
     |      attributes you want the Tag to have.
     |      
     |      The value of a key-value pair in the 'attrs' map can be a
     |      string, a list of strings, a regular expression object, or a
     |      callable that takes a string and returns whether or not the
     |      string matches for some custom definition of 'matches'. The
     |      same is true of the tag name.
     |  
     |  get(self, key, default=None)
     |      Returns the value of the 'key' attribute for the tag, or
     |      the value given for 'default' if it doesn't have that
     |      attribute.
     |  
     |  getText = get_text(self, separator='', strip=False, types=(<class 'bs4.element.NavigableString'>, <class 'bs4.element.CData'>))
     |  
     |  get_attribute_list(self, key, default=None)
     |      The same as get(), but always returns a list.
     |  
     |  get_text(self, separator='', strip=False, types=(<class 'bs4.element.NavigableString'>, <class 'bs4.element.CData'>))
     |      Get all child strings, concatenated using the given separator.
     |  
     |  has_attr(self, key)
     |  
     |  has_key(self, key)
     |      This was kind of misleading because has_key() (attributes)
     |      was different from __in__ (contents). has_key() is gone in
     |      Python 3, anyway.
     |  
     |  index(self, element)
     |      Find the index of a child by identity, not value. Avoids issues with
     |      tag.contents.index(element) getting the index of equal elements.
     |  
     |  prettify(self, encoding=None, formatter='minimal')
     |  
     |  recursiveChildGenerator(self)
     |  
     |  renderContents(self, encoding='utf-8', prettyPrint=False, indentLevel=0)
     |      # Old method for BS3 compatibility
     |  
     |  select(self, selector, _candidate_generator=None, limit=None)
     |      Perform a CSS selection operation on the current element.
     |  
     |  select_one(self, selector)
     |      Perform a CSS selection operation on the current element.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  children
     |  
     |  descendants
     |  
     |  isSelfClosing
     |      Is this tag an empty-element tag? (aka a self-closing tag)
     |      
     |      A tag that has contents is never an empty-element tag.
     |      
     |      A tag that has no contents may or may not be an empty-element
     |      tag. It depends on the builder used to create the tag. If the
     |      builder has a designated list of empty-element tags, then only
     |      a tag whose name shows up in that list is considered an
     |      empty-element tag.
     |      
     |      If the builder has no designated list of empty-element tags,
     |      then any tag with no contents is an empty-element tag.
     |  
     |  is_empty_element
     |      Is this tag an empty-element tag? (aka a self-closing tag)
     |      
     |      A tag that has contents is never an empty-element tag.
     |      
     |      A tag that has no contents may or may not be an empty-element
     |      tag. It depends on the builder used to create the tag. If the
     |      builder has a designated list of empty-element tags, then only
     |      a tag whose name shows up in that list is considered an
     |      empty-element tag.
     |      
     |      If the builder has no designated list of empty-element tags,
     |      then any tag with no contents is an empty-element tag.
     |  
     |  parserClass
     |  
     |  string
     |      Convenience property to get the single string within this tag.
     |      
     |      :Return: If this tag has a single string child, return value
     |       is that string. If this tag has no children, or more than one
     |       child, return value is None. If this tag has one child tag,
     |       return value is the 'string' attribute of the child tag,
     |       recursively.
     |  
     |  strings
     |      Yield all strings of certain classes, possibly stripping them.
     |      
     |      By default, yields only NavigableString and CData objects. So
     |      no comments, processing instructions, etc.
     |  
     |  stripped_strings
     |  
     |  text
     |      Get all child strings, concatenated using the given separator.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  quoted_colon = re.compile('"[^"]*:[^"]*"')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')
    
    class XMLProcessingInstruction(ProcessingInstruction)
     |  An XML processing instruction.
     |  
     |  Method resolution order:
     |      XMLProcessingInstruction
     |      ProcessingInstruction
     |      PreformattedString
     |      NavigableString
     |      builtins.str
     |      PageElement
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  PREFIX = '<?'
     |  
     |  SUFFIX = '?>'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PreformattedString:
     |  
     |  output_ready(self, formatter='minimal')
     |      CData strings are passed into the formatter.
     |      But the return value is ignored.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NavigableString:
     |  
     |  __copy__(self)
     |      A copy of a NavigableString has the same contents and class
     |      as the original, but it is not connected to the parse tree.
     |  
     |  __getattr__(self, attr)
     |      text.string gives you text. This is for backwards
     |      compatibility for Navigable*String, but for CData* it lets you
     |      get the string without the CData wrapper.
     |  
     |  __getnewargs__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from NavigableString:
     |  
     |  __new__(cls, value)
     |      Create a new NavigableString.
     |      
     |      When unpickling a NavigableString, this method is called with
     |      the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be
     |      passed in to the superclass's __new__ or the superclass won't know
     |      how to handle non-ASCII characters.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NavigableString:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NavigableString:
     |  
     |  known_xml = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.str:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __format__(...)
     |      S.__format__(format_spec) -> str
     |      
     |      Return a formatted version of S as described by format_spec.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __sizeof__(...)
     |      S.__sizeof__() -> size of S in memory, in bytes
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  capitalize(...)
     |      S.capitalize() -> str
     |      
     |      Return a capitalized version of S, i.e. make the first character
     |      have upper case and the rest lower case.
     |  
     |  casefold(...)
     |      S.casefold() -> str
     |      
     |      Return a version of S suitable for caseless comparisons.
     |  
     |  center(...)
     |      S.center(width[, fillchar]) -> str
     |      
     |      Return S centered in a string of length width. Padding is
     |      done using the specified fill character (default is a space)
     |  
     |  count(...)
     |      S.count(sub[, start[, end]]) -> int
     |      
     |      Return the number of non-overlapping occurrences of substring sub in
     |      string S[start:end].  Optional arguments start and end are
     |      interpreted as in slice notation.
     |  
     |  encode(...)
     |      S.encode(encoding='utf-8', errors='strict') -> bytes
     |      
     |      Encode S using the codec registered for encoding. Default encoding
     |      is 'utf-8'. errors may be given to set a different error
     |      handling scheme. Default is 'strict' meaning that encoding errors raise
     |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
     |      'xmlcharrefreplace' as well as any other name registered with
     |      codecs.register_error that can handle UnicodeEncodeErrors.
     |  
     |  endswith(...)
     |      S.endswith(suffix[, start[, end]]) -> bool
     |      
     |      Return True if S ends with the specified suffix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      suffix can also be a tuple of strings to try.
     |  
     |  expandtabs(...)
     |      S.expandtabs(tabsize=8) -> str
     |      
     |      Return a copy of S where all tab characters are expanded using spaces.
     |      If tabsize is not given, a tab size of 8 characters is assumed.
     |  
     |  find(...)
     |      S.find(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  format(...)
     |      S.format(*args, **kwargs) -> str
     |      
     |      Return a formatted version of S, using substitutions from args and kwargs.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  format_map(...)
     |      S.format_map(mapping) -> str
     |      
     |      Return a formatted version of S, using substitutions from mapping.
     |      The substitutions are identified by braces ('{' and '}').
     |  
     |  index(...)
     |      S.index(sub[, start[, end]]) -> int
     |      
     |      Return the lowest index in S where substring sub is found, 
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  isalnum(...)
     |      S.isalnum() -> bool
     |      
     |      Return True if all characters in S are alphanumeric
     |      and there is at least one character in S, False otherwise.
     |  
     |  isalpha(...)
     |      S.isalpha() -> bool
     |      
     |      Return True if all characters in S are alphabetic
     |      and there is at least one character in S, False otherwise.
     |  
     |  isdecimal(...)
     |      S.isdecimal() -> bool
     |      
     |      Return True if there are only decimal characters in S,
     |      False otherwise.
     |  
     |  isdigit(...)
     |      S.isdigit() -> bool
     |      
     |      Return True if all characters in S are digits
     |      and there is at least one character in S, False otherwise.
     |  
     |  isidentifier(...)
     |      S.isidentifier() -> bool
     |      
     |      Return True if S is a valid identifier according
     |      to the language definition.
     |      
     |      Use keyword.iskeyword() to test for reserved identifiers
     |      such as "def" and "class".
     |  
     |  islower(...)
     |      S.islower() -> bool
     |      
     |      Return True if all cased characters in S are lowercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  isnumeric(...)
     |      S.isnumeric() -> bool
     |      
     |      Return True if there are only numeric characters in S,
     |      False otherwise.
     |  
     |  isprintable(...)
     |      S.isprintable() -> bool
     |      
     |      Return True if all characters in S are considered
     |      printable in repr() or S is empty, False otherwise.
     |  
     |  isspace(...)
     |      S.isspace() -> bool
     |      
     |      Return True if all characters in S are whitespace
     |      and there is at least one character in S, False otherwise.
     |  
     |  istitle(...)
     |      S.istitle() -> bool
     |      
     |      Return True if S is a titlecased string and there is at least one
     |      character in S, i.e. upper- and titlecase characters may only
     |      follow uncased characters and lowercase characters only cased ones.
     |      Return False otherwise.
     |  
     |  isupper(...)
     |      S.isupper() -> bool
     |      
     |      Return True if all cased characters in S are uppercase and there is
     |      at least one cased character in S, False otherwise.
     |  
     |  join(...)
     |      S.join(iterable) -> str
     |      
     |      Return a string which is the concatenation of the strings in the
     |      iterable.  The separator between elements is S.
     |  
     |  ljust(...)
     |      S.ljust(width[, fillchar]) -> str
     |      
     |      Return S left-justified in a Unicode string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  lower(...)
     |      S.lower() -> str
     |      
     |      Return a copy of the string S converted to lowercase.
     |  
     |  lstrip(...)
     |      S.lstrip([chars]) -> str
     |      
     |      Return a copy of the string S with leading whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  partition(...)
     |      S.partition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, and return the part before it,
     |      the separator itself, and the part after it.  If the separator is not
     |      found, return S and two empty strings.
     |  
     |  replace(...)
     |      S.replace(old, new[, count]) -> str
     |      
     |      Return a copy of S with all occurrences of substring
     |      old replaced by new.  If the optional argument count is
     |      given, only the first count occurrences are replaced.
     |  
     |  rfind(...)
     |      S.rfind(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Return -1 on failure.
     |  
     |  rindex(...)
     |      S.rindex(sub[, start[, end]]) -> int
     |      
     |      Return the highest index in S where substring sub is found,
     |      such that sub is contained within S[start:end].  Optional
     |      arguments start and end are interpreted as in slice notation.
     |      
     |      Raises ValueError when the substring is not found.
     |  
     |  rjust(...)
     |      S.rjust(width[, fillchar]) -> str
     |      
     |      Return S right-justified in a string of length width. Padding is
     |      done using the specified fill character (default is a space).
     |  
     |  rpartition(...)
     |      S.rpartition(sep) -> (head, sep, tail)
     |      
     |      Search for the separator sep in S, starting at the end of S, and return
     |      the part before it, the separator itself, and the part after it.  If the
     |      separator is not found, return two empty strings and S.
     |  
     |  rsplit(...)
     |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string, starting at the end of the string and
     |      working to the front.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified, any whitespace string
     |      is a separator.
     |  
     |  rstrip(...)
     |      S.rstrip([chars]) -> str
     |      
     |      Return a copy of the string S with trailing whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  split(...)
     |      S.split(sep=None, maxsplit=-1) -> list of strings
     |      
     |      Return a list of the words in S, using sep as the
     |      delimiter string.  If maxsplit is given, at most maxsplit
     |      splits are done. If sep is not specified or is None, any
     |      whitespace string is a separator and empty strings are
     |      removed from the result.
     |  
     |  splitlines(...)
     |      S.splitlines([keepends]) -> list of strings
     |      
     |      Return a list of the lines in S, breaking at line boundaries.
     |      Line breaks are not included in the resulting list unless keepends
     |      is given and true.
     |  
     |  startswith(...)
     |      S.startswith(prefix[, start[, end]]) -> bool
     |      
     |      Return True if S starts with the specified prefix, False otherwise.
     |      With optional start, test S beginning at that position.
     |      With optional end, stop comparing S at that position.
     |      prefix can also be a tuple of strings to try.
     |  
     |  strip(...)
     |      S.strip([chars]) -> str
     |      
     |      Return a copy of the string S with leading and trailing
     |      whitespace removed.
     |      If chars is given and not None, remove characters in chars instead.
     |  
     |  swapcase(...)
     |      S.swapcase() -> str
     |      
     |      Return a copy of S with uppercase characters converted to lowercase
     |      and vice versa.
     |  
     |  title(...)
     |      S.title() -> str
     |      
     |      Return a titlecased version of S, i.e. words start with title case
     |      characters, all remaining cased characters have lower case.
     |  
     |  translate(...)
     |      S.translate(table) -> str
     |      
     |      Return a copy of the string S in which each character has been mapped
     |      through the given translation table. The table must implement
     |      lookup/indexing via __getitem__, for instance a dictionary or list,
     |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
     |      this operation raises LookupError, the character is left untouched.
     |      Characters mapped to None are deleted.
     |  
     |  upper(...)
     |      S.upper() -> str
     |      
     |      Return a copy of S converted to uppercase.
     |  
     |  zfill(...)
     |      S.zfill(width) -> str
     |      
     |      Pad a numeric string S with zeros on the left, to fill a field
     |      of the specified width. The string S is never truncated.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.str:
     |  
     |  maketrans(x, y=None, z=None, /)
     |      Return a translation table usable for str.translate().
     |      
     |      If there is only one argument, it must be a dictionary mapping Unicode
     |      ordinals (integers) or characters to Unicode ordinals, strings or None.
     |      Character keys will be then converted to ordinals.
     |      If there are two arguments, they must be strings of equal length, and
     |      in the resulting dictionary, each character in x will be mapped to the
     |      character at the same position in y. If there is a third argument, it
     |      must be a string, whose characters will be mapped to None in the result.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PageElement:
     |  
     |  append(self, tag)
     |      Appends the given tag to the contents of this tag.
     |  
     |  extract(self)
     |      Destructively rips this element out of the tree.
     |  
     |  fetchNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  fetchPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  fetchPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllNext = find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findAllPrevious = find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findNext = find_next(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSibling = find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findNextSiblings = find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  findParent = find_parent(self, name=None, attrs={}, **kwargs)
     |  
     |  findParents = find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |  
     |  findPrevious = find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSibling = find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |  
     |  findPreviousSiblings = find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |  
     |  find_all_next(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      after this Tag in the document.
     |  
     |  find_all_previous(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns all items that match the given criteria and appear
     |      before this Tag in the document.
     |  
     |  find_next(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears after this Tag in the document.
     |  
     |  find_next_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears after this Tag in the document.
     |  
     |  find_next_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear after this Tag in the document.
     |  
     |  find_parent(self, name=None, attrs={}, **kwargs)
     |      Returns the closest parent of this Tag that matches the given
     |      criteria.
     |  
     |  find_parents(self, name=None, attrs={}, limit=None, **kwargs)
     |      Returns the parents of this Tag that match the given
     |      criteria.
     |  
     |  find_previous(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the first item that matches the given criteria and
     |      appears before this Tag in the document.
     |  
     |  find_previous_sibling(self, name=None, attrs={}, text=None, **kwargs)
     |      Returns the closest sibling to this Tag that matches the
     |      given criteria and appears before this Tag in the document.
     |  
     |  find_previous_siblings(self, name=None, attrs={}, text=None, limit=None, **kwargs)
     |      Returns the siblings of this Tag that match the given
     |      criteria and appear before this Tag in the document.
     |  
     |  format_string(self, s, formatter='minimal')
     |      Format the given string using the given formatter.
     |  
     |  insert(self, position, new_child)
     |  
     |  insert_after(self, successor)
     |      Makes the given element the immediate successor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately after this one.
     |  
     |  insert_before(self, predecessor)
     |      Makes the given element the immediate predecessor of this one.
     |      
     |      The two elements will have the same parent, and the given element
     |      will be immediately before this one.
     |  
     |  nextGenerator(self)
     |      # Old non-property versions of the generators, for backwards
     |      # compatibility with BS3.
     |  
     |  nextSiblingGenerator(self)
     |  
     |  parentGenerator(self)
     |  
     |  previousGenerator(self)
     |  
     |  previousSiblingGenerator(self)
     |  
     |  replaceWith = replace_with(self, replace_with)
     |  
     |  replaceWithChildren = unwrap(self)
     |  
     |  replace_with(self, replace_with)
     |  
     |  replace_with_children = unwrap(self)
     |  
     |  setup(self, parent=None, previous_element=None, next_element=None, previous_sibling=None, next_sibling=None)
     |      Sets up the initial relations between this element and
     |      other elements.
     |  
     |  unwrap(self)
     |  
     |  wrap(self, wrap_inside)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PageElement:
     |  
     |  next
     |  
     |  nextSibling
     |  
     |  next_elements
     |  
     |  next_siblings
     |  
     |  parents
     |  
     |  previous
     |  
     |  previousSibling
     |  
     |  previous_elements
     |  
     |  previous_siblings
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from PageElement:
     |  
     |  HTML_FORMATTERS = {'html': <bound method HTMLAwareEntitySubstitution.s...
     |  
     |  XML_FORMATTERS = {'html': <bound method EntitySubstitution.substitute_...
     |  
     |  attribselect_re = re.compile('^(?P<tag>[a-zA-Z0-9][-.a-zA-Z0-9:_]*...[...
     |  
     |  tag_name_re = re.compile('^[a-zA-Z0-9][-.a-zA-Z0-9:_]*$')

DATA
    DEFAULT_OUTPUT_ENCODING = 'utf-8'
    PY3K = True
    __license__ = 'MIT'
    whitespace_re = re.compile('\\s+')

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/bs4/element.py


