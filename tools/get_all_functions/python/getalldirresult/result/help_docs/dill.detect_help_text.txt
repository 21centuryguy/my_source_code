Help on module dill.detect in dill:

NAME
    dill.detect - Methods for detecting objects leading to pickling failures.

FUNCTIONS
    baditems(obj, exact=False, safe=False)
        get items in object that fail to pickle
    
    badobjects(obj, depth=0, exact=False, safe=False)
        get objects that fail to pickle
    
    badtypes(obj, depth=0, exact=False, safe=False)
        get types for objects that fail to pickle
    
    code(func)
        get the code object for the given function or method
        
        NOTE: use dill.source.getsource(CODEOBJ) to get the source code
    
    errors(obj, depth=0, exact=False, safe=False)
        get errors for objects that fail to pickle
    
    freevars(func)
        get objects defined in enclosing code that are referred to by func
        
        returns a dict of {name:object}
    
    getmodule(object, _filename=None, force=False)
        get the module of the object
    
    globalvars(func, recurse=True, builtin=False)
        get objects defined in global scope that are referred to by func
        
        return a dict of {name:object}
    
    nestedcode(func, recurse=True)
        get the code objects for any nested functions (e.g. in a closure)
    
    nestedglobals(func, recurse=True)
        get the names of any globals found within func
    
    outermost(func)
        get outermost enclosing object (i.e. the outer function in a closure)
        
        NOTE: this is the object-equivalent of getsource(func, enclosing=True)
    
    referredglobals(func, recurse=True, builtin=False)
        get the names of objects in the global scope referred to by func
    
    referrednested(func, recurse=True)
        get functions defined inside of func (e.g. inner functions in a closure)
        
        NOTE: results may differ if the function has been executed or not.
        If len(nestedcode(func)) > len(referrednested(func)), try calling func().
        If possible, python builds code objects, but delays building functions
        until func() is called.
    
    trace = _trace(boolean)
        print a trace through the stack when pickling; useful for debugging
    
    varnames(func)
        get names of variables defined by func
        
        returns a tuple (local vars, local vars referrenced by nested functions)

DATA
    __all__ = ['baditems', 'badobjects', 'badtypes', 'code', 'errors', 'fr...

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/dill/detect.py


