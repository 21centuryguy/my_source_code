Help on module astor.code_gen in astor:

NAME
    astor.code_gen - Part of the astor library for Python AST manipulation.

DESCRIPTION
    License: 3-clause BSD
    
    Copyright (c) 2008      Armin Ronacher
    Copyright (c) 2012-2017 Patrick Maupin
    Copyright (c) 2013-2017 Berker Peksag
    
    This module converts an AST into Python source code.
    
    Before being version-controlled as part of astor,
    this code came from here (in 2012):
    
        https://gist.github.com/1250562

CLASSES
    astor.node_util.ExplicitNodeVisitor(ast.NodeVisitor)
        SourceGenerator
    builtins.object
        Delimit
    
    class Delimit(builtins.object)
     |  A context manager that can add enclosing
     |  delimiters around the output of a
     |  SourceGenerator method.  By default, the
     |  parentheses are added, but the enclosed code
     |  may set discard=True to get rid of them.
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *exc_info)
     |  
     |  __init__(self, tree, *args)
     |      use write instead of using result directly
     |      for initial data, because it may flush
     |      preceding data into result.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  discard = False
    
    class SourceGenerator(astor.node_util.ExplicitNodeVisitor)
     |  This visitor is able to transform a well formed syntax tree into Python
     |  sourcecode.
     |  
     |  For more details have a look at the docstring of the `node_to_source`
     |  function.
     |  
     |  Method resolution order:
     |      SourceGenerator
     |      astor.node_util.ExplicitNodeVisitor
     |      ast.NodeVisitor
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getattr__(self, name, defaults=<built-in method get of dict object at 0x104dbd900>)
     |      Get an attribute of the node.
     |      like dict.get (returns None if doesn't exist)
     |  
     |  __init__(self, indent_with, add_line_information=False, pretty_string=<function pretty_string at 0x104d69f28>, len=<built-in function len>, isinstance=<built-in function isinstance>, callable=<built-in function callable>)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  body(self, statements)
     |  
     |  body_or_else(self, node)
     |  
     |  comma_list(self, items, trailing=False)
     |  
     |  conditional_write(self, *stuff)
     |  
     |  decorators(self, node, extra)
     |  
     |  delimit(self, *args)
     |  
     |  else_body(self, elsewhat)
     |  
     |  newline(self, node=None, extra=0)
     |  
     |  statement(self, node, *params, **kw)
     |  
     |  visit_AnnAssign(self, node)
     |  
     |  visit_Assert(self, node)
     |  
     |  visit_Assign(self, node)
     |  
     |  visit_AsyncFor(self, node)
     |      # introduced in Python 3.5
     |  
     |  visit_AsyncFunctionDef(self, node)
     |      # introduced in Python 3.5
     |  
     |  visit_AsyncWith(self, node)
     |      # new for Python 3.5
     |  
     |  visit_Attribute(self, node)
     |  
     |  visit_AugAssign(self, node)
     |  
     |  visit_Await(self, node)
     |      # new for Python 3.5
     |  
     |  visit_BinOp(self, node)
     |  
     |  visit_BoolOp(self, node)
     |  
     |  visit_Break(self, node)
     |  
     |  visit_Bytes(self, node)
     |  
     |  visit_Call(self, node, len=<built-in function len>)
     |  
     |  visit_ClassDef(self, node)
     |  
     |  visit_Compare(self, node)
     |  
     |  visit_Continue(self, node)
     |  
     |  visit_Delete(self, node)
     |  
     |  visit_Dict(self, node)
     |  
     |  visit_DictComp(self, node)
     |  
     |  visit_Ellipsis(self, node)
     |  
     |  visit_ExceptHandler(self, node)
     |  
     |  visit_Exec(self, node)
     |  
     |  visit_Expr(self, node)
     |  
     |  visit_Expression(self, node)
     |  
     |  visit_ExtSlice(self, node)
     |  
     |  visit_For(self, node, is_async=False)
     |  
     |  visit_FunctionDef(self, node, is_async=False)
     |  
     |  visit_GeneratorExp(self, node)
     |  
     |  visit_Global(self, node)
     |  
     |  visit_If(self, node)
     |  
     |  visit_IfExp(self, node)
     |  
     |  visit_Import(self, node)
     |  
     |  visit_ImportFrom(self, node)
     |  
     |  visit_Index(self, node)
     |  
     |  visit_Interactive = visit_Module(self, node)
     |  
     |  visit_JoinedStr(self, node)
     |  
     |  visit_Lambda(self, node)
     |  
     |  visit_List(self, node)
     |  
     |  visit_ListComp(self, node)
     |  
     |  visit_Module(self, node)
     |  
     |  visit_Name(self, node)
     |  
     |  visit_NameConstant(self, node)
     |  
     |  visit_Nonlocal(self, node)
     |  
     |  visit_Num(self, node, new=True)
     |  
     |  visit_Pass(self, node)
     |  
     |  visit_Print(self, node)
     |  
     |  visit_Raise(self, node)
     |  
     |  visit_Repr(self, node)
     |  
     |  visit_Return(self, node)
     |  
     |  visit_Set(self, node)
     |  
     |  visit_SetComp(self, node)
     |  
     |  visit_Slice(self, node)
     |  
     |  visit_Starred(self, node)
     |  
     |  visit_Str(self, node, is_joined=False)
     |  
     |  visit_Subscript(self, node)
     |  
     |  visit_Try(self, node)
     |      # new for Python 3.3
     |  
     |  visit_TryExcept(self, node)
     |  
     |  visit_TryFinally(self, node)
     |  
     |  visit_Tuple(self, node)
     |  
     |  visit_UnaryOp(self, node)
     |  
     |  visit_While(self, node)
     |  
     |  visit_With(self, node, is_async=False)
     |  
     |  visit_Yield(self, node)
     |  
     |  visit_YieldFrom(self, node)
     |      # new for Python 3.3
     |  
     |  visit_alias(self, node)
     |  
     |  visit_arg(self, node)
     |  
     |  visit_arguments(self, node)
     |  
     |  visit_comprehension(self, node)
     |  
     |  visit_withitem(self, node)
     |      # new for Python 3.3
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  using_unicode_literals = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from astor.node_util.ExplicitNodeVisitor:
     |  
     |  abort_visit(node)
     |  
     |  visit(self, node, abort=<function ExplicitNodeVisitor.abort_visit at 0x104d69b70>)
     |      Visit a node.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ast.NodeVisitor:
     |  
     |  generic_visit(self, node)
     |      Called if no explicit visitor function exists for a node.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ast.NodeVisitor:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    precedence_setter(AST=<class '_ast.AST'>, get_op_precedence=<function get_op_precedence at 0x104d698c8>, isinstance=<built-in function isinstance>, list=<class 'list'>)
        This only uses a closure for performance reasons,
        to reduce the number of attribute lookups.  (set_precedence
        is called a lot of times.)
    
    set_precedence(value, *nodes)
        Set the precedence (of the parent) into the children.
    
    to_source(node, indent_with='    ', add_line_information=False, pretty_string=<function pretty_string at 0x104d69f28>, pretty_source=<function pretty_source at 0x104dc52f0>)
        This function can convert a node tree back into python sourcecode.
        This is useful for debugging purposes, especially if you're dealing with
        custom asts not generated by python itself.
        
        It could be that the sourcecode is evaluable when the AST itself is not
        compilable / evaluable.  The reason for this is that the AST contains some
        more data than regular sourcecode does, which is dropped during
        conversion.
        
        Each level of indentation is replaced with `indent_with`.  Per default this
        parameter is equal to four spaces as suggested by PEP 8, but it might be
        adjusted to match the application's styleguide.
        
        If `add_line_information` is set to `True` comments for the line numbers
        of the nodes are added to the output.  This can be used to spot wrong line
        number information of statement nodes.

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/astor/code_gen.py


