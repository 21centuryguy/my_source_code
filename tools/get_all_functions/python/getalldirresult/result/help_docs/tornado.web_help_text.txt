Help on module tornado.web in tornado:

NAME
    tornado.web

DESCRIPTION
    ``tornado.web`` provides a simple web framework with asynchronous
    features that allow it to scale to large numbers of open connections,
    making it ideal for `long polling
    <http://en.wikipedia.org/wiki/Push_technology#Long_polling>`_.
    
    Here is a simple "Hello, world" example app:
    
    .. testcode::
    
        import tornado.ioloop
        import tornado.web
    
        class MainHandler(tornado.web.RequestHandler):
            def get(self):
                self.write("Hello, world")
    
        if __name__ == "__main__":
            application = tornado.web.Application([
                (r"/", MainHandler),
            ])
            application.listen(8888)
            tornado.ioloop.IOLoop.current().start()
    
    .. testoutput::
       :hide:
    
    
    See the :doc:`guide` for additional information.
    
    Thread-safety notes
    -------------------
    
    In general, methods on `RequestHandler` and elsewhere in Tornado are
    not thread-safe. In particular, methods such as
    `~RequestHandler.write()`, `~RequestHandler.finish()`, and
    `~RequestHandler.flush()` must only be called from the main thread. If
    you use multiple threads it is important to use `.IOLoop.add_callback`
    to transfer control back to the main thread before finishing the
    request, or to limit your use of other threads to
    `.IOLoop.run_in_executor` and ensure that your callbacks running in
    the executor do not refer to Tornado objects.

CLASSES
    builtins.Exception(builtins.BaseException)
        Finish
        HTTPError
            MissingArgumentError
    builtins.object
        OutputTransform
            GZipContentEncoding
        RequestHandler
            ErrorHandler
            FallbackHandler
            RedirectHandler
            StaticFileHandler
        UIModule
            TemplateModule
    tornado.routing.ReversibleRouter(tornado.routing.Router)
        Application
    
    class Application(tornado.routing.ReversibleRouter)
     |  A collection of request handlers that make up a web application.
     |  
     |  Instances of this class are callable and can be passed directly to
     |  HTTPServer to serve the application::
     |  
     |      application = web.Application([
     |          (r"/", MainPageHandler),
     |      ])
     |      http_server = httpserver.HTTPServer(application)
     |      http_server.listen(8080)
     |      ioloop.IOLoop.current().start()
     |  
     |  The constructor for this class takes in a list of `~.routing.Rule`
     |  objects or tuples of values corresponding to the arguments of
     |  `~.routing.Rule` constructor: ``(matcher, target, [target_kwargs], [name])``,
     |  the values in square brackets being optional. The default matcher is
     |  `~.routing.PathMatches`, so ``(regexp, target)`` tuples can also be used
     |  instead of ``(PathMatches(regexp), target)``.
     |  
     |  A common routing target is a `RequestHandler` subclass, but you can also
     |  use lists of rules as a target, which create a nested routing configuration::
     |  
     |      application = web.Application([
     |          (HostMatches("example.com"), [
     |              (r"/", MainPageHandler),
     |              (r"/feed", FeedHandler),
     |          ]),
     |      ])
     |  
     |  In addition to this you can use nested `~.routing.Router` instances,
     |  `~.httputil.HTTPMessageDelegate` subclasses and callables as routing targets
     |  (see `~.routing` module docs for more information).
     |  
     |  When we receive requests, we iterate over the list in order and
     |  instantiate an instance of the first request class whose regexp
     |  matches the request path. The request class can be specified as
     |  either a class object or a (fully-qualified) name.
     |  
     |  A dictionary may be passed as the third element (``target_kwargs``)
     |  of the tuple, which will be used as keyword arguments to the handler's
     |  constructor and `~RequestHandler.initialize` method. This pattern
     |  is used for the `StaticFileHandler` in this example (note that a
     |  `StaticFileHandler` can be installed automatically with the
     |  static_path setting described below)::
     |  
     |      application = web.Application([
     |          (r"/static/(.*)", web.StaticFileHandler, {"path": "/var/www"}),
     |      ])
     |  
     |  We support virtual hosts with the `add_handlers` method, which takes in
     |  a host regular expression as the first argument::
     |  
     |      application.add_handlers(r"www\.myhost\.com", [
     |          (r"/article/([0-9]+)", ArticleHandler),
     |      ])
     |  
     |  If there's no match for the current request's host, then ``default_host``
     |  parameter value is matched against host regular expressions.
     |  
     |  
     |  .. warning::
     |  
     |     Applications that do not use TLS may be vulnerable to :ref:`DNS
     |     rebinding <dnsrebinding>` attacks. This attack is especially
     |     relevant to applications that only listen on ``127.0.0.1` or
     |     other private networks. Appropriate host patterns must be used
     |     (instead of the default of ``r'.*'``) to prevent this risk. The
     |     ``default_host`` argument must not be used in applications that
     |     may be vulnerable to DNS rebinding.
     |  
     |  You can serve static files by sending the ``static_path`` setting
     |  as a keyword argument. We will serve those files from the
     |  ``/static/`` URI (this is configurable with the
     |  ``static_url_prefix`` setting), and we will serve ``/favicon.ico``
     |  and ``/robots.txt`` from the same directory.  A custom subclass of
     |  `StaticFileHandler` can be specified with the
     |  ``static_handler_class`` setting.
     |  
     |  .. versionchanged:: 4.5
     |     Integration with the new `tornado.routing` module.
     |  
     |  Method resolution order:
     |      Application
     |      tornado.routing.ReversibleRouter
     |      tornado.routing.Router
     |      tornado.httputil.HTTPServerConnectionDelegate
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __call__(self, request)
     |      Call self as a function.
     |  
     |  __init__(self, handlers=None, default_host=None, transforms=None, **settings)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_handlers(self, host_pattern, host_handlers)
     |      Appends the given handlers to our handler list.
     |      
     |      Host patterns are processed sequentially in the order they were
     |      added. All matching patterns will be considered.
     |  
     |  add_transform(self, transform_class)
     |  
     |  find_handler(self, request, **kwargs)
     |      Must be implemented to return an appropriate instance of `~.httputil.HTTPMessageDelegate`
     |      that can serve the request.
     |      Routing implementations may pass additional kwargs to extend the routing logic.
     |      
     |      :arg httputil.HTTPServerRequest request: current HTTP request.
     |      :arg kwargs: additional keyword arguments passed by routing implementation.
     |      :returns: an instance of `~.httputil.HTTPMessageDelegate` that will be used to
     |          process the request.
     |  
     |  get_handler_delegate(self, request, target_class, target_kwargs=None, path_args=None, path_kwargs=None)
     |      Returns `~.httputil.HTTPMessageDelegate` that can serve a request
     |      for application and `RequestHandler` subclass.
     |      
     |      :arg httputil.HTTPServerRequest request: current HTTP request.
     |      :arg RequestHandler target_class: a `RequestHandler` class.
     |      :arg dict target_kwargs: keyword arguments for ``target_class`` constructor.
     |      :arg list path_args: positional arguments for ``target_class`` HTTP method that
     |          will be executed while handling a request (``get``, ``post`` or any other).
     |      :arg dict path_kwargs: keyword arguments for ``target_class`` HTTP method.
     |  
     |  listen(self, port, address='', **kwargs)
     |      Starts an HTTP server for this application on the given port.
     |      
     |      This is a convenience alias for creating an `.HTTPServer`
     |      object and calling its listen method.  Keyword arguments not
     |      supported by `HTTPServer.listen <.TCPServer.listen>` are passed to the
     |      `.HTTPServer` constructor.  For advanced uses
     |      (e.g. multi-process mode), do not use this method; create an
     |      `.HTTPServer` and call its
     |      `.TCPServer.bind`/`.TCPServer.start` methods directly.
     |      
     |      Note that after calling this method you still need to call
     |      ``IOLoop.current().start()`` to start the server.
     |      
     |      Returns the `.HTTPServer` object.
     |      
     |      .. versionchanged:: 4.3
     |         Now returns the `.HTTPServer` object.
     |  
     |  log_request(self, handler)
     |      Writes a completed HTTP request to the logs.
     |      
     |      By default writes to the python root logger.  To change
     |      this behavior either subclass Application and override this method,
     |      or pass a function in the application settings dictionary as
     |      ``log_function``.
     |  
     |  reverse_url(self, name, *args)
     |      Returns a URL path for handler named ``name``
     |      
     |      The handler must be added to the application as a named `URLSpec`.
     |      
     |      Args will be substituted for capturing groups in the `URLSpec` regex.
     |      They will be converted to strings if necessary, encoded as utf8,
     |      and url-escaped.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tornado.routing.Router:
     |  
     |  start_request(self, server_conn, request_conn)
     |      This method is called by the server when a new request has started.
     |      
     |      :arg server_conn: is an opaque object representing the long-lived
     |          (e.g. tcp-level) connection.
     |      :arg request_conn: is a `.HTTPConnection` object for a single
     |          request/response exchange.
     |      
     |      This method should return a `.HTTPMessageDelegate`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tornado.httputil.HTTPServerConnectionDelegate:
     |  
     |  on_close(self, server_conn)
     |      This method is called when a connection has been closed.
     |      
     |      :arg server_conn: is a server connection that has previously been
     |          passed to ``start_request``.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tornado.httputil.HTTPServerConnectionDelegate:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ErrorHandler(RequestHandler)
     |  Generates an error response with ``status_code`` for all requests.
     |  
     |  Method resolution order:
     |      ErrorHandler
     |      RequestHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  check_xsrf_cookie(self)
     |      Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.
     |      
     |      To prevent cross-site request forgery, we set an ``_xsrf``
     |      cookie and include the same value as a non-cookie
     |      field with all ``POST`` requests. If the two do not match, we
     |      reject the form submission as a potential forgery.
     |      
     |      The ``_xsrf`` value may be set as either a form field named ``_xsrf``
     |      or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``
     |      (the latter is accepted for compatibility with Django).
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      Prior to release 1.1.1, this check was ignored if the HTTP header
     |      ``X-Requested-With: XMLHTTPRequest`` was present.  This exception
     |      has been shown to be insecure and has been removed.  For more
     |      information please see
     |      http://www.djangoproject.com/weblog/2011/feb/08/security/
     |      http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails
     |      
     |      .. versionchanged:: 3.2.2
     |         Added support for cookie version 2.  Both versions 1 and 2 are
     |         supported.
     |  
     |  initialize(self, status_code)
     |      Hook for subclass initialization. Called for each request.
     |      
     |      A dictionary passed as the third argument of a url spec will be
     |      supplied as keyword arguments to initialize().
     |      
     |      Example::
     |      
     |          class ProfileHandler(RequestHandler):
     |              def initialize(self, database):
     |                  self.database = database
     |      
     |              def get(self, username):
     |                  ...
     |      
     |          app = Application([
     |              (r'/user/(.*)', ProfileHandler, dict(database=database)),
     |              ])
     |  
     |  prepare(self)
     |      Called at the beginning of a request before  `get`/`post`/etc.
     |      
     |      Override this method to perform common initialization regardless
     |      of the request method.
     |      
     |      Asynchronous support: Decorate this method with `.gen.coroutine`
     |      or `.return_future` to make it asynchronous (the
     |      `asynchronous` decorator cannot be used on `prepare`).
     |      If this method returns a `.Future` execution will not proceed
     |      until the `.Future` is done.
     |      
     |      .. versionadded:: 3.1
     |         Asynchronous support.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RequestHandler:
     |  
     |  __init__(self, application, request, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_header(self, name, value)
     |      Adds the given response header and value.
     |      
     |      Unlike `set_header`, `add_header` may be called multiple times
     |      to return multiple values for the same header.
     |  
     |  check_etag_header(self)
     |      Checks the ``Etag`` header against requests's ``If-None-Match``.
     |      
     |      Returns ``True`` if the request's Etag matches and a 304 should be
     |      returned. For example::
     |      
     |          self.set_etag_header()
     |          if self.check_etag_header():
     |              self.set_status(304)
     |              return
     |      
     |      This method is called automatically when the request is finished,
     |      but may be called earlier for applications that override
     |      `compute_etag` and want to do an early check for ``If-None-Match``
     |      before completing the request.  The ``Etag`` header should be set
     |      (perhaps with `set_etag_header`) before calling this method.
     |  
     |  clear(self)
     |      Resets all headers and content for this response.
     |  
     |  clear_all_cookies(self, path='/', domain=None)
     |      Deletes all the cookies the user sent with this request.
     |      
     |      See `clear_cookie` for more information on the path and domain
     |      parameters.
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2
     |      
     |         Added the ``path`` and ``domain`` parameters.
     |  
     |  clear_cookie(self, name, path='/', domain=None)
     |      Deletes the cookie with the given name.
     |      
     |      Due to limitations of the cookie protocol, you must pass the same
     |      path and domain to clear a cookie as were used when that cookie
     |      was set (but there is no way to find out on the server side
     |      which values were used for a given cookie).
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |  
     |  clear_header(self, name)
     |      Clears an outgoing header, undoing a previous `set_header` call.
     |      
     |      Note that this method does not apply to multi-valued headers
     |      set by `add_header`.
     |  
     |  compute_etag(self)
     |      Computes the etag header to be used for this request.
     |      
     |      By default uses a hash of the content written so far.
     |      
     |      May be overridden to provide custom etag implementations,
     |      or may return None to disable tornado's default etag support.
     |  
     |  create_signed_value(self, name, value, version=None)
     |      Signs and timestamps a string so it cannot be forged.
     |      
     |      Normally used via set_secure_cookie, but provided as a separate
     |      method for non-cookie uses.  To decode a value not stored
     |      as a cookie use the optional value argument to get_secure_cookie.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  create_template_loader(self, template_path)
     |      Returns a new template loader for the given path.
     |      
     |      May be overridden by subclasses.  By default returns a
     |      directory-based loader on the given path, using the
     |      ``autoescape`` and ``template_whitespace`` application
     |      settings.  If a ``template_loader`` application setting is
     |      supplied, uses that instead.
     |  
     |  data_received(self, chunk)
     |      Implement this method to handle streamed request data.
     |      
     |      Requires the `.stream_request_body` decorator.
     |  
     |  decode_argument(self, value, name=None)
     |      Decodes an argument from the request.
     |      
     |      The argument has been percent-decoded and is now a byte string.
     |      By default, this method decodes the argument as utf-8 and returns
     |      a unicode string, but this may be overridden in subclasses.
     |      
     |      This method is used as a filter for both `get_argument()` and for
     |      values extracted from the url and passed to `get()`/`post()`/etc.
     |      
     |      The name of the argument is provided if known, but may be None
     |      (e.g. for unnamed groups in the url regex).
     |  
     |  delete(self, *args, **kwargs)
     |  
     |  finish(self, chunk=None)
     |      Finishes this response, ending the HTTP request.
     |  
     |  flush(self, include_footers=False, callback=None)
     |      Flushes the current output buffer to the network.
     |      
     |      The ``callback`` argument, if given, can be used for flow control:
     |      it will be run when all flushed data has been written to the socket.
     |      Note that only one flush callback can be outstanding at a time;
     |      if another flush occurs before the previous flush's callback
     |      has been run, the previous callback will be discarded.
     |      
     |      .. versionchanged:: 4.0
     |         Now returns a `.Future` if no callback is given.
     |  
     |  get(self, *args, **kwargs)
     |  
     |  get_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |  
     |  get_arguments(self, name, strip=True)
     |      Returns a list of the arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |  
     |  get_body_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request body.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_body_arguments(self, name, strip=True)
     |      Returns a list of the body arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_browser_locale(self, default='en_US')
     |      Determines the user's locale from ``Accept-Language`` header.
     |      
     |      See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
     |  
     |  get_cookie(self, name, default=None)
     |      Returns the value of the request cookie with the given name.
     |      
     |      If the named cookie is not present, returns ``default``.
     |      
     |      This method only returns cookies that were present in the request.
     |      It does not see the outgoing cookies set by `set_cookie` in this
     |      handler.
     |  
     |  get_current_user(self)
     |      Override to determine the current user from, e.g., a cookie.
     |      
     |      This method may not be a coroutine.
     |  
     |  get_login_url(self)
     |      Override to customize the login URL based on the request.
     |      
     |      By default, we use the ``login_url`` application setting.
     |  
     |  get_query_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request query string.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_query_arguments(self, name, strip=True)
     |      Returns a list of the query arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_secure_cookie(self, name, value=None, max_age_days=31, min_version=None)
     |      Returns the given signed cookie if it validates, or None.
     |      
     |      The decoded cookie value is returned as a byte string (unlike
     |      `get_cookie`).
     |      
     |      Similar to `get_cookie`, this method only returns cookies that
     |      were present in the request. It does not see outgoing cookies set by
     |      `set_secure_cookie` in this handler.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``min_version`` argument.  Introduced cookie version 2;
     |         both versions 1 and 2 are accepted by default.
     |  
     |  get_secure_cookie_key_version(self, name, value=None)
     |      Returns the signing key version of the secure cookie.
     |      
     |      The version is returned as int.
     |  
     |  get_status(self)
     |      Returns the status code for our response.
     |  
     |  get_template_namespace(self)
     |      Returns a dictionary to be used as the default template namespace.
     |      
     |      May be overridden by subclasses to add or modify values.
     |      
     |      The results of this method will be combined with additional
     |      defaults in the `tornado.template` module and keyword arguments
     |      to `render` or `render_string`.
     |  
     |  get_template_path(self)
     |      Override to customize template path for each handler.
     |      
     |      By default, we use the ``template_path`` application setting.
     |      Return None to load templates relative to the calling file.
     |  
     |  get_user_locale(self)
     |      Override to determine the locale from the authenticated user.
     |      
     |      If None is returned, we fall back to `get_browser_locale()`.
     |      
     |      This method should return a `tornado.locale.Locale` object,
     |      most likely obtained via a call like ``tornado.locale.get("en")``
     |  
     |  head(self, *args, **kwargs)
     |  
     |  log_exception(self, typ, value, tb)
     |      Override to customize logging of uncaught exceptions.
     |      
     |      By default logs instances of `HTTPError` as warnings without
     |      stack traces (on the ``tornado.general`` logger), and all
     |      other exceptions as errors with stack traces (on the
     |      ``tornado.application`` logger).
     |      
     |      .. versionadded:: 3.1
     |  
     |  on_connection_close(self)
     |      Called in async handlers if the client closed the connection.
     |      
     |      Override this to clean up resources associated with
     |      long-lived connections.  Note that this method is called only if
     |      the connection was closed during asynchronous processing; if you
     |      need to do cleanup after every request override `on_finish`
     |      instead.
     |      
     |      Proxies may keep a connection open for a time (perhaps
     |      indefinitely) after the client has gone away, so this method
     |      may not be called promptly after the end user closes their
     |      connection.
     |  
     |  on_finish(self)
     |      Called after the end of a request.
     |      
     |      Override this method to perform cleanup, logging, etc.
     |      This method is a counterpart to `prepare`.  ``on_finish`` may
     |      not produce any output, as it is called after the response
     |      has been sent to the client.
     |  
     |  options(self, *args, **kwargs)
     |  
     |  patch(self, *args, **kwargs)
     |  
     |  post(self, *args, **kwargs)
     |  
     |  put(self, *args, **kwargs)
     |  
     |  redirect(self, url, permanent=False, status=None)
     |      Sends a redirect to the given (optionally relative) URL.
     |      
     |      If the ``status`` argument is specified, that value is used as the
     |      HTTP status code; otherwise either 301 (permanent) or 302
     |      (temporary) is chosen based on the ``permanent`` argument.
     |      The default is 302 (temporary).
     |  
     |  render(self, template_name, **kwargs)
     |      Renders the template with the given arguments as the response.
     |  
     |  render_embed_css(self, css_embed)
     |      Default method used to render the final embedded css for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_embed_js(self, js_embed)
     |      Default method used to render the final embedded js for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_css(self, css_files)
     |      Default method used to render the final css links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_js(self, js_files)
     |      Default method used to render the final js links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_string(self, template_name, **kwargs)
     |      Generate the given template with the given arguments.
     |      
     |      We return the generated byte string (in utf8). To generate and
     |      write a template as a response, use render() above.
     |  
     |  require_setting(self, name, feature='this feature')
     |      Raises an exception if the given app setting is not defined.
     |  
     |  reverse_url(self, name, *args)
     |      Alias for `Application.reverse_url`.
     |  
     |  send_error(self, status_code=500, **kwargs)
     |      Sends the given HTTP error code to the browser.
     |      
     |      If `flush()` has already been called, it is not possible to send
     |      an error, so this method will simply terminate the response.
     |      If output has been written but not yet flushed, it will be discarded
     |      and replaced with the error page.
     |      
     |      Override `write_error()` to customize the error page that is returned.
     |      Additional keyword arguments are passed through to `write_error`.
     |  
     |  set_cookie(self, name, value, domain=None, expires=None, path='/', expires_days=None, **kwargs)
     |      Sets an outgoing cookie name/value with the given options.
     |      
     |      Newly-set cookies are not immediately visible via `get_cookie`;
     |      they are not present until the next request.
     |      
     |      Additional keyword arguments are set on the cookies.Morsel
     |      directly.
     |      See https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel
     |      for available attributes.
     |  
     |  set_default_headers(self)
     |      Override this to set HTTP headers at the beginning of the request.
     |      
     |      For example, this is the place to set a custom ``Server`` header.
     |      Note that setting such headers in the normal flow of request
     |      processing may not do what you want, since headers may be reset
     |      during error handling.
     |  
     |  set_etag_header(self)
     |      Sets the response's Etag header using ``self.compute_etag()``.
     |      
     |      Note: no header will be set if ``compute_etag()`` returns ``None``.
     |      
     |      This method is called automatically when the request is finished.
     |  
     |  set_header(self, name, value)
     |      Sets the given response header name and value.
     |      
     |      If a datetime is given, we automatically format it according to the
     |      HTTP specification. If the value is not a string, we convert it to
     |      a string. All header values are then encoded as UTF-8.
     |  
     |  set_secure_cookie(self, name, value, expires_days=30, version=None, **kwargs)
     |      Signs and timestamps a cookie so it cannot be forged.
     |      
     |      You must specify the ``cookie_secret`` setting in your Application
     |      to use this method. It should be a long, random sequence of bytes
     |      to be used as the HMAC secret for the signature.
     |      
     |      To read a cookie set with this method, use `get_secure_cookie()`.
     |      
     |      Note that the ``expires_days`` parameter sets the lifetime of the
     |      cookie in the browser, but is independent of the ``max_age_days``
     |      parameter to `get_secure_cookie`.
     |      
     |      Secure cookies may contain arbitrary byte values, not just unicode
     |      strings (unlike regular cookies)
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  set_status(self, status_code, reason=None)
     |      Sets the status code for our response.
     |      
     |      :arg int status_code: Response status code.
     |      :arg str reason: Human-readable reason phrase describing the status
     |          code. If ``None``, it will be filled in from
     |          `http.client.responses` or "Unknown".
     |      
     |      .. versionchanged:: 5.0
     |      
     |         No longer validates that the response code is in
     |         `http.client.responses`.
     |  
     |  static_url(self, path, include_host=None, **kwargs)
     |      Returns a static URL for the given relative static file path.
     |      
     |      This method requires you set the ``static_path`` setting in your
     |      application (which specifies the root directory of your static
     |      files).
     |      
     |      This method returns a versioned url (by default appending
     |      ``?v=<signature>``), which allows the static files to be
     |      cached indefinitely.  This can be disabled by passing
     |      ``include_version=False`` (in the default implementation;
     |      other static file implementations are not required to support
     |      this, but they may support other options).
     |      
     |      By default this method returns URLs relative to the current
     |      host, but if ``include_host`` is true the URL returned will be
     |      absolute.  If this handler has an ``include_host`` attribute,
     |      that value will be used as the default for all `static_url`
     |      calls that do not pass ``include_host`` as a keyword argument.
     |  
     |  write(self, chunk)
     |      Writes the given chunk to the output buffer.
     |      
     |      To write the output to the network, use the flush() method below.
     |      
     |      If the given chunk is a dictionary, we write it as JSON and set
     |      the Content-Type of the response to be ``application/json``.
     |      (if you want to send JSON as a different ``Content-Type``, call
     |      set_header *after* calling write()).
     |      
     |      Note that lists are not converted to JSON because of a potential
     |      cross-site security vulnerability.  All JSON output should be
     |      wrapped in a dictionary.  More details at
     |      http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and
     |      https://github.com/facebook/tornado/issues/1009
     |  
     |  write_error(self, status_code, **kwargs)
     |      Override to implement custom error pages.
     |      
     |      ``write_error`` may call `write`, `render`, `set_header`, etc
     |      to produce output as usual.
     |      
     |      If this error was caused by an uncaught exception (including
     |      HTTPError), an ``exc_info`` triple will be available as
     |      ``kwargs["exc_info"]``.  Note that this exception may not be
     |      the "current" exception for purposes of methods like
     |      ``sys.exc_info()`` or ``traceback.format_exc``.
     |  
     |  xsrf_form_html(self)
     |      An HTML ``<input/>`` element to be included with all POST forms.
     |      
     |      It defines the ``_xsrf`` input value, which we check on all POST
     |      requests to prevent cross-site request forgery. If you have set
     |      the ``xsrf_cookies`` application setting, you must include this
     |      HTML within all of your HTML forms.
     |      
     |      In a template, this method should be called with ``{% module
     |      xsrf_form_html() %}``
     |      
     |      See `check_xsrf_cookie()` above for more information.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RequestHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cookies
     |      An alias for
     |      `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.
     |  
     |  current_user
     |      The authenticated user for this request.
     |      
     |      This is set in one of two ways:
     |      
     |      * A subclass may override `get_current_user()`, which will be called
     |        automatically the first time ``self.current_user`` is accessed.
     |        `get_current_user()` will only be called once per request,
     |        and is cached for future access::
     |      
     |            def get_current_user(self):
     |                user_cookie = self.get_secure_cookie("user")
     |                if user_cookie:
     |                    return json.loads(user_cookie)
     |                return None
     |      
     |      * It may be set as a normal variable, typically from an overridden
     |        `prepare()`::
     |      
     |            @gen.coroutine
     |            def prepare(self):
     |                user_id_cookie = self.get_secure_cookie("user_id")
     |                if user_id_cookie:
     |                    self.current_user = yield load_user(user_id_cookie)
     |      
     |      Note that `prepare()` may be a coroutine while `get_current_user()`
     |      may not, so the latter form is necessary if loading the user requires
     |      asynchronous operations.
     |      
     |      The user object may be any type of the application's choosing.
     |  
     |  locale
     |      The locale for the current session.
     |      
     |      Determined by either `get_user_locale`, which you can override to
     |      set the locale based on, e.g., a user preference stored in a
     |      database, or `get_browser_locale`, which uses the ``Accept-Language``
     |      header.
     |      
     |      .. versionchanged: 4.1
     |         Added a property setter.
     |  
     |  settings
     |      An alias for `self.application.settings <Application.settings>`.
     |  
     |  xsrf_token
     |      The XSRF-prevention token for the current user/session.
     |      
     |      To prevent cross-site request forgery, we set an '_xsrf' cookie
     |      and include the same '_xsrf' value as an argument with all POST
     |      requests. If the two do not match, we reject the form submission
     |      as a potential forgery.
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      This property is of type `bytes`, but it contains only ASCII
     |      characters. If a character string is required, there is no
     |      need to base64-encode it; just decode the byte string as
     |      UTF-8.
     |      
     |      .. versionchanged:: 3.2.2
     |         The xsrf token will now be have a random mask applied in every
     |         request, which makes it safe to include the token in pages
     |         that are compressed.  See http://breachattack.com for more
     |         information on the issue fixed by this change.  Old (version 1)
     |         cookies will be converted to version 2 when this method is called
     |         unless the ``xsrf_cookie_version`` `Application` setting is
     |         set to 1.
     |      
     |      .. versionchanged:: 4.3
     |         The ``xsrf_cookie_kwargs`` `Application` setting may be
     |         used to supply additional cookie options (which will be
     |         passed directly to `set_cookie`). For example,
     |         ``xsrf_cookie_kwargs=dict(httponly=True, secure=True)``
     |         will set the ``secure`` and ``httponly`` flags on the
     |         ``_xsrf`` cookie.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from RequestHandler:
     |  
     |  SUPPORTED_METHODS = ('GET', 'HEAD', 'POST', 'DELETE', 'PATCH', 'PUT', ...
    
    class FallbackHandler(RequestHandler)
     |  A `RequestHandler` that wraps another HTTP server callback.
     |  
     |  The fallback is a callable object that accepts an
     |  `~.httputil.HTTPServerRequest`, such as an `Application` or
     |  `tornado.wsgi.WSGIContainer`.  This is most useful to use both
     |  Tornado ``RequestHandlers`` and WSGI in the same server.  Typical
     |  usage::
     |  
     |      wsgi_app = tornado.wsgi.WSGIContainer(
     |          django.core.handlers.wsgi.WSGIHandler())
     |      application = tornado.web.Application([
     |          (r"/foo", FooHandler),
     |          (r".*", FallbackHandler, dict(fallback=wsgi_app),
     |      ])
     |  
     |  Method resolution order:
     |      FallbackHandler
     |      RequestHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  initialize(self, fallback)
     |      Hook for subclass initialization. Called for each request.
     |      
     |      A dictionary passed as the third argument of a url spec will be
     |      supplied as keyword arguments to initialize().
     |      
     |      Example::
     |      
     |          class ProfileHandler(RequestHandler):
     |              def initialize(self, database):
     |                  self.database = database
     |      
     |              def get(self, username):
     |                  ...
     |      
     |          app = Application([
     |              (r'/user/(.*)', ProfileHandler, dict(database=database)),
     |              ])
     |  
     |  prepare(self)
     |      Called at the beginning of a request before  `get`/`post`/etc.
     |      
     |      Override this method to perform common initialization regardless
     |      of the request method.
     |      
     |      Asynchronous support: Decorate this method with `.gen.coroutine`
     |      or `.return_future` to make it asynchronous (the
     |      `asynchronous` decorator cannot be used on `prepare`).
     |      If this method returns a `.Future` execution will not proceed
     |      until the `.Future` is done.
     |      
     |      .. versionadded:: 3.1
     |         Asynchronous support.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RequestHandler:
     |  
     |  __init__(self, application, request, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_header(self, name, value)
     |      Adds the given response header and value.
     |      
     |      Unlike `set_header`, `add_header` may be called multiple times
     |      to return multiple values for the same header.
     |  
     |  check_etag_header(self)
     |      Checks the ``Etag`` header against requests's ``If-None-Match``.
     |      
     |      Returns ``True`` if the request's Etag matches and a 304 should be
     |      returned. For example::
     |      
     |          self.set_etag_header()
     |          if self.check_etag_header():
     |              self.set_status(304)
     |              return
     |      
     |      This method is called automatically when the request is finished,
     |      but may be called earlier for applications that override
     |      `compute_etag` and want to do an early check for ``If-None-Match``
     |      before completing the request.  The ``Etag`` header should be set
     |      (perhaps with `set_etag_header`) before calling this method.
     |  
     |  check_xsrf_cookie(self)
     |      Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.
     |      
     |      To prevent cross-site request forgery, we set an ``_xsrf``
     |      cookie and include the same value as a non-cookie
     |      field with all ``POST`` requests. If the two do not match, we
     |      reject the form submission as a potential forgery.
     |      
     |      The ``_xsrf`` value may be set as either a form field named ``_xsrf``
     |      or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``
     |      (the latter is accepted for compatibility with Django).
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      Prior to release 1.1.1, this check was ignored if the HTTP header
     |      ``X-Requested-With: XMLHTTPRequest`` was present.  This exception
     |      has been shown to be insecure and has been removed.  For more
     |      information please see
     |      http://www.djangoproject.com/weblog/2011/feb/08/security/
     |      http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails
     |      
     |      .. versionchanged:: 3.2.2
     |         Added support for cookie version 2.  Both versions 1 and 2 are
     |         supported.
     |  
     |  clear(self)
     |      Resets all headers and content for this response.
     |  
     |  clear_all_cookies(self, path='/', domain=None)
     |      Deletes all the cookies the user sent with this request.
     |      
     |      See `clear_cookie` for more information on the path and domain
     |      parameters.
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2
     |      
     |         Added the ``path`` and ``domain`` parameters.
     |  
     |  clear_cookie(self, name, path='/', domain=None)
     |      Deletes the cookie with the given name.
     |      
     |      Due to limitations of the cookie protocol, you must pass the same
     |      path and domain to clear a cookie as were used when that cookie
     |      was set (but there is no way to find out on the server side
     |      which values were used for a given cookie).
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |  
     |  clear_header(self, name)
     |      Clears an outgoing header, undoing a previous `set_header` call.
     |      
     |      Note that this method does not apply to multi-valued headers
     |      set by `add_header`.
     |  
     |  compute_etag(self)
     |      Computes the etag header to be used for this request.
     |      
     |      By default uses a hash of the content written so far.
     |      
     |      May be overridden to provide custom etag implementations,
     |      or may return None to disable tornado's default etag support.
     |  
     |  create_signed_value(self, name, value, version=None)
     |      Signs and timestamps a string so it cannot be forged.
     |      
     |      Normally used via set_secure_cookie, but provided as a separate
     |      method for non-cookie uses.  To decode a value not stored
     |      as a cookie use the optional value argument to get_secure_cookie.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  create_template_loader(self, template_path)
     |      Returns a new template loader for the given path.
     |      
     |      May be overridden by subclasses.  By default returns a
     |      directory-based loader on the given path, using the
     |      ``autoescape`` and ``template_whitespace`` application
     |      settings.  If a ``template_loader`` application setting is
     |      supplied, uses that instead.
     |  
     |  data_received(self, chunk)
     |      Implement this method to handle streamed request data.
     |      
     |      Requires the `.stream_request_body` decorator.
     |  
     |  decode_argument(self, value, name=None)
     |      Decodes an argument from the request.
     |      
     |      The argument has been percent-decoded and is now a byte string.
     |      By default, this method decodes the argument as utf-8 and returns
     |      a unicode string, but this may be overridden in subclasses.
     |      
     |      This method is used as a filter for both `get_argument()` and for
     |      values extracted from the url and passed to `get()`/`post()`/etc.
     |      
     |      The name of the argument is provided if known, but may be None
     |      (e.g. for unnamed groups in the url regex).
     |  
     |  delete(self, *args, **kwargs)
     |  
     |  finish(self, chunk=None)
     |      Finishes this response, ending the HTTP request.
     |  
     |  flush(self, include_footers=False, callback=None)
     |      Flushes the current output buffer to the network.
     |      
     |      The ``callback`` argument, if given, can be used for flow control:
     |      it will be run when all flushed data has been written to the socket.
     |      Note that only one flush callback can be outstanding at a time;
     |      if another flush occurs before the previous flush's callback
     |      has been run, the previous callback will be discarded.
     |      
     |      .. versionchanged:: 4.0
     |         Now returns a `.Future` if no callback is given.
     |  
     |  get(self, *args, **kwargs)
     |  
     |  get_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |  
     |  get_arguments(self, name, strip=True)
     |      Returns a list of the arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |  
     |  get_body_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request body.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_body_arguments(self, name, strip=True)
     |      Returns a list of the body arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_browser_locale(self, default='en_US')
     |      Determines the user's locale from ``Accept-Language`` header.
     |      
     |      See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
     |  
     |  get_cookie(self, name, default=None)
     |      Returns the value of the request cookie with the given name.
     |      
     |      If the named cookie is not present, returns ``default``.
     |      
     |      This method only returns cookies that were present in the request.
     |      It does not see the outgoing cookies set by `set_cookie` in this
     |      handler.
     |  
     |  get_current_user(self)
     |      Override to determine the current user from, e.g., a cookie.
     |      
     |      This method may not be a coroutine.
     |  
     |  get_login_url(self)
     |      Override to customize the login URL based on the request.
     |      
     |      By default, we use the ``login_url`` application setting.
     |  
     |  get_query_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request query string.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_query_arguments(self, name, strip=True)
     |      Returns a list of the query arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_secure_cookie(self, name, value=None, max_age_days=31, min_version=None)
     |      Returns the given signed cookie if it validates, or None.
     |      
     |      The decoded cookie value is returned as a byte string (unlike
     |      `get_cookie`).
     |      
     |      Similar to `get_cookie`, this method only returns cookies that
     |      were present in the request. It does not see outgoing cookies set by
     |      `set_secure_cookie` in this handler.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``min_version`` argument.  Introduced cookie version 2;
     |         both versions 1 and 2 are accepted by default.
     |  
     |  get_secure_cookie_key_version(self, name, value=None)
     |      Returns the signing key version of the secure cookie.
     |      
     |      The version is returned as int.
     |  
     |  get_status(self)
     |      Returns the status code for our response.
     |  
     |  get_template_namespace(self)
     |      Returns a dictionary to be used as the default template namespace.
     |      
     |      May be overridden by subclasses to add or modify values.
     |      
     |      The results of this method will be combined with additional
     |      defaults in the `tornado.template` module and keyword arguments
     |      to `render` or `render_string`.
     |  
     |  get_template_path(self)
     |      Override to customize template path for each handler.
     |      
     |      By default, we use the ``template_path`` application setting.
     |      Return None to load templates relative to the calling file.
     |  
     |  get_user_locale(self)
     |      Override to determine the locale from the authenticated user.
     |      
     |      If None is returned, we fall back to `get_browser_locale()`.
     |      
     |      This method should return a `tornado.locale.Locale` object,
     |      most likely obtained via a call like ``tornado.locale.get("en")``
     |  
     |  head(self, *args, **kwargs)
     |  
     |  log_exception(self, typ, value, tb)
     |      Override to customize logging of uncaught exceptions.
     |      
     |      By default logs instances of `HTTPError` as warnings without
     |      stack traces (on the ``tornado.general`` logger), and all
     |      other exceptions as errors with stack traces (on the
     |      ``tornado.application`` logger).
     |      
     |      .. versionadded:: 3.1
     |  
     |  on_connection_close(self)
     |      Called in async handlers if the client closed the connection.
     |      
     |      Override this to clean up resources associated with
     |      long-lived connections.  Note that this method is called only if
     |      the connection was closed during asynchronous processing; if you
     |      need to do cleanup after every request override `on_finish`
     |      instead.
     |      
     |      Proxies may keep a connection open for a time (perhaps
     |      indefinitely) after the client has gone away, so this method
     |      may not be called promptly after the end user closes their
     |      connection.
     |  
     |  on_finish(self)
     |      Called after the end of a request.
     |      
     |      Override this method to perform cleanup, logging, etc.
     |      This method is a counterpart to `prepare`.  ``on_finish`` may
     |      not produce any output, as it is called after the response
     |      has been sent to the client.
     |  
     |  options(self, *args, **kwargs)
     |  
     |  patch(self, *args, **kwargs)
     |  
     |  post(self, *args, **kwargs)
     |  
     |  put(self, *args, **kwargs)
     |  
     |  redirect(self, url, permanent=False, status=None)
     |      Sends a redirect to the given (optionally relative) URL.
     |      
     |      If the ``status`` argument is specified, that value is used as the
     |      HTTP status code; otherwise either 301 (permanent) or 302
     |      (temporary) is chosen based on the ``permanent`` argument.
     |      The default is 302 (temporary).
     |  
     |  render(self, template_name, **kwargs)
     |      Renders the template with the given arguments as the response.
     |  
     |  render_embed_css(self, css_embed)
     |      Default method used to render the final embedded css for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_embed_js(self, js_embed)
     |      Default method used to render the final embedded js for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_css(self, css_files)
     |      Default method used to render the final css links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_js(self, js_files)
     |      Default method used to render the final js links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_string(self, template_name, **kwargs)
     |      Generate the given template with the given arguments.
     |      
     |      We return the generated byte string (in utf8). To generate and
     |      write a template as a response, use render() above.
     |  
     |  require_setting(self, name, feature='this feature')
     |      Raises an exception if the given app setting is not defined.
     |  
     |  reverse_url(self, name, *args)
     |      Alias for `Application.reverse_url`.
     |  
     |  send_error(self, status_code=500, **kwargs)
     |      Sends the given HTTP error code to the browser.
     |      
     |      If `flush()` has already been called, it is not possible to send
     |      an error, so this method will simply terminate the response.
     |      If output has been written but not yet flushed, it will be discarded
     |      and replaced with the error page.
     |      
     |      Override `write_error()` to customize the error page that is returned.
     |      Additional keyword arguments are passed through to `write_error`.
     |  
     |  set_cookie(self, name, value, domain=None, expires=None, path='/', expires_days=None, **kwargs)
     |      Sets an outgoing cookie name/value with the given options.
     |      
     |      Newly-set cookies are not immediately visible via `get_cookie`;
     |      they are not present until the next request.
     |      
     |      Additional keyword arguments are set on the cookies.Morsel
     |      directly.
     |      See https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel
     |      for available attributes.
     |  
     |  set_default_headers(self)
     |      Override this to set HTTP headers at the beginning of the request.
     |      
     |      For example, this is the place to set a custom ``Server`` header.
     |      Note that setting such headers in the normal flow of request
     |      processing may not do what you want, since headers may be reset
     |      during error handling.
     |  
     |  set_etag_header(self)
     |      Sets the response's Etag header using ``self.compute_etag()``.
     |      
     |      Note: no header will be set if ``compute_etag()`` returns ``None``.
     |      
     |      This method is called automatically when the request is finished.
     |  
     |  set_header(self, name, value)
     |      Sets the given response header name and value.
     |      
     |      If a datetime is given, we automatically format it according to the
     |      HTTP specification. If the value is not a string, we convert it to
     |      a string. All header values are then encoded as UTF-8.
     |  
     |  set_secure_cookie(self, name, value, expires_days=30, version=None, **kwargs)
     |      Signs and timestamps a cookie so it cannot be forged.
     |      
     |      You must specify the ``cookie_secret`` setting in your Application
     |      to use this method. It should be a long, random sequence of bytes
     |      to be used as the HMAC secret for the signature.
     |      
     |      To read a cookie set with this method, use `get_secure_cookie()`.
     |      
     |      Note that the ``expires_days`` parameter sets the lifetime of the
     |      cookie in the browser, but is independent of the ``max_age_days``
     |      parameter to `get_secure_cookie`.
     |      
     |      Secure cookies may contain arbitrary byte values, not just unicode
     |      strings (unlike regular cookies)
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  set_status(self, status_code, reason=None)
     |      Sets the status code for our response.
     |      
     |      :arg int status_code: Response status code.
     |      :arg str reason: Human-readable reason phrase describing the status
     |          code. If ``None``, it will be filled in from
     |          `http.client.responses` or "Unknown".
     |      
     |      .. versionchanged:: 5.0
     |      
     |         No longer validates that the response code is in
     |         `http.client.responses`.
     |  
     |  static_url(self, path, include_host=None, **kwargs)
     |      Returns a static URL for the given relative static file path.
     |      
     |      This method requires you set the ``static_path`` setting in your
     |      application (which specifies the root directory of your static
     |      files).
     |      
     |      This method returns a versioned url (by default appending
     |      ``?v=<signature>``), which allows the static files to be
     |      cached indefinitely.  This can be disabled by passing
     |      ``include_version=False`` (in the default implementation;
     |      other static file implementations are not required to support
     |      this, but they may support other options).
     |      
     |      By default this method returns URLs relative to the current
     |      host, but if ``include_host`` is true the URL returned will be
     |      absolute.  If this handler has an ``include_host`` attribute,
     |      that value will be used as the default for all `static_url`
     |      calls that do not pass ``include_host`` as a keyword argument.
     |  
     |  write(self, chunk)
     |      Writes the given chunk to the output buffer.
     |      
     |      To write the output to the network, use the flush() method below.
     |      
     |      If the given chunk is a dictionary, we write it as JSON and set
     |      the Content-Type of the response to be ``application/json``.
     |      (if you want to send JSON as a different ``Content-Type``, call
     |      set_header *after* calling write()).
     |      
     |      Note that lists are not converted to JSON because of a potential
     |      cross-site security vulnerability.  All JSON output should be
     |      wrapped in a dictionary.  More details at
     |      http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and
     |      https://github.com/facebook/tornado/issues/1009
     |  
     |  write_error(self, status_code, **kwargs)
     |      Override to implement custom error pages.
     |      
     |      ``write_error`` may call `write`, `render`, `set_header`, etc
     |      to produce output as usual.
     |      
     |      If this error was caused by an uncaught exception (including
     |      HTTPError), an ``exc_info`` triple will be available as
     |      ``kwargs["exc_info"]``.  Note that this exception may not be
     |      the "current" exception for purposes of methods like
     |      ``sys.exc_info()`` or ``traceback.format_exc``.
     |  
     |  xsrf_form_html(self)
     |      An HTML ``<input/>`` element to be included with all POST forms.
     |      
     |      It defines the ``_xsrf`` input value, which we check on all POST
     |      requests to prevent cross-site request forgery. If you have set
     |      the ``xsrf_cookies`` application setting, you must include this
     |      HTML within all of your HTML forms.
     |      
     |      In a template, this method should be called with ``{% module
     |      xsrf_form_html() %}``
     |      
     |      See `check_xsrf_cookie()` above for more information.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RequestHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cookies
     |      An alias for
     |      `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.
     |  
     |  current_user
     |      The authenticated user for this request.
     |      
     |      This is set in one of two ways:
     |      
     |      * A subclass may override `get_current_user()`, which will be called
     |        automatically the first time ``self.current_user`` is accessed.
     |        `get_current_user()` will only be called once per request,
     |        and is cached for future access::
     |      
     |            def get_current_user(self):
     |                user_cookie = self.get_secure_cookie("user")
     |                if user_cookie:
     |                    return json.loads(user_cookie)
     |                return None
     |      
     |      * It may be set as a normal variable, typically from an overridden
     |        `prepare()`::
     |      
     |            @gen.coroutine
     |            def prepare(self):
     |                user_id_cookie = self.get_secure_cookie("user_id")
     |                if user_id_cookie:
     |                    self.current_user = yield load_user(user_id_cookie)
     |      
     |      Note that `prepare()` may be a coroutine while `get_current_user()`
     |      may not, so the latter form is necessary if loading the user requires
     |      asynchronous operations.
     |      
     |      The user object may be any type of the application's choosing.
     |  
     |  locale
     |      The locale for the current session.
     |      
     |      Determined by either `get_user_locale`, which you can override to
     |      set the locale based on, e.g., a user preference stored in a
     |      database, or `get_browser_locale`, which uses the ``Accept-Language``
     |      header.
     |      
     |      .. versionchanged: 4.1
     |         Added a property setter.
     |  
     |  settings
     |      An alias for `self.application.settings <Application.settings>`.
     |  
     |  xsrf_token
     |      The XSRF-prevention token for the current user/session.
     |      
     |      To prevent cross-site request forgery, we set an '_xsrf' cookie
     |      and include the same '_xsrf' value as an argument with all POST
     |      requests. If the two do not match, we reject the form submission
     |      as a potential forgery.
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      This property is of type `bytes`, but it contains only ASCII
     |      characters. If a character string is required, there is no
     |      need to base64-encode it; just decode the byte string as
     |      UTF-8.
     |      
     |      .. versionchanged:: 3.2.2
     |         The xsrf token will now be have a random mask applied in every
     |         request, which makes it safe to include the token in pages
     |         that are compressed.  See http://breachattack.com for more
     |         information on the issue fixed by this change.  Old (version 1)
     |         cookies will be converted to version 2 when this method is called
     |         unless the ``xsrf_cookie_version`` `Application` setting is
     |         set to 1.
     |      
     |      .. versionchanged:: 4.3
     |         The ``xsrf_cookie_kwargs`` `Application` setting may be
     |         used to supply additional cookie options (which will be
     |         passed directly to `set_cookie`). For example,
     |         ``xsrf_cookie_kwargs=dict(httponly=True, secure=True)``
     |         will set the ``secure`` and ``httponly`` flags on the
     |         ``_xsrf`` cookie.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from RequestHandler:
     |  
     |  SUPPORTED_METHODS = ('GET', 'HEAD', 'POST', 'DELETE', 'PATCH', 'PUT', ...
    
    class Finish(builtins.Exception)
     |  An exception that ends the request without producing an error response.
     |  
     |  When `Finish` is raised in a `RequestHandler`, the request will
     |  end (calling `RequestHandler.finish` if it hasn't already been
     |  called), but the error-handling methods (including
     |  `RequestHandler.write_error`) will not be called.
     |  
     |  If `Finish()` was created with no arguments, the pending response
     |  will be sent as-is. If `Finish()` was given an argument, that
     |  argument will be passed to `RequestHandler.finish()`.
     |  
     |  This can be a more convenient way to implement custom error pages
     |  than overriding ``write_error`` (especially in library code)::
     |  
     |      if self.current_user is None:
     |          self.set_status(401)
     |          self.set_header('WWW-Authenticate', 'Basic realm="something"')
     |          raise Finish()
     |  
     |  .. versionchanged:: 4.3
     |     Arguments passed to ``Finish()`` will be passed on to
     |     `RequestHandler.finish`.
     |  
     |  Method resolution order:
     |      Finish
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class GZipContentEncoding(OutputTransform)
     |  Applies the gzip content encoding to the response.
     |  
     |  See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11
     |  
     |  .. versionchanged:: 4.0
     |      Now compresses all mime types beginning with ``text/``, instead
     |      of just a whitelist. (the whitelist is still used for certain
     |      non-text mime types).
     |  
     |  Method resolution order:
     |      GZipContentEncoding
     |      OutputTransform
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, request)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  transform_chunk(self, chunk, finishing)
     |  
     |  transform_first_chunk(self, status_code, headers, chunk, finishing)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CONTENT_TYPES = {'application/atom+xml', 'application/javascript', 'ap...
     |  
     |  GZIP_LEVEL = 6
     |  
     |  MIN_LENGTH = 1024
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from OutputTransform:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class HTTPError(builtins.Exception)
     |  An exception that will turn into an HTTP error response.
     |  
     |  Raising an `HTTPError` is a convenient alternative to calling
     |  `RequestHandler.send_error` since it automatically ends the
     |  current function.
     |  
     |  To customize the response sent with an `HTTPError`, override
     |  `RequestHandler.write_error`.
     |  
     |  :arg int status_code: HTTP status code.  Must be listed in
     |      `httplib.responses <http.client.responses>` unless the ``reason``
     |      keyword argument is given.
     |  :arg str log_message: Message to be written to the log for this error
     |      (will not be shown to the user unless the `Application` is in debug
     |      mode).  May contain ``%s``-style placeholders, which will be filled
     |      in with remaining positional parameters.
     |  :arg str reason: Keyword-only argument.  The HTTP "reason" phrase
     |      to pass in the status line along with ``status_code``.  Normally
     |      determined automatically from ``status_code``, but can be used
     |      to use a non-standard numeric code.
     |  
     |  Method resolution order:
     |      HTTPError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, status_code=500, log_message=None, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class MissingArgumentError(HTTPError)
     |  Exception raised by `RequestHandler.get_argument`.
     |  
     |  This is a subclass of `HTTPError`, so if it is uncaught a 400 response
     |  code will be used instead of 500 (and a stack trace will not be logged).
     |  
     |  .. versionadded:: 3.1
     |  
     |  Method resolution order:
     |      MissingArgumentError
     |      HTTPError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, arg_name)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from HTTPError:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from HTTPError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class OutputTransform(builtins.object)
     |  A transform modifies the result of an HTTP request (e.g., GZip encoding)
     |  
     |  Applications are not expected to create their own OutputTransforms
     |  or interact with them directly; the framework chooses which transforms
     |  (if any) to apply.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, request)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  transform_chunk(self, chunk, finishing)
     |  
     |  transform_first_chunk(self, status_code, headers, chunk, finishing)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class RedirectHandler(RequestHandler)
     |  Redirects the client to the given URL for all GET requests.
     |  
     |  You should provide the keyword argument ``url`` to the handler, e.g.::
     |  
     |      application = web.Application([
     |          (r"/oldpath", web.RedirectHandler, {"url": "/newpath"}),
     |      ])
     |  
     |  `RedirectHandler` supports regular expression substitutions. E.g., to
     |  swap the first and second parts of a path while preserving the remainder::
     |  
     |      application = web.Application([
     |          (r"/(.*?)/(.*?)/(.*)", web.RedirectHandler, {"url": "/{1}/{0}/{2}"}),
     |      ])
     |  
     |  The final URL is formatted with `str.format` and the substrings that match
     |  the capturing groups. In the above example, a request to "/a/b/c" would be
     |  formatted like::
     |  
     |      str.format("/{1}/{0}/{2}", "a", "b", "c")  # -> "/b/a/c"
     |  
     |  Use Python's :ref:`format string syntax <formatstrings>` to customize how
     |  values are substituted.
     |  
     |  .. versionchanged:: 4.5
     |     Added support for substitutions into the destination URL.
     |  
     |  .. versionchanged:: 5.0
     |     If any query arguments are present, they will be copied to the
     |     destination URL.
     |  
     |  Method resolution order:
     |      RedirectHandler
     |      RequestHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get(self, *args)
     |  
     |  initialize(self, url, permanent=True)
     |      Hook for subclass initialization. Called for each request.
     |      
     |      A dictionary passed as the third argument of a url spec will be
     |      supplied as keyword arguments to initialize().
     |      
     |      Example::
     |      
     |          class ProfileHandler(RequestHandler):
     |              def initialize(self, database):
     |                  self.database = database
     |      
     |              def get(self, username):
     |                  ...
     |      
     |          app = Application([
     |              (r'/user/(.*)', ProfileHandler, dict(database=database)),
     |              ])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RequestHandler:
     |  
     |  __init__(self, application, request, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_header(self, name, value)
     |      Adds the given response header and value.
     |      
     |      Unlike `set_header`, `add_header` may be called multiple times
     |      to return multiple values for the same header.
     |  
     |  check_etag_header(self)
     |      Checks the ``Etag`` header against requests's ``If-None-Match``.
     |      
     |      Returns ``True`` if the request's Etag matches and a 304 should be
     |      returned. For example::
     |      
     |          self.set_etag_header()
     |          if self.check_etag_header():
     |              self.set_status(304)
     |              return
     |      
     |      This method is called automatically when the request is finished,
     |      but may be called earlier for applications that override
     |      `compute_etag` and want to do an early check for ``If-None-Match``
     |      before completing the request.  The ``Etag`` header should be set
     |      (perhaps with `set_etag_header`) before calling this method.
     |  
     |  check_xsrf_cookie(self)
     |      Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.
     |      
     |      To prevent cross-site request forgery, we set an ``_xsrf``
     |      cookie and include the same value as a non-cookie
     |      field with all ``POST`` requests. If the two do not match, we
     |      reject the form submission as a potential forgery.
     |      
     |      The ``_xsrf`` value may be set as either a form field named ``_xsrf``
     |      or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``
     |      (the latter is accepted for compatibility with Django).
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      Prior to release 1.1.1, this check was ignored if the HTTP header
     |      ``X-Requested-With: XMLHTTPRequest`` was present.  This exception
     |      has been shown to be insecure and has been removed.  For more
     |      information please see
     |      http://www.djangoproject.com/weblog/2011/feb/08/security/
     |      http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails
     |      
     |      .. versionchanged:: 3.2.2
     |         Added support for cookie version 2.  Both versions 1 and 2 are
     |         supported.
     |  
     |  clear(self)
     |      Resets all headers and content for this response.
     |  
     |  clear_all_cookies(self, path='/', domain=None)
     |      Deletes all the cookies the user sent with this request.
     |      
     |      See `clear_cookie` for more information on the path and domain
     |      parameters.
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2
     |      
     |         Added the ``path`` and ``domain`` parameters.
     |  
     |  clear_cookie(self, name, path='/', domain=None)
     |      Deletes the cookie with the given name.
     |      
     |      Due to limitations of the cookie protocol, you must pass the same
     |      path and domain to clear a cookie as were used when that cookie
     |      was set (but there is no way to find out on the server side
     |      which values were used for a given cookie).
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |  
     |  clear_header(self, name)
     |      Clears an outgoing header, undoing a previous `set_header` call.
     |      
     |      Note that this method does not apply to multi-valued headers
     |      set by `add_header`.
     |  
     |  compute_etag(self)
     |      Computes the etag header to be used for this request.
     |      
     |      By default uses a hash of the content written so far.
     |      
     |      May be overridden to provide custom etag implementations,
     |      or may return None to disable tornado's default etag support.
     |  
     |  create_signed_value(self, name, value, version=None)
     |      Signs and timestamps a string so it cannot be forged.
     |      
     |      Normally used via set_secure_cookie, but provided as a separate
     |      method for non-cookie uses.  To decode a value not stored
     |      as a cookie use the optional value argument to get_secure_cookie.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  create_template_loader(self, template_path)
     |      Returns a new template loader for the given path.
     |      
     |      May be overridden by subclasses.  By default returns a
     |      directory-based loader on the given path, using the
     |      ``autoescape`` and ``template_whitespace`` application
     |      settings.  If a ``template_loader`` application setting is
     |      supplied, uses that instead.
     |  
     |  data_received(self, chunk)
     |      Implement this method to handle streamed request data.
     |      
     |      Requires the `.stream_request_body` decorator.
     |  
     |  decode_argument(self, value, name=None)
     |      Decodes an argument from the request.
     |      
     |      The argument has been percent-decoded and is now a byte string.
     |      By default, this method decodes the argument as utf-8 and returns
     |      a unicode string, but this may be overridden in subclasses.
     |      
     |      This method is used as a filter for both `get_argument()` and for
     |      values extracted from the url and passed to `get()`/`post()`/etc.
     |      
     |      The name of the argument is provided if known, but may be None
     |      (e.g. for unnamed groups in the url regex).
     |  
     |  delete(self, *args, **kwargs)
     |  
     |  finish(self, chunk=None)
     |      Finishes this response, ending the HTTP request.
     |  
     |  flush(self, include_footers=False, callback=None)
     |      Flushes the current output buffer to the network.
     |      
     |      The ``callback`` argument, if given, can be used for flow control:
     |      it will be run when all flushed data has been written to the socket.
     |      Note that only one flush callback can be outstanding at a time;
     |      if another flush occurs before the previous flush's callback
     |      has been run, the previous callback will be discarded.
     |      
     |      .. versionchanged:: 4.0
     |         Now returns a `.Future` if no callback is given.
     |  
     |  get_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |  
     |  get_arguments(self, name, strip=True)
     |      Returns a list of the arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |  
     |  get_body_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request body.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_body_arguments(self, name, strip=True)
     |      Returns a list of the body arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_browser_locale(self, default='en_US')
     |      Determines the user's locale from ``Accept-Language`` header.
     |      
     |      See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
     |  
     |  get_cookie(self, name, default=None)
     |      Returns the value of the request cookie with the given name.
     |      
     |      If the named cookie is not present, returns ``default``.
     |      
     |      This method only returns cookies that were present in the request.
     |      It does not see the outgoing cookies set by `set_cookie` in this
     |      handler.
     |  
     |  get_current_user(self)
     |      Override to determine the current user from, e.g., a cookie.
     |      
     |      This method may not be a coroutine.
     |  
     |  get_login_url(self)
     |      Override to customize the login URL based on the request.
     |      
     |      By default, we use the ``login_url`` application setting.
     |  
     |  get_query_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request query string.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_query_arguments(self, name, strip=True)
     |      Returns a list of the query arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_secure_cookie(self, name, value=None, max_age_days=31, min_version=None)
     |      Returns the given signed cookie if it validates, or None.
     |      
     |      The decoded cookie value is returned as a byte string (unlike
     |      `get_cookie`).
     |      
     |      Similar to `get_cookie`, this method only returns cookies that
     |      were present in the request. It does not see outgoing cookies set by
     |      `set_secure_cookie` in this handler.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``min_version`` argument.  Introduced cookie version 2;
     |         both versions 1 and 2 are accepted by default.
     |  
     |  get_secure_cookie_key_version(self, name, value=None)
     |      Returns the signing key version of the secure cookie.
     |      
     |      The version is returned as int.
     |  
     |  get_status(self)
     |      Returns the status code for our response.
     |  
     |  get_template_namespace(self)
     |      Returns a dictionary to be used as the default template namespace.
     |      
     |      May be overridden by subclasses to add or modify values.
     |      
     |      The results of this method will be combined with additional
     |      defaults in the `tornado.template` module and keyword arguments
     |      to `render` or `render_string`.
     |  
     |  get_template_path(self)
     |      Override to customize template path for each handler.
     |      
     |      By default, we use the ``template_path`` application setting.
     |      Return None to load templates relative to the calling file.
     |  
     |  get_user_locale(self)
     |      Override to determine the locale from the authenticated user.
     |      
     |      If None is returned, we fall back to `get_browser_locale()`.
     |      
     |      This method should return a `tornado.locale.Locale` object,
     |      most likely obtained via a call like ``tornado.locale.get("en")``
     |  
     |  head(self, *args, **kwargs)
     |  
     |  log_exception(self, typ, value, tb)
     |      Override to customize logging of uncaught exceptions.
     |      
     |      By default logs instances of `HTTPError` as warnings without
     |      stack traces (on the ``tornado.general`` logger), and all
     |      other exceptions as errors with stack traces (on the
     |      ``tornado.application`` logger).
     |      
     |      .. versionadded:: 3.1
     |  
     |  on_connection_close(self)
     |      Called in async handlers if the client closed the connection.
     |      
     |      Override this to clean up resources associated with
     |      long-lived connections.  Note that this method is called only if
     |      the connection was closed during asynchronous processing; if you
     |      need to do cleanup after every request override `on_finish`
     |      instead.
     |      
     |      Proxies may keep a connection open for a time (perhaps
     |      indefinitely) after the client has gone away, so this method
     |      may not be called promptly after the end user closes their
     |      connection.
     |  
     |  on_finish(self)
     |      Called after the end of a request.
     |      
     |      Override this method to perform cleanup, logging, etc.
     |      This method is a counterpart to `prepare`.  ``on_finish`` may
     |      not produce any output, as it is called after the response
     |      has been sent to the client.
     |  
     |  options(self, *args, **kwargs)
     |  
     |  patch(self, *args, **kwargs)
     |  
     |  post(self, *args, **kwargs)
     |  
     |  prepare(self)
     |      Called at the beginning of a request before  `get`/`post`/etc.
     |      
     |      Override this method to perform common initialization regardless
     |      of the request method.
     |      
     |      Asynchronous support: Decorate this method with `.gen.coroutine`
     |      or `.return_future` to make it asynchronous (the
     |      `asynchronous` decorator cannot be used on `prepare`).
     |      If this method returns a `.Future` execution will not proceed
     |      until the `.Future` is done.
     |      
     |      .. versionadded:: 3.1
     |         Asynchronous support.
     |  
     |  put(self, *args, **kwargs)
     |  
     |  redirect(self, url, permanent=False, status=None)
     |      Sends a redirect to the given (optionally relative) URL.
     |      
     |      If the ``status`` argument is specified, that value is used as the
     |      HTTP status code; otherwise either 301 (permanent) or 302
     |      (temporary) is chosen based on the ``permanent`` argument.
     |      The default is 302 (temporary).
     |  
     |  render(self, template_name, **kwargs)
     |      Renders the template with the given arguments as the response.
     |  
     |  render_embed_css(self, css_embed)
     |      Default method used to render the final embedded css for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_embed_js(self, js_embed)
     |      Default method used to render the final embedded js for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_css(self, css_files)
     |      Default method used to render the final css links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_js(self, js_files)
     |      Default method used to render the final js links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_string(self, template_name, **kwargs)
     |      Generate the given template with the given arguments.
     |      
     |      We return the generated byte string (in utf8). To generate and
     |      write a template as a response, use render() above.
     |  
     |  require_setting(self, name, feature='this feature')
     |      Raises an exception if the given app setting is not defined.
     |  
     |  reverse_url(self, name, *args)
     |      Alias for `Application.reverse_url`.
     |  
     |  send_error(self, status_code=500, **kwargs)
     |      Sends the given HTTP error code to the browser.
     |      
     |      If `flush()` has already been called, it is not possible to send
     |      an error, so this method will simply terminate the response.
     |      If output has been written but not yet flushed, it will be discarded
     |      and replaced with the error page.
     |      
     |      Override `write_error()` to customize the error page that is returned.
     |      Additional keyword arguments are passed through to `write_error`.
     |  
     |  set_cookie(self, name, value, domain=None, expires=None, path='/', expires_days=None, **kwargs)
     |      Sets an outgoing cookie name/value with the given options.
     |      
     |      Newly-set cookies are not immediately visible via `get_cookie`;
     |      they are not present until the next request.
     |      
     |      Additional keyword arguments are set on the cookies.Morsel
     |      directly.
     |      See https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel
     |      for available attributes.
     |  
     |  set_default_headers(self)
     |      Override this to set HTTP headers at the beginning of the request.
     |      
     |      For example, this is the place to set a custom ``Server`` header.
     |      Note that setting such headers in the normal flow of request
     |      processing may not do what you want, since headers may be reset
     |      during error handling.
     |  
     |  set_etag_header(self)
     |      Sets the response's Etag header using ``self.compute_etag()``.
     |      
     |      Note: no header will be set if ``compute_etag()`` returns ``None``.
     |      
     |      This method is called automatically when the request is finished.
     |  
     |  set_header(self, name, value)
     |      Sets the given response header name and value.
     |      
     |      If a datetime is given, we automatically format it according to the
     |      HTTP specification. If the value is not a string, we convert it to
     |      a string. All header values are then encoded as UTF-8.
     |  
     |  set_secure_cookie(self, name, value, expires_days=30, version=None, **kwargs)
     |      Signs and timestamps a cookie so it cannot be forged.
     |      
     |      You must specify the ``cookie_secret`` setting in your Application
     |      to use this method. It should be a long, random sequence of bytes
     |      to be used as the HMAC secret for the signature.
     |      
     |      To read a cookie set with this method, use `get_secure_cookie()`.
     |      
     |      Note that the ``expires_days`` parameter sets the lifetime of the
     |      cookie in the browser, but is independent of the ``max_age_days``
     |      parameter to `get_secure_cookie`.
     |      
     |      Secure cookies may contain arbitrary byte values, not just unicode
     |      strings (unlike regular cookies)
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  set_status(self, status_code, reason=None)
     |      Sets the status code for our response.
     |      
     |      :arg int status_code: Response status code.
     |      :arg str reason: Human-readable reason phrase describing the status
     |          code. If ``None``, it will be filled in from
     |          `http.client.responses` or "Unknown".
     |      
     |      .. versionchanged:: 5.0
     |      
     |         No longer validates that the response code is in
     |         `http.client.responses`.
     |  
     |  static_url(self, path, include_host=None, **kwargs)
     |      Returns a static URL for the given relative static file path.
     |      
     |      This method requires you set the ``static_path`` setting in your
     |      application (which specifies the root directory of your static
     |      files).
     |      
     |      This method returns a versioned url (by default appending
     |      ``?v=<signature>``), which allows the static files to be
     |      cached indefinitely.  This can be disabled by passing
     |      ``include_version=False`` (in the default implementation;
     |      other static file implementations are not required to support
     |      this, but they may support other options).
     |      
     |      By default this method returns URLs relative to the current
     |      host, but if ``include_host`` is true the URL returned will be
     |      absolute.  If this handler has an ``include_host`` attribute,
     |      that value will be used as the default for all `static_url`
     |      calls that do not pass ``include_host`` as a keyword argument.
     |  
     |  write(self, chunk)
     |      Writes the given chunk to the output buffer.
     |      
     |      To write the output to the network, use the flush() method below.
     |      
     |      If the given chunk is a dictionary, we write it as JSON and set
     |      the Content-Type of the response to be ``application/json``.
     |      (if you want to send JSON as a different ``Content-Type``, call
     |      set_header *after* calling write()).
     |      
     |      Note that lists are not converted to JSON because of a potential
     |      cross-site security vulnerability.  All JSON output should be
     |      wrapped in a dictionary.  More details at
     |      http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and
     |      https://github.com/facebook/tornado/issues/1009
     |  
     |  write_error(self, status_code, **kwargs)
     |      Override to implement custom error pages.
     |      
     |      ``write_error`` may call `write`, `render`, `set_header`, etc
     |      to produce output as usual.
     |      
     |      If this error was caused by an uncaught exception (including
     |      HTTPError), an ``exc_info`` triple will be available as
     |      ``kwargs["exc_info"]``.  Note that this exception may not be
     |      the "current" exception for purposes of methods like
     |      ``sys.exc_info()`` or ``traceback.format_exc``.
     |  
     |  xsrf_form_html(self)
     |      An HTML ``<input/>`` element to be included with all POST forms.
     |      
     |      It defines the ``_xsrf`` input value, which we check on all POST
     |      requests to prevent cross-site request forgery. If you have set
     |      the ``xsrf_cookies`` application setting, you must include this
     |      HTML within all of your HTML forms.
     |      
     |      In a template, this method should be called with ``{% module
     |      xsrf_form_html() %}``
     |      
     |      See `check_xsrf_cookie()` above for more information.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RequestHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cookies
     |      An alias for
     |      `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.
     |  
     |  current_user
     |      The authenticated user for this request.
     |      
     |      This is set in one of two ways:
     |      
     |      * A subclass may override `get_current_user()`, which will be called
     |        automatically the first time ``self.current_user`` is accessed.
     |        `get_current_user()` will only be called once per request,
     |        and is cached for future access::
     |      
     |            def get_current_user(self):
     |                user_cookie = self.get_secure_cookie("user")
     |                if user_cookie:
     |                    return json.loads(user_cookie)
     |                return None
     |      
     |      * It may be set as a normal variable, typically from an overridden
     |        `prepare()`::
     |      
     |            @gen.coroutine
     |            def prepare(self):
     |                user_id_cookie = self.get_secure_cookie("user_id")
     |                if user_id_cookie:
     |                    self.current_user = yield load_user(user_id_cookie)
     |      
     |      Note that `prepare()` may be a coroutine while `get_current_user()`
     |      may not, so the latter form is necessary if loading the user requires
     |      asynchronous operations.
     |      
     |      The user object may be any type of the application's choosing.
     |  
     |  locale
     |      The locale for the current session.
     |      
     |      Determined by either `get_user_locale`, which you can override to
     |      set the locale based on, e.g., a user preference stored in a
     |      database, or `get_browser_locale`, which uses the ``Accept-Language``
     |      header.
     |      
     |      .. versionchanged: 4.1
     |         Added a property setter.
     |  
     |  settings
     |      An alias for `self.application.settings <Application.settings>`.
     |  
     |  xsrf_token
     |      The XSRF-prevention token for the current user/session.
     |      
     |      To prevent cross-site request forgery, we set an '_xsrf' cookie
     |      and include the same '_xsrf' value as an argument with all POST
     |      requests. If the two do not match, we reject the form submission
     |      as a potential forgery.
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      This property is of type `bytes`, but it contains only ASCII
     |      characters. If a character string is required, there is no
     |      need to base64-encode it; just decode the byte string as
     |      UTF-8.
     |      
     |      .. versionchanged:: 3.2.2
     |         The xsrf token will now be have a random mask applied in every
     |         request, which makes it safe to include the token in pages
     |         that are compressed.  See http://breachattack.com for more
     |         information on the issue fixed by this change.  Old (version 1)
     |         cookies will be converted to version 2 when this method is called
     |         unless the ``xsrf_cookie_version`` `Application` setting is
     |         set to 1.
     |      
     |      .. versionchanged:: 4.3
     |         The ``xsrf_cookie_kwargs`` `Application` setting may be
     |         used to supply additional cookie options (which will be
     |         passed directly to `set_cookie`). For example,
     |         ``xsrf_cookie_kwargs=dict(httponly=True, secure=True)``
     |         will set the ``secure`` and ``httponly`` flags on the
     |         ``_xsrf`` cookie.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from RequestHandler:
     |  
     |  SUPPORTED_METHODS = ('GET', 'HEAD', 'POST', 'DELETE', 'PATCH', 'PUT', ...
    
    class RequestHandler(builtins.object)
     |  Base class for HTTP request handlers.
     |  
     |  Subclasses must define at least one of the methods defined in the
     |  "Entry points" section below.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, application, request, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_header(self, name, value)
     |      Adds the given response header and value.
     |      
     |      Unlike `set_header`, `add_header` may be called multiple times
     |      to return multiple values for the same header.
     |  
     |  check_etag_header(self)
     |      Checks the ``Etag`` header against requests's ``If-None-Match``.
     |      
     |      Returns ``True`` if the request's Etag matches and a 304 should be
     |      returned. For example::
     |      
     |          self.set_etag_header()
     |          if self.check_etag_header():
     |              self.set_status(304)
     |              return
     |      
     |      This method is called automatically when the request is finished,
     |      but may be called earlier for applications that override
     |      `compute_etag` and want to do an early check for ``If-None-Match``
     |      before completing the request.  The ``Etag`` header should be set
     |      (perhaps with `set_etag_header`) before calling this method.
     |  
     |  check_xsrf_cookie(self)
     |      Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.
     |      
     |      To prevent cross-site request forgery, we set an ``_xsrf``
     |      cookie and include the same value as a non-cookie
     |      field with all ``POST`` requests. If the two do not match, we
     |      reject the form submission as a potential forgery.
     |      
     |      The ``_xsrf`` value may be set as either a form field named ``_xsrf``
     |      or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``
     |      (the latter is accepted for compatibility with Django).
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      Prior to release 1.1.1, this check was ignored if the HTTP header
     |      ``X-Requested-With: XMLHTTPRequest`` was present.  This exception
     |      has been shown to be insecure and has been removed.  For more
     |      information please see
     |      http://www.djangoproject.com/weblog/2011/feb/08/security/
     |      http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails
     |      
     |      .. versionchanged:: 3.2.2
     |         Added support for cookie version 2.  Both versions 1 and 2 are
     |         supported.
     |  
     |  clear(self)
     |      Resets all headers and content for this response.
     |  
     |  clear_all_cookies(self, path='/', domain=None)
     |      Deletes all the cookies the user sent with this request.
     |      
     |      See `clear_cookie` for more information on the path and domain
     |      parameters.
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2
     |      
     |         Added the ``path`` and ``domain`` parameters.
     |  
     |  clear_cookie(self, name, path='/', domain=None)
     |      Deletes the cookie with the given name.
     |      
     |      Due to limitations of the cookie protocol, you must pass the same
     |      path and domain to clear a cookie as were used when that cookie
     |      was set (but there is no way to find out on the server side
     |      which values were used for a given cookie).
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |  
     |  clear_header(self, name)
     |      Clears an outgoing header, undoing a previous `set_header` call.
     |      
     |      Note that this method does not apply to multi-valued headers
     |      set by `add_header`.
     |  
     |  compute_etag(self)
     |      Computes the etag header to be used for this request.
     |      
     |      By default uses a hash of the content written so far.
     |      
     |      May be overridden to provide custom etag implementations,
     |      or may return None to disable tornado's default etag support.
     |  
     |  create_signed_value(self, name, value, version=None)
     |      Signs and timestamps a string so it cannot be forged.
     |      
     |      Normally used via set_secure_cookie, but provided as a separate
     |      method for non-cookie uses.  To decode a value not stored
     |      as a cookie use the optional value argument to get_secure_cookie.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  create_template_loader(self, template_path)
     |      Returns a new template loader for the given path.
     |      
     |      May be overridden by subclasses.  By default returns a
     |      directory-based loader on the given path, using the
     |      ``autoescape`` and ``template_whitespace`` application
     |      settings.  If a ``template_loader`` application setting is
     |      supplied, uses that instead.
     |  
     |  data_received(self, chunk)
     |      Implement this method to handle streamed request data.
     |      
     |      Requires the `.stream_request_body` decorator.
     |  
     |  decode_argument(self, value, name=None)
     |      Decodes an argument from the request.
     |      
     |      The argument has been percent-decoded and is now a byte string.
     |      By default, this method decodes the argument as utf-8 and returns
     |      a unicode string, but this may be overridden in subclasses.
     |      
     |      This method is used as a filter for both `get_argument()` and for
     |      values extracted from the url and passed to `get()`/`post()`/etc.
     |      
     |      The name of the argument is provided if known, but may be None
     |      (e.g. for unnamed groups in the url regex).
     |  
     |  delete(self, *args, **kwargs)
     |  
     |  finish(self, chunk=None)
     |      Finishes this response, ending the HTTP request.
     |  
     |  flush(self, include_footers=False, callback=None)
     |      Flushes the current output buffer to the network.
     |      
     |      The ``callback`` argument, if given, can be used for flow control:
     |      it will be run when all flushed data has been written to the socket.
     |      Note that only one flush callback can be outstanding at a time;
     |      if another flush occurs before the previous flush's callback
     |      has been run, the previous callback will be discarded.
     |      
     |      .. versionchanged:: 4.0
     |         Now returns a `.Future` if no callback is given.
     |  
     |  get(self, *args, **kwargs)
     |  
     |  get_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |  
     |  get_arguments(self, name, strip=True)
     |      Returns a list of the arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |  
     |  get_body_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request body.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_body_arguments(self, name, strip=True)
     |      Returns a list of the body arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_browser_locale(self, default='en_US')
     |      Determines the user's locale from ``Accept-Language`` header.
     |      
     |      See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
     |  
     |  get_cookie(self, name, default=None)
     |      Returns the value of the request cookie with the given name.
     |      
     |      If the named cookie is not present, returns ``default``.
     |      
     |      This method only returns cookies that were present in the request.
     |      It does not see the outgoing cookies set by `set_cookie` in this
     |      handler.
     |  
     |  get_current_user(self)
     |      Override to determine the current user from, e.g., a cookie.
     |      
     |      This method may not be a coroutine.
     |  
     |  get_login_url(self)
     |      Override to customize the login URL based on the request.
     |      
     |      By default, we use the ``login_url`` application setting.
     |  
     |  get_query_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request query string.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_query_arguments(self, name, strip=True)
     |      Returns a list of the query arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_secure_cookie(self, name, value=None, max_age_days=31, min_version=None)
     |      Returns the given signed cookie if it validates, or None.
     |      
     |      The decoded cookie value is returned as a byte string (unlike
     |      `get_cookie`).
     |      
     |      Similar to `get_cookie`, this method only returns cookies that
     |      were present in the request. It does not see outgoing cookies set by
     |      `set_secure_cookie` in this handler.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``min_version`` argument.  Introduced cookie version 2;
     |         both versions 1 and 2 are accepted by default.
     |  
     |  get_secure_cookie_key_version(self, name, value=None)
     |      Returns the signing key version of the secure cookie.
     |      
     |      The version is returned as int.
     |  
     |  get_status(self)
     |      Returns the status code for our response.
     |  
     |  get_template_namespace(self)
     |      Returns a dictionary to be used as the default template namespace.
     |      
     |      May be overridden by subclasses to add or modify values.
     |      
     |      The results of this method will be combined with additional
     |      defaults in the `tornado.template` module and keyword arguments
     |      to `render` or `render_string`.
     |  
     |  get_template_path(self)
     |      Override to customize template path for each handler.
     |      
     |      By default, we use the ``template_path`` application setting.
     |      Return None to load templates relative to the calling file.
     |  
     |  get_user_locale(self)
     |      Override to determine the locale from the authenticated user.
     |      
     |      If None is returned, we fall back to `get_browser_locale()`.
     |      
     |      This method should return a `tornado.locale.Locale` object,
     |      most likely obtained via a call like ``tornado.locale.get("en")``
     |  
     |  head(self, *args, **kwargs)
     |  
     |  initialize(self)
     |      Hook for subclass initialization. Called for each request.
     |      
     |      A dictionary passed as the third argument of a url spec will be
     |      supplied as keyword arguments to initialize().
     |      
     |      Example::
     |      
     |          class ProfileHandler(RequestHandler):
     |              def initialize(self, database):
     |                  self.database = database
     |      
     |              def get(self, username):
     |                  ...
     |      
     |          app = Application([
     |              (r'/user/(.*)', ProfileHandler, dict(database=database)),
     |              ])
     |  
     |  log_exception(self, typ, value, tb)
     |      Override to customize logging of uncaught exceptions.
     |      
     |      By default logs instances of `HTTPError` as warnings without
     |      stack traces (on the ``tornado.general`` logger), and all
     |      other exceptions as errors with stack traces (on the
     |      ``tornado.application`` logger).
     |      
     |      .. versionadded:: 3.1
     |  
     |  on_connection_close(self)
     |      Called in async handlers if the client closed the connection.
     |      
     |      Override this to clean up resources associated with
     |      long-lived connections.  Note that this method is called only if
     |      the connection was closed during asynchronous processing; if you
     |      need to do cleanup after every request override `on_finish`
     |      instead.
     |      
     |      Proxies may keep a connection open for a time (perhaps
     |      indefinitely) after the client has gone away, so this method
     |      may not be called promptly after the end user closes their
     |      connection.
     |  
     |  on_finish(self)
     |      Called after the end of a request.
     |      
     |      Override this method to perform cleanup, logging, etc.
     |      This method is a counterpart to `prepare`.  ``on_finish`` may
     |      not produce any output, as it is called after the response
     |      has been sent to the client.
     |  
     |  options(self, *args, **kwargs)
     |  
     |  patch(self, *args, **kwargs)
     |  
     |  post(self, *args, **kwargs)
     |  
     |  prepare(self)
     |      Called at the beginning of a request before  `get`/`post`/etc.
     |      
     |      Override this method to perform common initialization regardless
     |      of the request method.
     |      
     |      Asynchronous support: Decorate this method with `.gen.coroutine`
     |      or `.return_future` to make it asynchronous (the
     |      `asynchronous` decorator cannot be used on `prepare`).
     |      If this method returns a `.Future` execution will not proceed
     |      until the `.Future` is done.
     |      
     |      .. versionadded:: 3.1
     |         Asynchronous support.
     |  
     |  put(self, *args, **kwargs)
     |  
     |  redirect(self, url, permanent=False, status=None)
     |      Sends a redirect to the given (optionally relative) URL.
     |      
     |      If the ``status`` argument is specified, that value is used as the
     |      HTTP status code; otherwise either 301 (permanent) or 302
     |      (temporary) is chosen based on the ``permanent`` argument.
     |      The default is 302 (temporary).
     |  
     |  render(self, template_name, **kwargs)
     |      Renders the template with the given arguments as the response.
     |  
     |  render_embed_css(self, css_embed)
     |      Default method used to render the final embedded css for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_embed_js(self, js_embed)
     |      Default method used to render the final embedded js for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_css(self, css_files)
     |      Default method used to render the final css links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_js(self, js_files)
     |      Default method used to render the final js links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_string(self, template_name, **kwargs)
     |      Generate the given template with the given arguments.
     |      
     |      We return the generated byte string (in utf8). To generate and
     |      write a template as a response, use render() above.
     |  
     |  require_setting(self, name, feature='this feature')
     |      Raises an exception if the given app setting is not defined.
     |  
     |  reverse_url(self, name, *args)
     |      Alias for `Application.reverse_url`.
     |  
     |  send_error(self, status_code=500, **kwargs)
     |      Sends the given HTTP error code to the browser.
     |      
     |      If `flush()` has already been called, it is not possible to send
     |      an error, so this method will simply terminate the response.
     |      If output has been written but not yet flushed, it will be discarded
     |      and replaced with the error page.
     |      
     |      Override `write_error()` to customize the error page that is returned.
     |      Additional keyword arguments are passed through to `write_error`.
     |  
     |  set_cookie(self, name, value, domain=None, expires=None, path='/', expires_days=None, **kwargs)
     |      Sets an outgoing cookie name/value with the given options.
     |      
     |      Newly-set cookies are not immediately visible via `get_cookie`;
     |      they are not present until the next request.
     |      
     |      Additional keyword arguments are set on the cookies.Morsel
     |      directly.
     |      See https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel
     |      for available attributes.
     |  
     |  set_default_headers(self)
     |      Override this to set HTTP headers at the beginning of the request.
     |      
     |      For example, this is the place to set a custom ``Server`` header.
     |      Note that setting such headers in the normal flow of request
     |      processing may not do what you want, since headers may be reset
     |      during error handling.
     |  
     |  set_etag_header(self)
     |      Sets the response's Etag header using ``self.compute_etag()``.
     |      
     |      Note: no header will be set if ``compute_etag()`` returns ``None``.
     |      
     |      This method is called automatically when the request is finished.
     |  
     |  set_header(self, name, value)
     |      Sets the given response header name and value.
     |      
     |      If a datetime is given, we automatically format it according to the
     |      HTTP specification. If the value is not a string, we convert it to
     |      a string. All header values are then encoded as UTF-8.
     |  
     |  set_secure_cookie(self, name, value, expires_days=30, version=None, **kwargs)
     |      Signs and timestamps a cookie so it cannot be forged.
     |      
     |      You must specify the ``cookie_secret`` setting in your Application
     |      to use this method. It should be a long, random sequence of bytes
     |      to be used as the HMAC secret for the signature.
     |      
     |      To read a cookie set with this method, use `get_secure_cookie()`.
     |      
     |      Note that the ``expires_days`` parameter sets the lifetime of the
     |      cookie in the browser, but is independent of the ``max_age_days``
     |      parameter to `get_secure_cookie`.
     |      
     |      Secure cookies may contain arbitrary byte values, not just unicode
     |      strings (unlike regular cookies)
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  set_status(self, status_code, reason=None)
     |      Sets the status code for our response.
     |      
     |      :arg int status_code: Response status code.
     |      :arg str reason: Human-readable reason phrase describing the status
     |          code. If ``None``, it will be filled in from
     |          `http.client.responses` or "Unknown".
     |      
     |      .. versionchanged:: 5.0
     |      
     |         No longer validates that the response code is in
     |         `http.client.responses`.
     |  
     |  static_url(self, path, include_host=None, **kwargs)
     |      Returns a static URL for the given relative static file path.
     |      
     |      This method requires you set the ``static_path`` setting in your
     |      application (which specifies the root directory of your static
     |      files).
     |      
     |      This method returns a versioned url (by default appending
     |      ``?v=<signature>``), which allows the static files to be
     |      cached indefinitely.  This can be disabled by passing
     |      ``include_version=False`` (in the default implementation;
     |      other static file implementations are not required to support
     |      this, but they may support other options).
     |      
     |      By default this method returns URLs relative to the current
     |      host, but if ``include_host`` is true the URL returned will be
     |      absolute.  If this handler has an ``include_host`` attribute,
     |      that value will be used as the default for all `static_url`
     |      calls that do not pass ``include_host`` as a keyword argument.
     |  
     |  write(self, chunk)
     |      Writes the given chunk to the output buffer.
     |      
     |      To write the output to the network, use the flush() method below.
     |      
     |      If the given chunk is a dictionary, we write it as JSON and set
     |      the Content-Type of the response to be ``application/json``.
     |      (if you want to send JSON as a different ``Content-Type``, call
     |      set_header *after* calling write()).
     |      
     |      Note that lists are not converted to JSON because of a potential
     |      cross-site security vulnerability.  All JSON output should be
     |      wrapped in a dictionary.  More details at
     |      http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and
     |      https://github.com/facebook/tornado/issues/1009
     |  
     |  write_error(self, status_code, **kwargs)
     |      Override to implement custom error pages.
     |      
     |      ``write_error`` may call `write`, `render`, `set_header`, etc
     |      to produce output as usual.
     |      
     |      If this error was caused by an uncaught exception (including
     |      HTTPError), an ``exc_info`` triple will be available as
     |      ``kwargs["exc_info"]``.  Note that this exception may not be
     |      the "current" exception for purposes of methods like
     |      ``sys.exc_info()`` or ``traceback.format_exc``.
     |  
     |  xsrf_form_html(self)
     |      An HTML ``<input/>`` element to be included with all POST forms.
     |      
     |      It defines the ``_xsrf`` input value, which we check on all POST
     |      requests to prevent cross-site request forgery. If you have set
     |      the ``xsrf_cookies`` application setting, you must include this
     |      HTML within all of your HTML forms.
     |      
     |      In a template, this method should be called with ``{% module
     |      xsrf_form_html() %}``
     |      
     |      See `check_xsrf_cookie()` above for more information.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cookies
     |      An alias for
     |      `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.
     |  
     |  current_user
     |      The authenticated user for this request.
     |      
     |      This is set in one of two ways:
     |      
     |      * A subclass may override `get_current_user()`, which will be called
     |        automatically the first time ``self.current_user`` is accessed.
     |        `get_current_user()` will only be called once per request,
     |        and is cached for future access::
     |      
     |            def get_current_user(self):
     |                user_cookie = self.get_secure_cookie("user")
     |                if user_cookie:
     |                    return json.loads(user_cookie)
     |                return None
     |      
     |      * It may be set as a normal variable, typically from an overridden
     |        `prepare()`::
     |      
     |            @gen.coroutine
     |            def prepare(self):
     |                user_id_cookie = self.get_secure_cookie("user_id")
     |                if user_id_cookie:
     |                    self.current_user = yield load_user(user_id_cookie)
     |      
     |      Note that `prepare()` may be a coroutine while `get_current_user()`
     |      may not, so the latter form is necessary if loading the user requires
     |      asynchronous operations.
     |      
     |      The user object may be any type of the application's choosing.
     |  
     |  locale
     |      The locale for the current session.
     |      
     |      Determined by either `get_user_locale`, which you can override to
     |      set the locale based on, e.g., a user preference stored in a
     |      database, or `get_browser_locale`, which uses the ``Accept-Language``
     |      header.
     |      
     |      .. versionchanged: 4.1
     |         Added a property setter.
     |  
     |  settings
     |      An alias for `self.application.settings <Application.settings>`.
     |  
     |  xsrf_token
     |      The XSRF-prevention token for the current user/session.
     |      
     |      To prevent cross-site request forgery, we set an '_xsrf' cookie
     |      and include the same '_xsrf' value as an argument with all POST
     |      requests. If the two do not match, we reject the form submission
     |      as a potential forgery.
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      This property is of type `bytes`, but it contains only ASCII
     |      characters. If a character string is required, there is no
     |      need to base64-encode it; just decode the byte string as
     |      UTF-8.
     |      
     |      .. versionchanged:: 3.2.2
     |         The xsrf token will now be have a random mask applied in every
     |         request, which makes it safe to include the token in pages
     |         that are compressed.  See http://breachattack.com for more
     |         information on the issue fixed by this change.  Old (version 1)
     |         cookies will be converted to version 2 when this method is called
     |         unless the ``xsrf_cookie_version`` `Application` setting is
     |         set to 1.
     |      
     |      .. versionchanged:: 4.3
     |         The ``xsrf_cookie_kwargs`` `Application` setting may be
     |         used to supply additional cookie options (which will be
     |         passed directly to `set_cookie`). For example,
     |         ``xsrf_cookie_kwargs=dict(httponly=True, secure=True)``
     |         will set the ``secure`` and ``httponly`` flags on the
     |         ``_xsrf`` cookie.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  SUPPORTED_METHODS = ('GET', 'HEAD', 'POST', 'DELETE', 'PATCH', 'PUT', ...
    
    class StaticFileHandler(RequestHandler)
     |  A simple handler that can serve static content from a directory.
     |  
     |  A `StaticFileHandler` is configured automatically if you pass the
     |  ``static_path`` keyword argument to `Application`.  This handler
     |  can be customized with the ``static_url_prefix``, ``static_handler_class``,
     |  and ``static_handler_args`` settings.
     |  
     |  To map an additional path to this handler for a static data directory
     |  you would add a line to your application like::
     |  
     |      application = web.Application([
     |          (r"/content/(.*)", web.StaticFileHandler, {"path": "/var/www"}),
     |      ])
     |  
     |  The handler constructor requires a ``path`` argument, which specifies the
     |  local root directory of the content to be served.
     |  
     |  Note that a capture group in the regex is required to parse the value for
     |  the ``path`` argument to the get() method (different than the constructor
     |  argument above); see `URLSpec` for details.
     |  
     |  To serve a file like ``index.html`` automatically when a directory is
     |  requested, set ``static_handler_args=dict(default_filename="index.html")``
     |  in your application settings, or add ``default_filename`` as an initializer
     |  argument for your ``StaticFileHandler``.
     |  
     |  To maximize the effectiveness of browser caching, this class supports
     |  versioned urls (by default using the argument ``?v=``).  If a version
     |  is given, we instruct the browser to cache this file indefinitely.
     |  `make_static_url` (also available as `RequestHandler.static_url`) can
     |  be used to construct a versioned url.
     |  
     |  This handler is intended primarily for use in development and light-duty
     |  file serving; for heavy traffic it will be more efficient to use
     |  a dedicated static file server (such as nginx or Apache).  We support
     |  the HTTP ``Accept-Ranges`` mechanism to return partial content (because
     |  some browsers require this functionality to be present to seek in
     |  HTML5 audio or video).
     |  
     |  **Subclassing notes**
     |  
     |  This class is designed to be extensible by subclassing, but because
     |  of the way static urls are generated with class methods rather than
     |  instance methods, the inheritance patterns are somewhat unusual.
     |  Be sure to use the ``@classmethod`` decorator when overriding a
     |  class method.  Instance methods may use the attributes ``self.path``
     |  ``self.absolute_path``, and ``self.modified``.
     |  
     |  Subclasses should only override methods discussed in this section;
     |  overriding other methods is error-prone.  Overriding
     |  ``StaticFileHandler.get`` is particularly problematic due to the
     |  tight coupling with ``compute_etag`` and other methods.
     |  
     |  To change the way static urls are generated (e.g. to match the behavior
     |  of another server or CDN), override `make_static_url`, `parse_url_path`,
     |  `get_cache_time`, and/or `get_version`.
     |  
     |  To replace all interaction with the filesystem (e.g. to serve
     |  static content from a database), override `get_content`,
     |  `get_content_size`, `get_modified_time`, `get_absolute_path`, and
     |  `validate_absolute_path`.
     |  
     |  .. versionchanged:: 3.1
     |     Many of the methods for subclasses were added in Tornado 3.1.
     |  
     |  Method resolution order:
     |      StaticFileHandler
     |      RequestHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  compute_etag(self)
     |      Sets the ``Etag`` header based on static url version.
     |      
     |      This allows efficient ``If-None-Match`` checks against cached
     |      versions, and sends the correct ``Etag`` for a partial response
     |      (i.e. the same ``Etag`` as the full file).
     |      
     |      .. versionadded:: 3.1
     |  
     |  get(self, path, include_body=True)
     |  
     |  get_cache_time(self, path, modified, mime_type)
     |      Override to customize cache control behavior.
     |      
     |      Return a positive number of seconds to make the result
     |      cacheable for that amount of time or 0 to mark resource as
     |      cacheable for an unspecified amount of time (subject to
     |      browser heuristics).
     |      
     |      By default returns cache expiry of 10 years for resources requested
     |      with ``v`` argument.
     |  
     |  get_content_size(self)
     |      Retrieve the total size of the resource at the given path.
     |      
     |      This method may be overridden by subclasses.
     |      
     |      .. versionadded:: 3.1
     |      
     |      .. versionchanged:: 4.0
     |         This method is now always called, instead of only when
     |         partial results are requested.
     |  
     |  get_content_type(self)
     |      Returns the ``Content-Type`` header to be used for this request.
     |      
     |      .. versionadded:: 3.1
     |  
     |  get_modified_time(self)
     |      Returns the time that ``self.absolute_path`` was last modified.
     |      
     |      May be overridden in subclasses.  Should return a `~datetime.datetime`
     |      object or None.
     |      
     |      .. versionadded:: 3.1
     |  
     |  head(self, path)
     |  
     |  initialize(self, path, default_filename=None)
     |      Hook for subclass initialization. Called for each request.
     |      
     |      A dictionary passed as the third argument of a url spec will be
     |      supplied as keyword arguments to initialize().
     |      
     |      Example::
     |      
     |          class ProfileHandler(RequestHandler):
     |              def initialize(self, database):
     |                  self.database = database
     |      
     |              def get(self, username):
     |                  ...
     |      
     |          app = Application([
     |              (r'/user/(.*)', ProfileHandler, dict(database=database)),
     |              ])
     |  
     |  parse_url_path(self, url_path)
     |      Converts a static URL path into a filesystem path.
     |      
     |      ``url_path`` is the path component of the URL with
     |      ``static_url_prefix`` removed.  The return value should be
     |      filesystem path relative to ``static_path``.
     |      
     |      This is the inverse of `make_static_url`.
     |  
     |  set_extra_headers(self, path)
     |      For subclass to add extra headers to the response
     |  
     |  set_headers(self)
     |      Sets the content and caching headers on the response.
     |      
     |      .. versionadded:: 3.1
     |  
     |  should_return_304(self)
     |      Returns True if the headers indicate that we should return 304.
     |      
     |      .. versionadded:: 3.1
     |  
     |  validate_absolute_path(self, root, absolute_path)
     |      Validate and return the absolute path.
     |      
     |      ``root`` is the configured path for the `StaticFileHandler`,
     |      and ``path`` is the result of `get_absolute_path`
     |      
     |      This is an instance method called during request processing,
     |      so it may raise `HTTPError` or use methods like
     |      `RequestHandler.redirect` (return None after redirecting to
     |      halt further processing).  This is where 404 errors for missing files
     |      are generated.
     |      
     |      This method may modify the path before returning it, but note that
     |      any such modifications will not be understood by `make_static_url`.
     |      
     |      In instance methods, this method's result is available as
     |      ``self.absolute_path``.
     |      
     |      .. versionadded:: 3.1
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  get_absolute_path(root, path) from builtins.type
     |      Returns the absolute location of ``path`` relative to ``root``.
     |      
     |      ``root`` is the path configured for this `StaticFileHandler`
     |      (in most cases the ``static_path`` `Application` setting).
     |      
     |      This class method may be overridden in subclasses.  By default
     |      it returns a filesystem path, but other strings may be used
     |      as long as they are unique and understood by the subclass's
     |      overridden `get_content`.
     |      
     |      .. versionadded:: 3.1
     |  
     |  get_content(abspath, start=None, end=None) from builtins.type
     |      Retrieve the content of the requested resource which is located
     |      at the given absolute path.
     |      
     |      This class method may be overridden by subclasses.  Note that its
     |      signature is different from other overridable class methods
     |      (no ``settings`` argument); this is deliberate to ensure that
     |      ``abspath`` is able to stand on its own as a cache key.
     |      
     |      This method should either return a byte string or an iterator
     |      of byte strings.  The latter is preferred for large files
     |      as it helps reduce memory fragmentation.
     |      
     |      .. versionadded:: 3.1
     |  
     |  get_content_version(abspath) from builtins.type
     |      Returns a version string for the resource at the given path.
     |      
     |      This class method may be overridden by subclasses.  The
     |      default implementation is a hash of the file's contents.
     |      
     |      .. versionadded:: 3.1
     |  
     |  get_version(settings, path) from builtins.type
     |      Generate the version string to be used in static URLs.
     |      
     |      ``settings`` is the `Application.settings` dictionary and ``path``
     |      is the relative location of the requested asset on the filesystem.
     |      The returned value should be a string, or ``None`` if no version
     |      could be determined.
     |      
     |      .. versionchanged:: 3.1
     |         This method was previously recommended for subclasses to override;
     |         `get_content_version` is now preferred as it allows the base
     |         class to handle caching of the result.
     |  
     |  make_static_url(settings, path, include_version=True) from builtins.type
     |      Constructs a versioned url for the given path.
     |      
     |      This method may be overridden in subclasses (but note that it
     |      is a class method rather than an instance method).  Subclasses
     |      are only required to implement the signature
     |      ``make_static_url(cls, settings, path)``; other keyword
     |      arguments may be passed through `~RequestHandler.static_url`
     |      but are not standard.
     |      
     |      ``settings`` is the `Application.settings` dictionary.  ``path``
     |      is the static path being requested.  The url returned should be
     |      relative to the current host.
     |      
     |      ``include_version`` determines whether the generated URL should
     |      include the query string containing the version hash of the
     |      file corresponding to the given ``path``.
     |  
     |  reset() from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CACHE_MAX_AGE = 315360000
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from RequestHandler:
     |  
     |  __init__(self, application, request, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_header(self, name, value)
     |      Adds the given response header and value.
     |      
     |      Unlike `set_header`, `add_header` may be called multiple times
     |      to return multiple values for the same header.
     |  
     |  check_etag_header(self)
     |      Checks the ``Etag`` header against requests's ``If-None-Match``.
     |      
     |      Returns ``True`` if the request's Etag matches and a 304 should be
     |      returned. For example::
     |      
     |          self.set_etag_header()
     |          if self.check_etag_header():
     |              self.set_status(304)
     |              return
     |      
     |      This method is called automatically when the request is finished,
     |      but may be called earlier for applications that override
     |      `compute_etag` and want to do an early check for ``If-None-Match``
     |      before completing the request.  The ``Etag`` header should be set
     |      (perhaps with `set_etag_header`) before calling this method.
     |  
     |  check_xsrf_cookie(self)
     |      Verifies that the ``_xsrf`` cookie matches the ``_xsrf`` argument.
     |      
     |      To prevent cross-site request forgery, we set an ``_xsrf``
     |      cookie and include the same value as a non-cookie
     |      field with all ``POST`` requests. If the two do not match, we
     |      reject the form submission as a potential forgery.
     |      
     |      The ``_xsrf`` value may be set as either a form field named ``_xsrf``
     |      or in a custom HTTP header named ``X-XSRFToken`` or ``X-CSRFToken``
     |      (the latter is accepted for compatibility with Django).
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      Prior to release 1.1.1, this check was ignored if the HTTP header
     |      ``X-Requested-With: XMLHTTPRequest`` was present.  This exception
     |      has been shown to be insecure and has been removed.  For more
     |      information please see
     |      http://www.djangoproject.com/weblog/2011/feb/08/security/
     |      http://weblog.rubyonrails.org/2011/2/8/csrf-protection-bypass-in-ruby-on-rails
     |      
     |      .. versionchanged:: 3.2.2
     |         Added support for cookie version 2.  Both versions 1 and 2 are
     |         supported.
     |  
     |  clear(self)
     |      Resets all headers and content for this response.
     |  
     |  clear_all_cookies(self, path='/', domain=None)
     |      Deletes all the cookies the user sent with this request.
     |      
     |      See `clear_cookie` for more information on the path and domain
     |      parameters.
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2
     |      
     |         Added the ``path`` and ``domain`` parameters.
     |  
     |  clear_cookie(self, name, path='/', domain=None)
     |      Deletes the cookie with the given name.
     |      
     |      Due to limitations of the cookie protocol, you must pass the same
     |      path and domain to clear a cookie as were used when that cookie
     |      was set (but there is no way to find out on the server side
     |      which values were used for a given cookie).
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |  
     |  clear_header(self, name)
     |      Clears an outgoing header, undoing a previous `set_header` call.
     |      
     |      Note that this method does not apply to multi-valued headers
     |      set by `add_header`.
     |  
     |  create_signed_value(self, name, value, version=None)
     |      Signs and timestamps a string so it cannot be forged.
     |      
     |      Normally used via set_secure_cookie, but provided as a separate
     |      method for non-cookie uses.  To decode a value not stored
     |      as a cookie use the optional value argument to get_secure_cookie.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  create_template_loader(self, template_path)
     |      Returns a new template loader for the given path.
     |      
     |      May be overridden by subclasses.  By default returns a
     |      directory-based loader on the given path, using the
     |      ``autoescape`` and ``template_whitespace`` application
     |      settings.  If a ``template_loader`` application setting is
     |      supplied, uses that instead.
     |  
     |  data_received(self, chunk)
     |      Implement this method to handle streamed request data.
     |      
     |      Requires the `.stream_request_body` decorator.
     |  
     |  decode_argument(self, value, name=None)
     |      Decodes an argument from the request.
     |      
     |      The argument has been percent-decoded and is now a byte string.
     |      By default, this method decodes the argument as utf-8 and returns
     |      a unicode string, but this may be overridden in subclasses.
     |      
     |      This method is used as a filter for both `get_argument()` and for
     |      values extracted from the url and passed to `get()`/`post()`/etc.
     |      
     |      The name of the argument is provided if known, but may be None
     |      (e.g. for unnamed groups in the url regex).
     |  
     |  delete(self, *args, **kwargs)
     |  
     |  finish(self, chunk=None)
     |      Finishes this response, ending the HTTP request.
     |  
     |  flush(self, include_footers=False, callback=None)
     |      Flushes the current output buffer to the network.
     |      
     |      The ``callback`` argument, if given, can be used for flow control:
     |      it will be run when all flushed data has been written to the socket.
     |      Note that only one flush callback can be outstanding at a time;
     |      if another flush occurs before the previous flush's callback
     |      has been run, the previous callback will be discarded.
     |      
     |      .. versionchanged:: 4.0
     |         Now returns a `.Future` if no callback is given.
     |  
     |  get_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |  
     |  get_arguments(self, name, strip=True)
     |      Returns a list of the arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |  
     |  get_body_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request body.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_body_arguments(self, name, strip=True)
     |      Returns a list of the body arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_browser_locale(self, default='en_US')
     |      Determines the user's locale from ``Accept-Language`` header.
     |      
     |      See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4
     |  
     |  get_cookie(self, name, default=None)
     |      Returns the value of the request cookie with the given name.
     |      
     |      If the named cookie is not present, returns ``default``.
     |      
     |      This method only returns cookies that were present in the request.
     |      It does not see the outgoing cookies set by `set_cookie` in this
     |      handler.
     |  
     |  get_current_user(self)
     |      Override to determine the current user from, e.g., a cookie.
     |      
     |      This method may not be a coroutine.
     |  
     |  get_login_url(self)
     |      Override to customize the login URL based on the request.
     |      
     |      By default, we use the ``login_url`` application setting.
     |  
     |  get_query_argument(self, name, default=<object object at 0x10834c450>, strip=True)
     |      Returns the value of the argument with the given name
     |      from the request query string.
     |      
     |      If default is not provided, the argument is considered to be
     |      required, and we raise a `MissingArgumentError` if it is missing.
     |      
     |      If the argument appears in the url more than once, we return the
     |      last value.
     |      
     |      The returned value is always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_query_arguments(self, name, strip=True)
     |      Returns a list of the query arguments with the given name.
     |      
     |      If the argument is not present, returns an empty list.
     |      
     |      The returned values are always unicode.
     |      
     |      .. versionadded:: 3.2
     |  
     |  get_secure_cookie(self, name, value=None, max_age_days=31, min_version=None)
     |      Returns the given signed cookie if it validates, or None.
     |      
     |      The decoded cookie value is returned as a byte string (unlike
     |      `get_cookie`).
     |      
     |      Similar to `get_cookie`, this method only returns cookies that
     |      were present in the request. It does not see outgoing cookies set by
     |      `set_secure_cookie` in this handler.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``min_version`` argument.  Introduced cookie version 2;
     |         both versions 1 and 2 are accepted by default.
     |  
     |  get_secure_cookie_key_version(self, name, value=None)
     |      Returns the signing key version of the secure cookie.
     |      
     |      The version is returned as int.
     |  
     |  get_status(self)
     |      Returns the status code for our response.
     |  
     |  get_template_namespace(self)
     |      Returns a dictionary to be used as the default template namespace.
     |      
     |      May be overridden by subclasses to add or modify values.
     |      
     |      The results of this method will be combined with additional
     |      defaults in the `tornado.template` module and keyword arguments
     |      to `render` or `render_string`.
     |  
     |  get_template_path(self)
     |      Override to customize template path for each handler.
     |      
     |      By default, we use the ``template_path`` application setting.
     |      Return None to load templates relative to the calling file.
     |  
     |  get_user_locale(self)
     |      Override to determine the locale from the authenticated user.
     |      
     |      If None is returned, we fall back to `get_browser_locale()`.
     |      
     |      This method should return a `tornado.locale.Locale` object,
     |      most likely obtained via a call like ``tornado.locale.get("en")``
     |  
     |  log_exception(self, typ, value, tb)
     |      Override to customize logging of uncaught exceptions.
     |      
     |      By default logs instances of `HTTPError` as warnings without
     |      stack traces (on the ``tornado.general`` logger), and all
     |      other exceptions as errors with stack traces (on the
     |      ``tornado.application`` logger).
     |      
     |      .. versionadded:: 3.1
     |  
     |  on_connection_close(self)
     |      Called in async handlers if the client closed the connection.
     |      
     |      Override this to clean up resources associated with
     |      long-lived connections.  Note that this method is called only if
     |      the connection was closed during asynchronous processing; if you
     |      need to do cleanup after every request override `on_finish`
     |      instead.
     |      
     |      Proxies may keep a connection open for a time (perhaps
     |      indefinitely) after the client has gone away, so this method
     |      may not be called promptly after the end user closes their
     |      connection.
     |  
     |  on_finish(self)
     |      Called after the end of a request.
     |      
     |      Override this method to perform cleanup, logging, etc.
     |      This method is a counterpart to `prepare`.  ``on_finish`` may
     |      not produce any output, as it is called after the response
     |      has been sent to the client.
     |  
     |  options(self, *args, **kwargs)
     |  
     |  patch(self, *args, **kwargs)
     |  
     |  post(self, *args, **kwargs)
     |  
     |  prepare(self)
     |      Called at the beginning of a request before  `get`/`post`/etc.
     |      
     |      Override this method to perform common initialization regardless
     |      of the request method.
     |      
     |      Asynchronous support: Decorate this method with `.gen.coroutine`
     |      or `.return_future` to make it asynchronous (the
     |      `asynchronous` decorator cannot be used on `prepare`).
     |      If this method returns a `.Future` execution will not proceed
     |      until the `.Future` is done.
     |      
     |      .. versionadded:: 3.1
     |         Asynchronous support.
     |  
     |  put(self, *args, **kwargs)
     |  
     |  redirect(self, url, permanent=False, status=None)
     |      Sends a redirect to the given (optionally relative) URL.
     |      
     |      If the ``status`` argument is specified, that value is used as the
     |      HTTP status code; otherwise either 301 (permanent) or 302
     |      (temporary) is chosen based on the ``permanent`` argument.
     |      The default is 302 (temporary).
     |  
     |  render(self, template_name, **kwargs)
     |      Renders the template with the given arguments as the response.
     |  
     |  render_embed_css(self, css_embed)
     |      Default method used to render the final embedded css for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_embed_js(self, js_embed)
     |      Default method used to render the final embedded js for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_css(self, css_files)
     |      Default method used to render the final css links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_linked_js(self, js_files)
     |      Default method used to render the final js links for the
     |      rendered webpage.
     |      
     |      Override this method in a sub-classed controller to change the output.
     |  
     |  render_string(self, template_name, **kwargs)
     |      Generate the given template with the given arguments.
     |      
     |      We return the generated byte string (in utf8). To generate and
     |      write a template as a response, use render() above.
     |  
     |  require_setting(self, name, feature='this feature')
     |      Raises an exception if the given app setting is not defined.
     |  
     |  reverse_url(self, name, *args)
     |      Alias for `Application.reverse_url`.
     |  
     |  send_error(self, status_code=500, **kwargs)
     |      Sends the given HTTP error code to the browser.
     |      
     |      If `flush()` has already been called, it is not possible to send
     |      an error, so this method will simply terminate the response.
     |      If output has been written but not yet flushed, it will be discarded
     |      and replaced with the error page.
     |      
     |      Override `write_error()` to customize the error page that is returned.
     |      Additional keyword arguments are passed through to `write_error`.
     |  
     |  set_cookie(self, name, value, domain=None, expires=None, path='/', expires_days=None, **kwargs)
     |      Sets an outgoing cookie name/value with the given options.
     |      
     |      Newly-set cookies are not immediately visible via `get_cookie`;
     |      they are not present until the next request.
     |      
     |      Additional keyword arguments are set on the cookies.Morsel
     |      directly.
     |      See https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel
     |      for available attributes.
     |  
     |  set_default_headers(self)
     |      Override this to set HTTP headers at the beginning of the request.
     |      
     |      For example, this is the place to set a custom ``Server`` header.
     |      Note that setting such headers in the normal flow of request
     |      processing may not do what you want, since headers may be reset
     |      during error handling.
     |  
     |  set_etag_header(self)
     |      Sets the response's Etag header using ``self.compute_etag()``.
     |      
     |      Note: no header will be set if ``compute_etag()`` returns ``None``.
     |      
     |      This method is called automatically when the request is finished.
     |  
     |  set_header(self, name, value)
     |      Sets the given response header name and value.
     |      
     |      If a datetime is given, we automatically format it according to the
     |      HTTP specification. If the value is not a string, we convert it to
     |      a string. All header values are then encoded as UTF-8.
     |  
     |  set_secure_cookie(self, name, value, expires_days=30, version=None, **kwargs)
     |      Signs and timestamps a cookie so it cannot be forged.
     |      
     |      You must specify the ``cookie_secret`` setting in your Application
     |      to use this method. It should be a long, random sequence of bytes
     |      to be used as the HMAC secret for the signature.
     |      
     |      To read a cookie set with this method, use `get_secure_cookie()`.
     |      
     |      Note that the ``expires_days`` parameter sets the lifetime of the
     |      cookie in the browser, but is independent of the ``max_age_days``
     |      parameter to `get_secure_cookie`.
     |      
     |      Secure cookies may contain arbitrary byte values, not just unicode
     |      strings (unlike regular cookies)
     |      
     |      Similar to `set_cookie`, the effect of this method will not be
     |      seen until the following request.
     |      
     |      .. versionchanged:: 3.2.1
     |      
     |         Added the ``version`` argument.  Introduced cookie version 2
     |         and made it the default.
     |  
     |  set_status(self, status_code, reason=None)
     |      Sets the status code for our response.
     |      
     |      :arg int status_code: Response status code.
     |      :arg str reason: Human-readable reason phrase describing the status
     |          code. If ``None``, it will be filled in from
     |          `http.client.responses` or "Unknown".
     |      
     |      .. versionchanged:: 5.0
     |      
     |         No longer validates that the response code is in
     |         `http.client.responses`.
     |  
     |  static_url(self, path, include_host=None, **kwargs)
     |      Returns a static URL for the given relative static file path.
     |      
     |      This method requires you set the ``static_path`` setting in your
     |      application (which specifies the root directory of your static
     |      files).
     |      
     |      This method returns a versioned url (by default appending
     |      ``?v=<signature>``), which allows the static files to be
     |      cached indefinitely.  This can be disabled by passing
     |      ``include_version=False`` (in the default implementation;
     |      other static file implementations are not required to support
     |      this, but they may support other options).
     |      
     |      By default this method returns URLs relative to the current
     |      host, but if ``include_host`` is true the URL returned will be
     |      absolute.  If this handler has an ``include_host`` attribute,
     |      that value will be used as the default for all `static_url`
     |      calls that do not pass ``include_host`` as a keyword argument.
     |  
     |  write(self, chunk)
     |      Writes the given chunk to the output buffer.
     |      
     |      To write the output to the network, use the flush() method below.
     |      
     |      If the given chunk is a dictionary, we write it as JSON and set
     |      the Content-Type of the response to be ``application/json``.
     |      (if you want to send JSON as a different ``Content-Type``, call
     |      set_header *after* calling write()).
     |      
     |      Note that lists are not converted to JSON because of a potential
     |      cross-site security vulnerability.  All JSON output should be
     |      wrapped in a dictionary.  More details at
     |      http://haacked.com/archive/2009/06/25/json-hijacking.aspx/ and
     |      https://github.com/facebook/tornado/issues/1009
     |  
     |  write_error(self, status_code, **kwargs)
     |      Override to implement custom error pages.
     |      
     |      ``write_error`` may call `write`, `render`, `set_header`, etc
     |      to produce output as usual.
     |      
     |      If this error was caused by an uncaught exception (including
     |      HTTPError), an ``exc_info`` triple will be available as
     |      ``kwargs["exc_info"]``.  Note that this exception may not be
     |      the "current" exception for purposes of methods like
     |      ``sys.exc_info()`` or ``traceback.format_exc``.
     |  
     |  xsrf_form_html(self)
     |      An HTML ``<input/>`` element to be included with all POST forms.
     |      
     |      It defines the ``_xsrf`` input value, which we check on all POST
     |      requests to prevent cross-site request forgery. If you have set
     |      the ``xsrf_cookies`` application setting, you must include this
     |      HTML within all of your HTML forms.
     |      
     |      In a template, this method should be called with ``{% module
     |      xsrf_form_html() %}``
     |      
     |      See `check_xsrf_cookie()` above for more information.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from RequestHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cookies
     |      An alias for
     |      `self.request.cookies <.httputil.HTTPServerRequest.cookies>`.
     |  
     |  current_user
     |      The authenticated user for this request.
     |      
     |      This is set in one of two ways:
     |      
     |      * A subclass may override `get_current_user()`, which will be called
     |        automatically the first time ``self.current_user`` is accessed.
     |        `get_current_user()` will only be called once per request,
     |        and is cached for future access::
     |      
     |            def get_current_user(self):
     |                user_cookie = self.get_secure_cookie("user")
     |                if user_cookie:
     |                    return json.loads(user_cookie)
     |                return None
     |      
     |      * It may be set as a normal variable, typically from an overridden
     |        `prepare()`::
     |      
     |            @gen.coroutine
     |            def prepare(self):
     |                user_id_cookie = self.get_secure_cookie("user_id")
     |                if user_id_cookie:
     |                    self.current_user = yield load_user(user_id_cookie)
     |      
     |      Note that `prepare()` may be a coroutine while `get_current_user()`
     |      may not, so the latter form is necessary if loading the user requires
     |      asynchronous operations.
     |      
     |      The user object may be any type of the application's choosing.
     |  
     |  locale
     |      The locale for the current session.
     |      
     |      Determined by either `get_user_locale`, which you can override to
     |      set the locale based on, e.g., a user preference stored in a
     |      database, or `get_browser_locale`, which uses the ``Accept-Language``
     |      header.
     |      
     |      .. versionchanged: 4.1
     |         Added a property setter.
     |  
     |  settings
     |      An alias for `self.application.settings <Application.settings>`.
     |  
     |  xsrf_token
     |      The XSRF-prevention token for the current user/session.
     |      
     |      To prevent cross-site request forgery, we set an '_xsrf' cookie
     |      and include the same '_xsrf' value as an argument with all POST
     |      requests. If the two do not match, we reject the form submission
     |      as a potential forgery.
     |      
     |      See http://en.wikipedia.org/wiki/Cross-site_request_forgery
     |      
     |      This property is of type `bytes`, but it contains only ASCII
     |      characters. If a character string is required, there is no
     |      need to base64-encode it; just decode the byte string as
     |      UTF-8.
     |      
     |      .. versionchanged:: 3.2.2
     |         The xsrf token will now be have a random mask applied in every
     |         request, which makes it safe to include the token in pages
     |         that are compressed.  See http://breachattack.com for more
     |         information on the issue fixed by this change.  Old (version 1)
     |         cookies will be converted to version 2 when this method is called
     |         unless the ``xsrf_cookie_version`` `Application` setting is
     |         set to 1.
     |      
     |      .. versionchanged:: 4.3
     |         The ``xsrf_cookie_kwargs`` `Application` setting may be
     |         used to supply additional cookie options (which will be
     |         passed directly to `set_cookie`). For example,
     |         ``xsrf_cookie_kwargs=dict(httponly=True, secure=True)``
     |         will set the ``secure`` and ``httponly`` flags on the
     |         ``_xsrf`` cookie.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from RequestHandler:
     |  
     |  SUPPORTED_METHODS = ('GET', 'HEAD', 'POST', 'DELETE', 'PATCH', 'PUT', ...
    
    class TemplateModule(UIModule)
     |  UIModule that simply renders the given template.
     |  
     |  {% module Template("foo.html") %} is similar to {% include "foo.html" %},
     |  but the module version gets its own namespace (with kwargs passed to
     |  Template()) instead of inheriting the outer template's namespace.
     |  
     |  Templates rendered through this module also get access to UIModule's
     |  automatic javascript/css features.  Simply call set_resources
     |  inside the template and give it keyword arguments corresponding to
     |  the methods on UIModule: {{ set_resources(js_files=static_url("my.js")) }}
     |  Note that these resources are output once per template file, not once
     |  per instantiation of the template, so they must not depend on
     |  any arguments to the template.
     |  
     |  Method resolution order:
     |      TemplateModule
     |      UIModule
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, handler)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  css_files(self)
     |      Override to returns a list of CSS files required by this module.
     |      
     |      If the return values are relative paths, they will be passed to
     |      `RequestHandler.static_url`; otherwise they will be used as-is.
     |  
     |  embedded_css(self)
     |      Override to return a CSS string
     |      that will be embedded in the page.
     |  
     |  embedded_javascript(self)
     |      Override to return a JavaScript string
     |      to be embedded in the page.
     |  
     |  html_body(self)
     |      Override to return an HTML string that will be put at the end of
     |      the <body/> element.
     |  
     |  html_head(self)
     |      Override to return an HTML string that will be put in the <head/>
     |      element.
     |  
     |  javascript_files(self)
     |      Override to return a list of JavaScript files needed by this module.
     |      
     |      If the return values are relative paths, they will be passed to
     |      `RequestHandler.static_url`; otherwise they will be used as-is.
     |  
     |  render(self, path, **kwargs)
     |      Override in subclasses to return this module's output.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UIModule:
     |  
     |  render_string(self, path, **kwargs)
     |      Renders a template and returns it as a string.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from UIModule:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  current_user
    
    class UIModule(builtins.object)
     |  A re-usable, modular UI unit on a page.
     |  
     |  UI modules often execute additional queries, and they can include
     |  additional CSS and JavaScript that will be included in the output
     |  page, which is automatically inserted on page render.
     |  
     |  Subclasses of UIModule must override the `render` method.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, handler)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  css_files(self)
     |      Override to returns a list of CSS files required by this module.
     |      
     |      If the return values are relative paths, they will be passed to
     |      `RequestHandler.static_url`; otherwise they will be used as-is.
     |  
     |  embedded_css(self)
     |      Override to return a CSS string
     |      that will be embedded in the page.
     |  
     |  embedded_javascript(self)
     |      Override to return a JavaScript string
     |      to be embedded in the page.
     |  
     |  html_body(self)
     |      Override to return an HTML string that will be put at the end of
     |      the <body/> element.
     |  
     |  html_head(self)
     |      Override to return an HTML string that will be put in the <head/>
     |      element.
     |  
     |  javascript_files(self)
     |      Override to return a list of JavaScript files needed by this module.
     |      
     |      If the return values are relative paths, they will be passed to
     |      `RequestHandler.static_url`; otherwise they will be used as-is.
     |  
     |  render(self, *args, **kwargs)
     |      Override in subclasses to return this module's output.
     |  
     |  render_string(self, path, **kwargs)
     |      Renders a template and returns it as a string.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  current_user

FUNCTIONS
    addslash(method)
        Use this decorator to add a missing trailing slash to the request path.
        
        For example, a request to ``/foo`` would redirect to ``/foo/`` with this
        decorator. Your request handler mapping should use a regular expression
        like ``r'/foo/?'`` in conjunction with using the decorator.
    
    asynchronous(method)
        Wrap request handler methods with this if they are asynchronous.
        
        This decorator is for callback-style asynchronous methods; for
        coroutines, use the ``@gen.coroutine`` decorator without
        ``@asynchronous``. (It is legal for legacy reasons to use the two
        decorators together provided ``@asynchronous`` is first, but
        ``@asynchronous`` will be ignored in this case)
        
        This decorator should only be applied to the :ref:`HTTP verb
        methods <verbs>`; its behavior is undefined for any other method.
        This decorator does not *make* a method asynchronous; it tells
        the framework that the method *is* asynchronous.  For this decorator
        to be useful the method must (at least sometimes) do something
        asynchronous.
        
        If this decorator is given, the response is not finished when the
        method returns. It is up to the request handler to call
        `self.finish() <RequestHandler.finish>` to finish the HTTP
        request. Without this decorator, the request is automatically
        finished when the ``get()`` or ``post()`` method returns. Example:
        
        .. testcode::
        
           class MyRequestHandler(RequestHandler):
               @asynchronous
               def get(self):
                  http = httpclient.AsyncHTTPClient()
                  http.fetch("http://friendfeed.com/", self._on_download)
        
               def _on_download(self, response):
                  self.write("Downloaded!")
                  self.finish()
        
        .. testoutput::
           :hide:
        
        .. versionchanged:: 3.1
           The ability to use ``@gen.coroutine`` without ``@asynchronous``.
        
        .. versionchanged:: 4.3 Returning anything but ``None`` or a
           yieldable object from a method decorated with ``@asynchronous``
           is an error. Such return values were previously ignored silently.
    
    authenticated(method)
        Decorate methods with this to require that the user be logged in.
        
        If the user is not logged in, they will be redirected to the configured
        `login url <RequestHandler.get_login_url>`.
        
        If you configure a login url with a query parameter, Tornado will
        assume you know what you're doing and use it as-is.  If not, it
        will add a `next` parameter so the login page knows where to send
        you once you're logged in.
    
    create_signed_value(secret, name, value, version=None, clock=None, key_version=None)
    
    decode_signed_value(secret, name, value, max_age_days=31, clock=None, min_version=None)
    
    get_signature_key_version(value)
    
    is_absolute(path)
    
    removeslash(method)
        Use this decorator to remove trailing slashes from the request path.
        
        For example, a request to ``/foo/`` would redirect to ``/foo`` with this
        decorator. Your request handler mapping should use a regular expression
        like ``r'/foo/*'`` in conjunction with using the decorator.
    
    stream_request_body(cls)
        Apply to `RequestHandler` subclasses to enable streaming body support.
        
        This decorator implies the following changes:
        
        * `.HTTPServerRequest.body` is undefined, and body arguments will not
          be included in `RequestHandler.get_argument`.
        * `RequestHandler.prepare` is called when the request headers have been
          read instead of after the entire body has been read.
        * The subclass must define a method ``data_received(self, data):``, which
          will be called zero or more times as data is available.  Note that
          if the request has an empty body, ``data_received`` may not be called.
        * ``prepare`` and ``data_received`` may return Futures (such as via
          ``@gen.coroutine``, in which case the next method will not be called
          until those futures have completed.
        * The regular HTTP method (``post``, ``put``, etc) will be called after
          the entire body has been read.
        
        See the `file receiver demo <https://github.com/tornadoweb/tornado/tree/master/demos/file_upload/>`_
        for example usage.

DATA
    DEFAULT_SIGNED_VALUE_MIN_VERSION = 1
    DEFAULT_SIGNED_VALUE_VERSION = 2
    MAX_SUPPORTED_SIGNED_VALUE_VERSION = 2
    MIN_SUPPORTED_SIGNED_VALUE_VERSION = 1
    PY3 = True
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    access_log = <Logger tornado.access (WARNING)>
    app_log = <Logger tornado.application (WARNING)>
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192...
    gen_log = <Logger tornado.general (WARNING)>
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...

FILE
    /usr/local/lib/python3.6/site-packages/tornado/web.py


