Help on module pytest:

NAME
    pytest - pytest: unit and functional testing with Python.

SUBMODULES
    collect

CLASSES
    _pytest.nodes.FSCollector(_pytest.nodes.Collector)
        _pytest.main.Session
        _pytest.nodes.File
            _pytest.python.Module(_pytest.nodes.File, _pytest.python.PyCollector)
    _pytest.nodes.Node(builtins.object)
        _pytest.nodes.Collector
        _pytest.nodes.Item
            _pytest.python.Function(_pytest.python.FunctionMixin, _pytest.nodes.Item, _pytest.compat.FuncargnamesCompatAttr)
    _pytest.python.FunctionMixin(_pytest.python.PyobjMixin)
        _pytest.python.Function(_pytest.python.FunctionMixin, _pytest.nodes.Item, _pytest.compat.FuncargnamesCompatAttr)
        _pytest.python.Generator(_pytest.python.FunctionMixin, _pytest.python.PyCollector)
    _pytest.python.PyCollector(_pytest.python.PyobjMixin, _pytest.nodes.Collector)
        _pytest.python.Class
        _pytest.python.Generator(_pytest.python.FunctionMixin, _pytest.python.PyCollector)
        _pytest.python.Instance
    builtins.Exception(builtins.BaseException)
        _pytest.config.exceptions.UsageError
    builtins.object
        _pytest.config.cmdline
    
    class Class(PyCollector)
     |  Collector for test methods.
     |  
     |  Method resolution order:
     |      Class
     |      PyCollector
     |      PyobjMixin
     |      PyobjContext
     |      _pytest.nodes.Collector
     |      _pytest.nodes.Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  setup(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyCollector:
     |  
     |  classnamefilter(self, name)
     |  
     |  funcnamefilter(self, name)
     |  
     |  isnosetest(self, obj)
     |      Look for the __test__ attribute, which is applied by the
     |      @nose.tools.istest decorator
     |  
     |  istestclass(self, obj, name)
     |  
     |  istestfunction(self, obj, name)
     |  
     |  makeitem(self, name, obj)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyobjMixin:
     |  
     |  __init__(self, *k, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  getmodpath(self, stopatmodule=True, includemodule=False)
     |      return python path relative to the containing module.
     |  
     |  reportinfo(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjMixin:
     |  
     |  obj
     |      underlying python object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjContext:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cls
     |      python class object this node was collected from (can be None).
     |  
     |  instance
     |      python instance object this node was collected from (can be None).
     |  
     |  module
     |      python module object this node was collected from (can be None).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Collector:
     |  
     |  repr_failure(self, excinfo)
     |      represent a collection failure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _pytest.nodes.Collector:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Node:
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class Collector(Node)
     |  Collector instances create children through collect()
     |  and thus iteratively build a tree.
     |  
     |  Method resolution order:
     |      Collector
     |      Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  repr_failure(self, excinfo)
     |      represent a collection failure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, name, parent=None, config=None, session=None, fspath=None, nodeid=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  setup(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Node:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class File(FSCollector)
     |  base class for collecting tests from a file.
     |  
     |  Method resolution order:
     |      File
     |      FSCollector
     |      Collector
     |      Node
     |      builtins.object
     |  
     |  Methods inherited from FSCollector:
     |  
     |  __init__(self, fspath, parent=None, config=None, session=None, nodeid=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Collector:
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  repr_failure(self, excinfo)
     |      represent a collection failure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Collector:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  setup(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Node:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class Function(FunctionMixin, _pytest.nodes.Item, _pytest.compat.FuncargnamesCompatAttr)
     |  a Function Item is responsible for setting up and executing a
     |  Python test function.
     |  
     |  Method resolution order:
     |      Function
     |      FunctionMixin
     |      PyobjMixin
     |      PyobjContext
     |      _pytest.nodes.Item
     |      _pytest.nodes.Node
     |      _pytest.compat.FuncargnamesCompatAttr
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, parent, args=None, config=None, callspec=None, callobj=<object object at 0x10d982270>, keywords=None, session=None, fixtureinfo=None, originalname=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  runtest(self)
     |      execute the underlying test function.
     |  
     |  setup(self)
     |      perform setup for this test function.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  function
     |      underlying python 'function' object
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from FunctionMixin:
     |  
     |  repr_failure(self, excinfo, outerr=None)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyobjMixin:
     |  
     |  getmodpath(self, stopatmodule=True, includemodule=False)
     |      return python path relative to the containing module.
     |  
     |  reportinfo(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjMixin:
     |  
     |  obj
     |      underlying python object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjContext:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cls
     |      python class object this node was collected from (can be None).
     |  
     |  instance
     |      python instance object this node was collected from (can be None).
     |  
     |  module
     |      python module object this node was collected from (can be None).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Item:
     |  
     |  add_report_section(self, when, key, content)
     |      Adds a new report section, similar to what's done internally to add stdout and
     |      stderr captured output::
     |      
     |          item.add_report_section("call", "stdout", "report section contents")
     |      
     |      :param str when:
     |          One of the possible capture states, ``"setup"``, ``"call"``, ``"teardown"``.
     |      :param str key:
     |          Name of the section, can be customized at will. Pytest uses ``"stdout"`` and
     |          ``"stderr"`` internally.
     |      
     |      :param str content:
     |          The full contents as a string.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Item:
     |  
     |  location
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _pytest.nodes.Item:
     |  
     |  nextitem = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Node:
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.compat.FuncargnamesCompatAttr:
     |  
     |  funcargnames
     |      alias attribute for ``fixturenames`` for pre-2.3 compatibility
    
    class Generator(FunctionMixin, PyCollector)
     |  mixin for the code common to Function and Generator.
     |  
     |  Method resolution order:
     |      Generator
     |      FunctionMixin
     |      PyCollector
     |      PyobjMixin
     |      PyobjContext
     |      _pytest.nodes.Collector
     |      _pytest.nodes.Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  getcallargs(self, obj)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from FunctionMixin:
     |  
     |  repr_failure(self, excinfo, outerr=None)
     |  
     |  setup(self)
     |      perform setup for this test function.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyCollector:
     |  
     |  classnamefilter(self, name)
     |  
     |  funcnamefilter(self, name)
     |  
     |  isnosetest(self, obj)
     |      Look for the __test__ attribute, which is applied by the
     |      @nose.tools.istest decorator
     |  
     |  istestclass(self, obj, name)
     |  
     |  istestfunction(self, obj, name)
     |  
     |  makeitem(self, name, obj)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyobjMixin:
     |  
     |  __init__(self, *k, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  getmodpath(self, stopatmodule=True, includemodule=False)
     |      return python path relative to the containing module.
     |  
     |  reportinfo(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjMixin:
     |  
     |  obj
     |      underlying python object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjContext:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cls
     |      python class object this node was collected from (can be None).
     |  
     |  instance
     |      python instance object this node was collected from (can be None).
     |  
     |  module
     |      python module object this node was collected from (can be None).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _pytest.nodes.Collector:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Node:
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class Instance(PyCollector)
     |  Collector instances create children through collect()
     |  and thus iteratively build a tree.
     |  
     |  Method resolution order:
     |      Instance
     |      PyCollector
     |      PyobjMixin
     |      PyobjContext
     |      _pytest.nodes.Collector
     |      _pytest.nodes.Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  newinstance(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyCollector:
     |  
     |  classnamefilter(self, name)
     |  
     |  funcnamefilter(self, name)
     |  
     |  isnosetest(self, obj)
     |      Look for the __test__ attribute, which is applied by the
     |      @nose.tools.istest decorator
     |  
     |  istestclass(self, obj, name)
     |  
     |  istestfunction(self, obj, name)
     |  
     |  makeitem(self, name, obj)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyobjMixin:
     |  
     |  __init__(self, *k, **kw)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  getmodpath(self, stopatmodule=True, includemodule=False)
     |      return python path relative to the containing module.
     |  
     |  reportinfo(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjMixin:
     |  
     |  obj
     |      underlying python object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjContext:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cls
     |      python class object this node was collected from (can be None).
     |  
     |  instance
     |      python instance object this node was collected from (can be None).
     |  
     |  module
     |      python module object this node was collected from (can be None).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Collector:
     |  
     |  repr_failure(self, excinfo)
     |      represent a collection failure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _pytest.nodes.Collector:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  setup(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Node:
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class Item(Node)
     |  a basic test invocation item. Note that for a single function
     |  there might be multiple test invocation items.
     |  
     |  Method resolution order:
     |      Item
     |      Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, parent=None, config=None, session=None, nodeid=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  add_report_section(self, when, key, content)
     |      Adds a new report section, similar to what's done internally to add stdout and
     |      stderr captured output::
     |      
     |          item.add_report_section("call", "stdout", "report section contents")
     |      
     |      :param str when:
     |          One of the possible capture states, ``"setup"``, ``"call"``, ``"teardown"``.
     |      :param str key:
     |          Name of the section, can be customized at will. Pytest uses ``"stdout"`` and
     |          ``"stderr"`` internally.
     |      
     |      :param str content:
     |          The full contents as a string.
     |  
     |  reportinfo(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  location
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  nextitem = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  repr_failure = _repr_failure_py(self, excinfo, style=None)
     |  
     |  setup(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Node:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class Module(_pytest.nodes.File, PyCollector)
     |  Collector for test classes and functions.
     |  
     |  Method resolution order:
     |      Module
     |      _pytest.nodes.File
     |      _pytest.nodes.FSCollector
     |      PyCollector
     |      PyobjMixin
     |      PyobjContext
     |      _pytest.nodes.Collector
     |      _pytest.nodes.Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  setup(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.FSCollector:
     |  
     |  __init__(self, fspath, parent=None, config=None, session=None, nodeid=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyCollector:
     |  
     |  classnamefilter(self, name)
     |  
     |  funcnamefilter(self, name)
     |  
     |  isnosetest(self, obj)
     |      Look for the __test__ attribute, which is applied by the
     |      @nose.tools.istest decorator
     |  
     |  istestclass(self, obj, name)
     |  
     |  istestfunction(self, obj, name)
     |  
     |  makeitem(self, name, obj)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from PyobjMixin:
     |  
     |  getmodpath(self, stopatmodule=True, includemodule=False)
     |      return python path relative to the containing module.
     |  
     |  reportinfo(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjMixin:
     |  
     |  obj
     |      underlying python object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from PyobjContext:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  cls
     |      python class object this node was collected from (can be None).
     |  
     |  instance
     |      python instance object this node was collected from (can be None).
     |  
     |  module
     |      python module object this node was collected from (can be None).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Collector:
     |  
     |  repr_failure(self, excinfo)
     |      represent a collection failure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _pytest.nodes.Collector:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Node:
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class Session(_pytest.nodes.FSCollector)
     |  Collector instances create children through collect()
     |  and thus iteratively build a tree.
     |  
     |  Method resolution order:
     |      Session
     |      _pytest.nodes.FSCollector
     |      _pytest.nodes.Collector
     |      _pytest.nodes.Node
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, config)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  collect(self)
     |      returns a list of children (items and collectors)
     |      for this collection node.
     |  
     |  genitems(self, node)
     |  
     |  gethookproxy(self, fspath)
     |  
     |  isinitpath(self, path)
     |  
     |  matchnodes(self, matching, names)
     |  
     |  perform_collect(self, args=None, genitems=True)
     |  
     |  pytest_collectreport = pytest_runtest_logreport(self, report)
     |  
     |  pytest_collectstart(self)
     |  
     |  pytest_runtest_logreport(self, report)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Failed = <class '_pytest.main.Failed'>
     |      signals a stop as failed test run.
     |  
     |  Interrupted = <class 'Interrupted'>
     |      signals an interrupted test run.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Collector:
     |  
     |  repr_failure(self, excinfo)
     |      represent a collection failure.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _pytest.nodes.Collector:
     |  
     |  CollectError = <class '_pytest.nodes.Collector.CollectError'>
     |      an error during collection, contains a custom message.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _pytest.nodes.Node:
     |  
     |  Class = _CompatProperty(name='Class')
     |  File = _CompatProperty(name='File')
     |  Function = _CompatProperty(name='Function')
     |  Instance = _CompatProperty(name='Instance')
     |  Item = _CompatProperty(name='Item')
     |  Module = _CompatProperty(name='Module')
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add_marker(self, marker)
     |      dynamically add a marker object to the node.
     |      
     |      :type marker: str or pytest.mark.*
     |  
     |  addfinalizer(self, fin)
     |      register a function to be called when this node is finalized.
     |      
     |      This method can only be called when this node is active
     |      in a setup chain, for example during self.setup().
     |  
     |  get_closest_marker(self, name, default=None)
     |      return the first marker matching the name, from closest (for example function) to farther level (for example
     |      module level).
     |      
     |      :param default: fallback return value of no marker was found
     |      :param name: name to filter by
     |  
     |  get_marker(self, name)
     |      get a marker object from this node or None if
     |      the node doesn't have a marker with that name.
     |      
     |      .. deprecated:: 3.6
     |          This function has been deprecated in favor of
     |          :meth:`Node.get_closest_marker <_pytest.nodes.Node.get_closest_marker>` and
     |          :meth:`Node.iter_markers <_pytest.nodes.Node.iter_markers>`, see :ref:`update marker code`
     |          for more details.
     |  
     |  getparent(self, cls)
     |      get the next parent node (including ourself)
     |      which is an instance of the given class
     |  
     |  iter_markers(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |  
     |  iter_markers_with_node(self, name=None)
     |      :param name: if given, filter the results by the name attribute
     |      
     |      iterate over all markers of the node
     |      returns sequence of tuples (node, mark)
     |  
     |  listchain(self)
     |      return list of all parent collectors up to self,
     |      starting from root of collection tree.
     |  
     |  listextrakeywords(self)
     |      Return a set of all extra keywords in self and any parents.
     |  
     |  listnames(self)
     |  
     |  setup(self)
     |  
     |  teardown(self)
     |  
     |  warn(self, code, message)
     |      generate a warning with the given code and message for this
     |      item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _pytest.nodes.Node:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ihook
     |      fspath sensitive hook proxy used to call pytest hooks
     |  
     |  nodeid
     |      a ::-separated string denoting its collection tree address.
    
    class UsageError(builtins.Exception)
     |  error in pytest usage or invocation
     |  
     |  Method resolution order:
     |      UsageError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class cmdline(builtins.object)
     |  Static methods defined here:
     |  
     |  main(args=None, plugins=None)
     |      return exit code, after performing an in-process test run.
     |      
     |      :arg args: list of command line arguments.
     |      
     |      :arg plugins: list of plugin objects to be auto-registered during
     |                    initialization.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    _fillfuncargs = fillfixtures(function)
        fill missing funcargs for a test function.
    
    approx(expected, rel=None, abs=None, nan_ok=False)
        Assert that two numbers (or two sets of numbers) are equal to each other
        within some tolerance.
        
        Due to the `intricacies of floating-point arithmetic`__, numbers that we
        would intuitively expect to be equal are not always so::
        
            >>> 0.1 + 0.2 == 0.3
            False
        
        __ https://docs.python.org/3/tutorial/floatingpoint.html
        
        This problem is commonly encountered when writing tests, e.g. when making
        sure that floating-point values are what you expect them to be.  One way to
        deal with this problem is to assert that two floating-point numbers are
        equal to within some appropriate tolerance::
        
            >>> abs((0.1 + 0.2) - 0.3) < 1e-6
            True
        
        However, comparisons like this are tedious to write and difficult to
        understand.  Furthermore, absolute comparisons like the one above are
        usually discouraged because there's no tolerance that works well for all
        situations.  ``1e-6`` is good for numbers around ``1``, but too small for
        very big numbers and too big for very small ones.  It's better to express
        the tolerance as a fraction of the expected value, but relative comparisons
        like that are even more difficult to write correctly and concisely.
        
        The ``approx`` class performs floating-point comparisons using a syntax
        that's as intuitive as possible::
        
            >>> from pytest import approx
            >>> 0.1 + 0.2 == approx(0.3)
            True
        
        The same syntax also works for sequences of numbers::
        
            >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))
            True
        
        Dictionary *values*::
        
            >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})
            True
        
        ``numpy`` arrays::
        
            >>> import numpy as np                                                          # doctest: +SKIP
            >>> np.array([0.1, 0.2]) + np.array([0.2, 0.4]) == approx(np.array([0.3, 0.6])) # doctest: +SKIP
            True
        
        And for a ``numpy`` array against a scalar::
        
            >>> import numpy as np                                         # doctest: +SKIP
            >>> np.array([0.1, 0.2]) + np.array([0.2, 0.1]) == approx(0.3) # doctest: +SKIP
            True
        
        By default, ``approx`` considers numbers within a relative tolerance of
        ``1e-6`` (i.e. one part in a million) of its expected value to be equal.
        This treatment would lead to surprising results if the expected value was
        ``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``.
        To handle this case less surprisingly, ``approx`` also considers numbers
        within an absolute tolerance of ``1e-12`` of its expected value to be
        equal.  Infinity and NaN are special cases.  Infinity is only considered
        equal to itself, regardless of the relative tolerance.  NaN is not
        considered equal to anything by default, but you can make it be equal to
        itself by setting the ``nan_ok`` argument to True.  (This is meant to
        facilitate comparing arrays that use NaN to mean "no data".)
        
        Both the relative and absolute tolerances can be changed by passing
        arguments to the ``approx`` constructor::
        
            >>> 1.0001 == approx(1)
            False
            >>> 1.0001 == approx(1, rel=1e-3)
            True
            >>> 1.0001 == approx(1, abs=1e-3)
            True
        
        If you specify ``abs`` but not ``rel``, the comparison will not consider
        the relative tolerance at all.  In other words, two numbers that are within
        the default relative tolerance of ``1e-6`` will still be considered unequal
        if they exceed the specified absolute tolerance.  If you specify both
        ``abs`` and ``rel``, the numbers will be considered equal if either
        tolerance is met::
        
            >>> 1 + 1e-8 == approx(1)
            True
            >>> 1 + 1e-8 == approx(1, abs=1e-12)
            False
            >>> 1 + 1e-8 == approx(1, rel=1e-6, abs=1e-12)
            True
        
        If you're thinking about using ``approx``, then you might want to know how
        it compares to other good ways of comparing floating-point numbers.  All of
        these algorithms are based on relative and absolute tolerances and should
        agree for the most part, but they do have meaningful differences:
        
        - ``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative
          tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute
          tolerance is met.  Because the relative tolerance is calculated w.r.t.
          both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor
          ``b`` is a "reference value").  You have to specify an absolute tolerance
          if you want to compare to ``0.0`` because there is no tolerance by
          default.  Only available in python>=3.5.  `More information...`__
        
          __ https://docs.python.org/3/library/math.html#math.isclose
        
        - ``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference
          between ``a`` and ``b`` is less that the sum of the relative tolerance
          w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance
          is only calculated w.r.t. ``b``, this test is asymmetric and you can
          think of ``b`` as the reference value.  Support for comparing sequences
          is provided by ``numpy.allclose``.  `More information...`__
        
          __ http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.isclose.html
        
        - ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``
          are within an absolute tolerance of ``1e-7``.  No relative tolerance is
          considered and the absolute tolerance cannot be changed, so this function
          is not appropriate for very large or very small numbers.  Also, it's only
          available in subclasses of ``unittest.TestCase`` and it's ugly because it
          doesn't follow PEP8.  `More information...`__
        
          __ https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual
        
        - ``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative
          tolerance is met w.r.t. ``b`` or if the absolute tolerance is met.
          Because the relative tolerance is only calculated w.r.t. ``b``, this test
          is asymmetric and you can think of ``b`` as the reference value.  In the
          special case that you explicitly specify an absolute tolerance but not a
          relative tolerance, only the absolute tolerance is considered.
        
        .. warning::
        
           .. versionchanged:: 3.2
        
           In order to avoid inconsistent behavior, ``TypeError`` is
           raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons.
           The example below illustrates the problem::
        
               assert approx(0.1) > 0.1 + 1e-10  # calls approx(0.1).__gt__(0.1 + 1e-10)
               assert 0.1 + 1e-10 > approx(0.1)  # calls approx(0.1).__lt__(0.1 + 1e-10)
        
           In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)``
           to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to
           comparison. This is because the call hierarchy of rich comparisons
           follows a fixed behavior. `More information...`__
        
           __ https://docs.python.org/3/reference/datamodel.html#object.__ge__
    
    deprecated_call(func=None, *args, **kwargs)
        context manager that can be used to ensure a block of code triggers a
        ``DeprecationWarning`` or ``PendingDeprecationWarning``::
        
            >>> import warnings
            >>> def api_call_v2():
            ...     warnings.warn('use v3 of this api', DeprecationWarning)
            ...     return 200
        
            >>> with deprecated_call():
            ...    assert api_call_v2() == 200
        
        ``deprecated_call`` can also be used by passing a function and ``*args`` and ``*kwargs``,
        in which case it will ensure calling ``func(*args, **kwargs)`` produces one of the warnings
        types above.
    
    exit(msg)
        exit testing process as if KeyboardInterrupt was triggered.
    
    fail(msg='', pytrace=True)
        explicitly fail a currently-executing test with the given Message.
        
        :arg pytrace: if false the msg represents the full failure information
                      and no python traceback will be reported.
    
    fixture(scope='function', params=None, autouse=False, ids=None, name=None)
        Decorator to mark a fixture factory function.
        
        This decorator can be used (with or without parameters) to define a
        fixture function.  The name of the fixture function can later be
        referenced to cause its invocation ahead of running tests: test
        modules or classes can use the pytest.mark.usefixtures(fixturename)
        marker.  Test functions can directly use fixture names as input
        arguments in which case the fixture instance returned from the fixture
        function will be injected.
        
        :arg scope: the scope for which this fixture is shared, one of
                    "function" (default), "class", "module" or "session".
        
        :arg params: an optional list of parameters which will cause multiple
                    invocations of the fixture function and all of the tests
                    using it.
        
        :arg autouse: if True, the fixture func is activated for all tests that
                    can see it.  If False (the default) then an explicit
                    reference is needed to activate the fixture.
        
        :arg ids: list of string ids each corresponding to the params
                    so that they are part of the test id. If no ids are provided
                    they will be generated automatically from the params.
        
        :arg name: the name of the fixture. This defaults to the name of the
                    decorated function. If a fixture is used in the same module in
                    which it is defined, the function name of the fixture will be
                    shadowed by the function arg that requests the fixture; one way
                    to resolve this is to name the decorated function
                    ``fixture_<fixturename>`` and then use
                    ``@pytest.fixture(name='<fixturename>')``.
        
        Fixtures can optionally provide their values to test functions using a ``yield`` statement,
        instead of ``return``. In this case, the code block after the ``yield`` statement is executed
        as teardown code regardless of the test outcome. A fixture function must yield exactly once.
    
    freeze_includes()
        Returns a list of module names used by pytest that should be
        included by cx_freeze.
    
    importorskip(modname, minversion=None)
        return imported module if it has at least "minversion" as its
        __version__ attribute.  If no minversion is specified the a skip
        is only triggered if the module can not be imported.
    
    main(args=None, plugins=None)
        return exit code, after performing an in-process test run.
        
        :arg args: list of command line arguments.
        
        :arg plugins: list of plugin objects to be auto-registered during
                      initialization.
    
    param(*values, **kw)
        Specify a parameter in `pytest.mark.parametrize`_ calls or
        :ref:`parametrized fixtures <fixture-parametrize-marks>`.
        
        .. code-block:: python
        
            @pytest.mark.parametrize("test_input,expected", [
                ("3+5", 8),
                pytest.param("6*9", 42, marks=pytest.mark.xfail),
            ])
            def test_eval(test_input, expected):
                assert eval(test_input) == expected
        
        :param values: variable args of the values of the parameter set, in order.
        :keyword marks: a single mark or a list of marks to be applied to this parameter set.
        :keyword str id: the id to attribute to this parameter set.
    
    raises(expected_exception, *args, **kwargs)
        Assert that a code block/function call raises ``expected_exception``
        and raise a failure exception otherwise.
        
        :arg message: if specified, provides a custom failure message if the
            exception is not raised
        :arg match: if specified, asserts that the exception matches a text or regex
        
        This helper produces a ``ExceptionInfo()`` object (see below).
        
        You may use this function as a context manager::
        
            >>> with raises(ZeroDivisionError):
            ...    1/0
        
        .. versionchanged:: 2.10
        
        In the context manager form you may use the keyword argument
        ``message`` to specify a custom failure message::
        
            >>> with raises(ZeroDivisionError, message="Expecting ZeroDivisionError"):
            ...    pass
            Traceback (most recent call last):
              ...
            Failed: Expecting ZeroDivisionError
        
        .. note::
        
           When using ``pytest.raises`` as a context manager, it's worthwhile to
           note that normal context manager rules apply and that the exception
           raised *must* be the final line in the scope of the context manager.
           Lines of code after that, within the scope of the context manager will
           not be executed. For example::
        
               >>> value = 15
               >>> with raises(ValueError) as exc_info:
               ...     if value > 10:
               ...         raise ValueError("value must be <= 10")
               ...     assert exc_info.type == ValueError  # this will not execute
        
           Instead, the following approach must be taken (note the difference in
           scope)::
        
               >>> with raises(ValueError) as exc_info:
               ...     if value > 10:
               ...         raise ValueError("value must be <= 10")
               ...
               >>> assert exc_info.type == ValueError
        
        
        Since version ``3.1`` you can use the keyword argument ``match`` to assert that the
        exception matches a text or regex::
        
            >>> with raises(ValueError, match='must be 0 or None'):
            ...     raise ValueError("value must be 0 or None")
        
            >>> with raises(ValueError, match=r'must be \d+$'):
            ...     raise ValueError("value must be 42")
        
        **Legacy forms**
        
        The forms below are fully supported but are discouraged for new code because the
        context manager form is regarded as more readable and less error-prone.
        
        It is possible to specify a callable by passing a to-be-called lambda::
        
            >>> raises(ZeroDivisionError, lambda: 1/0)
            <ExceptionInfo ...>
        
        or you can specify an arbitrary callable with arguments::
        
            >>> def f(x): return 1/x
            ...
            >>> raises(ZeroDivisionError, f, 0)
            <ExceptionInfo ...>
            >>> raises(ZeroDivisionError, f, x=0)
            <ExceptionInfo ...>
        
        It is also possible to pass a string to be evaluated at runtime::
        
            >>> raises(ZeroDivisionError, "f(0)")
            <ExceptionInfo ...>
        
        The string will be evaluated using the same ``locals()`` and ``globals()``
        at the moment of the ``raises`` call.
        
        .. currentmodule:: _pytest._code
        
        Consult the API of ``excinfo`` objects: :class:`ExceptionInfo`.
        
        .. note::
            Similar to caught exception objects in Python, explicitly clearing
            local references to returned ``ExceptionInfo`` objects can
            help the Python interpreter speed up its garbage collection.
        
            Clearing those references breaks a reference cycle
            (``ExceptionInfo`` --> caught exception --> frame stack raising
            the exception --> current frame stack --> local variables -->
            ``ExceptionInfo``) which makes Python keep all objects referenced
            from that cycle (including all local variables in the current
            frame) alive until the next cyclic garbage collection run. See the
            official Python ``try`` statement documentation for more detailed
            information.
    
    register_assert_rewrite(*names)
        Register one or more module names to be rewritten on import.
        
        This function will make sure that this module or all modules inside
        the package will get their assert statements rewritten.
        Thus you should make sure to call this before the module is
        actually imported, usually in your __init__.py if you are a plugin
        using a package.
        
        :raise TypeError: if the given module names are not strings.
    
    set_trace() method of builtins.type instance
        invoke PDB set_trace debugging, dropping any IO capturing.
    
    skip(msg='', **kwargs)
        skip an executing test with the given message.  Note: it's usually
        better to use the pytest.mark.skipif marker to declare a test to be
        skipped under certain conditions like mismatching platforms or
        dependencies.  See the pytest_skipping plugin for details.
        
        :kwarg bool allow_module_level: allows this function to be called at
            module level, skipping the rest of the module. Default to False.
    
    warns(expected_warning, *args, **kwargs)
        Assert that code raises a particular class of warning.
        
        Specifically, the parameter ``expected_warning`` can be a warning class or
        sequence of warning classes, and the inside the ``with`` block must issue a warning of that class or
        classes.
        
        This helper produces a list of :class:`warnings.WarningMessage` objects,
        one for each warning raised.
        
        This function can be used as a context manager, or any of the other ways
        ``pytest.raises`` can be used::
        
            >>> with warns(RuntimeWarning):
            ...    warnings.warn("my warning", RuntimeWarning)
        
        In the context manager form you may use the keyword argument ``match`` to assert
        that the exception matches a text or regex::
        
            >>> with warns(UserWarning, match='must be 0 or None'):
            ...     warnings.warn("value must be 0 or None", UserWarning)
        
            >>> with warns(UserWarning, match=r'must be \d+$'):
            ...     warnings.warn("value must be 42", UserWarning)
        
            >>> with warns(UserWarning, match=r'must be \d+$'):
            ...     warnings.warn("this is not here", UserWarning)
            Traceback (most recent call last):
              ...
            Failed: DID NOT WARN. No warnings of type ...UserWarning... was emitted...
    
    xfail(reason='')
        xfail an executing test or setup functions with the given reason.
    
    yield_fixture(scope='function', params=None, autouse=False, ids=None, name=None)
        (return a) decorator to mark a yield-fixture factory function.
        
        .. deprecated:: 3.0
            Use :py:func:`pytest.fixture` directly instead.

DATA
    __all__ = ['main', 'UsageError', 'cmdline', 'hookspec', 'hookimpl', '_...
    hookimpl = <pluggy.HookimplMarker object>
    hookspec = <pluggy.HookspecMarker object>
    mark = <_pytest.mark.structures.MarkGenerator object>

VERSION
    3.6.2

FILE
    /Users/jack/miniconda2/envs/py37/lib/python3.6/site-packages/pytest.py


