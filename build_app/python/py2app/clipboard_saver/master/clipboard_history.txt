2019-04-13 23:40:42.434505 Start
2019-04-13 23:40:42.438892 [ 30 ] >>> All copy list has been delete.
2019-04-13 23:41:50.447793 [ 92 ] >>> https://serverfault.com/questions/938268/how-to-increase-the-size-for-dev-mapper-centos-root
2019-04-14 01:20:49.689908 [ 48 ] >>> WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!
2019-04-14 01:32:36.432279 [ 47 ] >>> 'NoneType' object has no attribute 'splitlines'
2019-04-14 01:32:36.539436 [ 4 ] >>> todo
2019-04-14 13:16:49.834834 [ 5 ] >>> share
2019-04-14 13:16:49.839123 [ 8 ] >>> shortcut
2019-04-14 13:16:49.840770 [ 3 ] >>> tmp
2019-04-14 13:19:14.869254 [ 19 ] >>> i-014716de46a7e7b1e
2019-04-14 13:33:06.972735 [ 19 ] >>> Elastic Block Store
2019-04-14 13:34:08.248073 [ 22 ] >>> http://modeunjisik.com
2019-04-14 13:34:28.751439 [ 24 ] >>> http://hamyeondoinda.com
2019-04-14 13:35:53.216282 [ 108 ] >>> https://ap-northeast-2.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-2#Volumes:sort=desc:createTime
2019-04-14 13:37:09.415418 [ 45 ] >>> Attaching an Amazon EBS Volume to an Instance
2019-04-14 13:38:18.403132 [ 77 ] >>> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html
2019-04-14 13:38:28.957036 [ 54 ] >>> Making an Amazon EBS Volume Available for Use on Linux
2019-04-14 13:38:45.709987 [ 74 ] >>> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
2019-04-14 13:51:52.249484 [ 5 ] >>> xvda2
2019-04-14 14:02:33.620947 [ 56 ] >>> Table 1.4. List of the first character of "ls -l" output
2019-04-14 14:02:33.725653 [ 56 ] >>> Table 1.4. List of the first character of "ls -l" output
2019-04-14 14:02:39.606872 [ 62 ] >>> https://people.debian.org/~osamu/debian-reference/ch01.en.html
2019-04-14 14:03:31.181395 [ 45 ] >>> List of the first character of "ls -l" output
2019-04-14 14:04:47.732044 [ 50 ] >>> https://people.debian.org/~osamu/debian-reference/
2019-04-14 14:07:41.881540 [ 70 ] >>> https://en.wikipedia.org/wiki/List_of_Linux_distributions#Debian-based
2019-04-14 14:08:13.669663 [ 27 ] >>> List of Linux distributions
2019-04-14 14:15:58.978351 [ 83 ] >>> https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg
2019-04-14 14:18:34.300090 [ 31 ] >>> Linux_Distribution_Timeline.svg
2019-04-14 14:26:42.586147 [ 59 ] >>> https://docs.eyesopen.com/toolkits/python/depicttk/svg.html
2019-04-14 14:33:45.017010 [ 205 ] >>> https://www.google.com/search?newwindow=1&client=safari&rls=en&biw=1122&bih=1337&ei=lcOyXIfSNKaVr7wP4cGNqA0&q=python+svg&oq=python+svg&gs_l=psy-ab.3...0.0..153...0.0..0.0.0.......0......gws-wiz.H1ROms6ZuYw
2019-04-14 14:36:34.518149 [ 15 ] >>> import svgwrite
2019-04-14 14:36:34.524608 [ 0 ] >>> 
2019-04-14 14:36:34.525982 [ 50 ] >>> dwg = svgwrite.Drawing('test.svg', profile='tiny')
2019-04-14 14:36:34.527276 [ 72 ] >>> dwg.add(dwg.line((0, 0), (10, 0), stroke=svgwrite.rgb(10, 10, 16, '%')))
2019-04-14 14:36:34.528522 [ 54 ] >>> dwg.add(dwg.text('Test', insert=(0, 0.2), fill='red'))
2019-04-14 14:36:34.529995 [ 10 ] >>> dwg.save()
2019-04-14 14:38:09.312281 [ 55 ] >>> https://github.com/mozman/svgwrite/tree/master/examples
2019-04-14 15:01:31.756278 [ 34 ] >>> https://pypi.org/project/svgwrite/
2019-04-14 15:01:44.067191 [ 8 ] >>> svgwrite
2019-04-14 15:01:53.729249 [ 20 ] >>> pip install svgwrite
2019-04-14 15:02:13.016283 [ 6 ] >>> svglib
2019-04-14 15:02:19.732026 [ 18 ] >>> pip install svglib
2019-04-14 15:02:30.918160 [ 32 ] >>> https://pypi.org/project/svglib/
2019-04-14 15:02:49.516868 [ 21 ] >>> pip3 install cairosvg
2019-04-14 15:03:01.214856 [ 20 ] >>> https://cairosvg.org
2019-04-14 15:03:09.133791 [ 8 ] >>> CairoSVG
2019-04-14 15:03:50.488188 [ 5 ] >>> pySVG
2019-04-14 15:04:16.401228 [ 32 ] >>> pySVG - Creating SVG with Python
2019-04-14 15:04:33.051217 [ 26 ] >>> https://codeboje.de/pysvg/
2019-04-14 15:04:45.870581 [ 17 ] >>> pip install pysvg
2019-04-14 15:05:37.115605 [ 21 ] >>> pysvg-py3 0.2.2.post2
2019-04-14 15:05:49.719203 [ 35 ] >>> https://pypi.org/project/pysvg-py3/
2019-04-14 15:05:54.803635 [ 21 ] >>> pip install pysvg-py3
2019-04-14 15:06:05.376653 [ 37 ] >>> https://github.com/alorence/pysvg-py3
2019-04-14 15:06:19.203927 [ 19 ] >>> pip uninstall pysvg
2019-04-14 15:08:11.004562 [ 26 ] >>> SVG ファイルを作成する Python ライブラリ
2019-04-14 15:08:20.654845 [ 79 ] >>> http://tink.elliptium.net/2014/02/09/python_libraries_to_create_a_svg_file.html
2019-04-14 15:08:41.699288 [ 9 ] >>> SVG ライブラリ
2019-04-14 15:08:41.701172 [ 33 ] >>> 名称	対応 Python バージョン	URL	ライセンス	コメント
2019-04-14 15:08:41.702831 [ 35 ] >>> (理想)	Python 3	N/A	オープンソース	開発が続いてること
2019-04-14 15:08:41.704162 [ 110 ] >>> pygal	Python 2.6, 2.7, 3.2, 3.3	https://pypi.python.org/pypi/pygal, http://pygal.org	LGPL v3	データを表示するためのものらしい.
2019-04-14 15:08:41.705477 [ 122 ] >>> CairoSVG	Python 2.6, 2.7, 3.2, 3.3	https://pypi.python.org/pypi/CairoSVG, http://cairosvg.org	LGPL v3	SVG を他の形式に変換するものらしい.
2019-04-14 15:08:41.706669 [ 123 ] >>> svg.charts	Python 2.6, 2.7. 3	https://pypi.python.org/pypi/svg.charts, http://pythonhosted.org/svg.charts/	MIT	グラフ描画用で目的が違う
2019-04-14 15:08:41.707863 [ 105 ] >>> Cnc25D	?	https://pypi.python.org/pypi/Cnc25D/, http://pythonhosted.org/Cnc25D/	GPLv3 or later	CNC 用で目的が違う
2019-04-14 15:08:41.709053 [ 108 ] >>> gpml2svg	Python 2	https://pypi.python.org/pypi/gpml2svg/, http://www.genmapp.org	BSD	遺伝子地図のなんとからしい. 目的が違い過ぎる
2019-04-14 15:08:41.710395 [ 122 ] >>> eea.converter	?	https://pypi.python.org/pypi/eea.converter	GPLv2	PDF を生成するものっぽい. Getting Started の PDF が localhost に置いてある.
2019-04-14 15:08:41.712246 [ 83 ] >>> svgbatch	Python 2.5, 2.6	https://pypi.python.org/pypi/svgbatch	BSD	SVG ファイルを変換するもの.
2019-04-14 15:08:41.713639 [ 146 ] >>> svgwrite	Python 2.7, 3.2, 3.3	https://pypi.python.org/pypi/svgwrite/, https://bitbucket.org/mozman/svgwrite	MIT	求めていた SVG を作成するもの. 最近まで更新されてるので期待.
2019-04-14 15:08:41.715968 [ 200 ] >>> XStatic-svg-edit-moin	?	https://pypi.python.org/pypi/XStatic-svg-edit-moin/2012.11.15.1, https://code.google.com/p/svg-edit/	(svg-edit-moin と一緒, なんのこっちゃ)	svg-edit という JS のツールを MoinMoin で使えるようにしたもの (?)
2019-04-14 15:08:41.721407 [ 118 ] >>> pySVG	Python 2.6	https://pypi.python.org/pypi/pysvg, http://codeboje.de/pysvg/	2 Clause BSD	ドキュメントが少なく, ここ最近メンテもされてない.
2019-04-14 15:08:41.726541 [ 123 ] >>> fullmarks.tinymceplugins.asciisvg	?	https://pypi.python.org/pypi/fullmarks.tinymceplugins.asciisvg	GPL	関数のグラフを描画するためのものらしい.
2019-04-14 15:08:41.728737 [ 142 ] >>> pydirstat	?	https://pypi.python.org/pypi/pydirstat/0.9.15, http://pydirstat.berlios.de	GPL	ディレクトリごとの占有してる領域のサイズを SVG などで綺麗に表示してくれる. diskring や
2019-04-14 15:08:41.731539 [ 98 ] >>> svgsitemap	?	https://pypi.python.org/pypi/svgsitemap, http://k0s.org/map.svg	?	サイトマップを SVG で表示するもの
2019-04-14 15:08:41.733812 [ 144 ] >>> glsvg	?	https://pypi.python.org/pypi/glsvg, https://github.com/fathat/glsvg	Public Domain	OpenGL を使って表示するらしい. SVG の読み書きができるらしい. Github の更新は最近無い.
2019-04-14 15:08:41.735107 [ 176 ] >>> sauvage	?	https://pypi.python.org/pypi/sauvage, http://lii-enac.fr/~conversy/research/sauvage/	LGPL	OpenGL を使って表示するらしい. サンプル画像とか載ってていい感じ. ただし, alpha 状態とのこと. PyPI にダウンロードリンクが無い!
2019-04-14 15:08:41.736844 [ 100 ] >>> svglib	?	https://pypi.python.org/pypi/svglib/	LGPLv3	SVG を PDF に変換するもの. 残念. きちんと整備されている感じ. 最近の更新は無い.
2019-04-14 15:08:41.739586 [ 88 ] >>> qrplatba	Python 2.7, 3.3	https://pypi.python.org/pypi/qrplatba	MPL 2.0	QR コードを生成するためのもの.
2019-04-14 15:08:41.743519 [ 161 ] >>> XStatic-svgweb	?	https://pypi.python.org/pypi/XStatic-svgweb, https://code.google.com/p/svgweb/	(svgweb と同じ)	HTML に組み込んでブラウザ上で SVG を扱うもの. JS で動いてるらしい. 今回の目的とは違う.
2019-04-14 15:08:41.747035 [ 146 ] >>> pixel2svg	Python 2.x	https://pypi.python.org/pypi/pixel2svg, http://florian-berger.de/en/software/pixel2svg/	GPL	ピクセル画像を SVG に変換するもの. もちろんピクセルのまま.
2019-04-14 15:08:41.748960 [ 163 ] >>> scour	?	https://pypi.python.org/pypi/scour, http://www.codedread.com/scour/, https://github.com/oberstet/scour	Apache 2.0	SVG を綺麗にしてファイルサイズを小さくするもの. scour = ゴシゴシ洗う
2019-04-14 15:08:41.752443 [ 152 ] >>> svg.path	Python 2.6, 2.7, 3.1, 3.2, 3.3	https://pypi.python.org/pypi/svg.path, https://github.com/regebro/svg.path	CC0 1.0 Universal	線 (path) しか引けないっぽい.
2019-04-14 15:08:41.755810 [ 126 ] >>> PyQRCode	Python 3	https://pypi.python.org/pypi/PyQRCode, https://github.com/mnooner256/pyqrcode	LGPLv3	名前の通り QR コードを生成するものらしい.
2019-04-14 15:08:41.759524 [ 142 ] >>> simplesvg	?	https://pypi.python.org/pypi/simplesvg, https://github.com/forana/simplesvg	?	pySVG と svgwrite では満足できないところがあって作ったらしい. 基本的な図形は描けそう.
2019-04-14 15:08:41.760992 [ 71 ] >>> nsi.svgtool	?	https://pypi.python.org/pypi/nsi.svgtool	GPL	やる気が感じられない……
2019-04-14 15:08:41.762555 [ 139 ] >>> Things	Python 2.5	https://pypi.python.org/pypi/Things, http://savannah.nongnu.org/projects/things/	GPL	やりたいこととすごく合ってるのだが, どうももう更新されていないっぽい.
2019-04-14 15:08:41.763997 [ 106 ] >>> pytablefy	?	https://pypi.python.org/pypi/pytablefy, https://github.com/fayizk1/pytablefy	?	いまいち何ができるか分からない
2019-04-14 15:08:41.767334 [ 82 ] >>> svgobject	?	https://pypi.python.org/pypi/svgobject	GPL	ドキュメントが少なくて何ができるかよく分からなかった.
2019-04-14 15:08:41.770322 [ 79 ] >>> svglue	?	https://pypi.python.org/pypi/svglue	MIT	Inkscape と連携するもの? っぽい. 関係無さそう.
2019-04-14 15:08:41.773586 [ 68 ] >>> ewscal	?	https://pypi.python.org/pypi/ewscal	MIT	d3.js とある辺りで関係無さそう.
2019-04-14 15:08:41.775462 [ 74 ] >>> svgplotlib	?	https://pypi.python.org/pypi/svgplotlib,	BSD	グラフのプロットは目的ではない.
2019-04-14 15:08:41.776966 [ 72 ] >>> svg2rlg	?	https://pypi.python.org/pypi/svg2rlg	BSD	SVG から別形式への変換なので関係無い.
2019-04-14 15:08:41.778518 [ 177 ] >>> svgutils	Python 2.6, 2.7	https://pypi.python.org/pypi/svgutils, https://github.com/btel/svg_utils, http://neuroscience.telenczuk.pl/?p=331	MIT	どうも SVG の結合の方を指向しているようで, 今回とは関係無い.
2019-04-14 15:08:41.780842 [ 65 ] >>> Charty	?	https://pypi.python.org/pypi/Charty	?	チャートが目的ではないので関係無い.
2019-04-14 15:08:41.784532 [ 83 ] >>> django_svg	?	https://pypi.python.org/pypi/django_svg	MIT	SVG の代わりに PNG で表示するツールらしい.
2019-04-14 15:08:41.787472 [ 158 ] >>> collective.pygal.core	Python 2	https://pypi.python.org/pypi/collective.pygal.core, https://github.com/collective/collective.pygal.core	GPL	pygal の Plone 版らしい.
2019-04-14 15:08:41.791046 [ 104 ] >>> pyWxSVG	Python 2.5	https://pypi.python.org/pypi/pyWxSVG, http://shanto.ru (露語?)	BSD	wxPython 用なので関係無さそう.
2019-04-14 15:09:15.609944 [ 136 ] >>> 色々調べてみて, 目的, できることが明示されていたり, デモ画像が見られるものは興味を惹かれますね. Python バージョンが明記してあるものは安心して使えます. ライセンスが明記してないと, どう仕様ライブラリのライセンスをどう処理していいか分からないので困ります.
2019-04-14 15:09:15.612914 [ 52 ] >>> 結論としては, 任意の SVG ファイルを作成するなら svgwrite がほぼ唯一の選択肢のようです.
2019-04-14 15:09:15.615461 [ 23 ] >>> とりあえず SVG の調査はここまでとします.
2019-04-14 15:09:35.364595 [ 9 ] >>> simplesvg
2019-04-14 15:10:19.203942 [ 46 ] >>> SSH - "REMOTE HOST IDENTIFICATION HAS CHANGED"
2019-04-14 15:10:58.321786 [ 80 ] >>> https://support.rackspace.com/how-to/ssh-remote-host-identification-has-changed/
2019-04-14 15:11:32.521515 [ 67 ] >>> Use one of the following methods to change to the new RSA host key:
2019-04-14 15:11:32.525030 [ 70 ] >>> Open the .ssh/known_hosts file in your text editor and delete line 15.
2019-04-14 15:11:32.527688 [ 2 ] >>> or
2019-04-14 15:11:32.530357 [ 79 ] >>> Run the following Linux command, replacing the IP and path name as appropriate.
2019-04-14 15:11:32.532618 [ 48 ] >>> sed -i '/1.2.3.4/d' /home/scott/.ssh/known_hosts
2019-04-14 15:12:51.375543 [ 44 ] >>> 스케일러블 벡터 그래픽스(Scalable Vector Graphics, SVG)
2019-04-14 15:12:58.828496 [ 43 ] >>> https://ko.wikipedia.org/wiki/스케일러블_벡터_그래픽스
2019-04-14 15:13:58.038397 [ 9 ] >>> ROM image
2019-04-14 15:14:36.303043 [ 114 ] >>> ROM 이미지(ROM image) 또는 ROM 파일(ROM file)은 비디오 게임 카트리지, 컴퓨터의 펌웨어, 아케이드 게임의 메인보드 등 고정 기억 장치 칩의 데이터 사본을 포함하는 컴퓨터 파일이다. 
2019-04-14 15:14:50.783519 [ 38 ] >>> ROM 이미지(ROM image) 또는 ROM 파일(ROM file)
2019-04-14 15:14:58.233402 [ 35 ] >>> https://ko.wikipedia.org/wiki/롬_이미지
2019-04-14 15:15:09.248893 [ 8 ] >>> emulator
2019-04-14 15:15:21.396255 [ 27 ] >>> Video game console emulator
2019-04-14 15:15:49.155936 [ 10 ] >>> video_game
2019-04-14 15:16:06.819945 [ 57 ] >>> https://en.wikipedia.org/wiki/Video_game_console_emulator
2019-04-14 15:16:34.807088 [ 217 ] >>> 비디오 게임 콘솔 에뮬레이터(Video game console emulator)는 컴퓨터나 현대의 게임기(크로스 콘솔 에뮬레이션)가 어떠한 게임기를 가상으로 구현하는 에뮬레이팅 프로그램이다. 에뮬레이터는 더 오래된 비디오 게임을 개인용 컴퓨터와 현대의 비디오 게임기 위에 돌리는 데에 가장 자주 사용되지만 게임을 다른 언어로 번역하고, 기존의 게임을 수정(해킹)하는 데에 사용할 수 있다.
2019-04-14 15:16:58.770267 [ 8 ] >>> Emulator
2019-04-14 15:17:38.181637 [ 38 ] >>> https://en.wikipedia.org/wiki/Emulator
2019-04-14 15:17:58.706533 [ 183 ] >>> 에뮬레이터(Emulator)는 한 시스템에서 다른 시스템을 복제한다. 그리하여 두 번째 시스템이 첫 번째 시스템을 따라 행동하는 것이다. 외부의 행동에 대해 똑같이 따라하려고 하는 이 관점은 시뮬레이션과는 정 반대이다. 왜냐하면, 시뮬레이션은 자주 내부 상태와 관련하여, 흉내내는 시스템의 추상적인 모델과 관계가 있기 때문이다.
2019-04-14 15:19:09.618936 [ 89 ] >>> https://stackoverflow.com/questions/448673/how-do-emulators-work-and-how-are-they-written
2019-04-14 15:19:39.877210 [ 43 ] >>> https://www.youtube.com/watch?v=10c6zC8IXjw
2019-04-14 15:19:47.722039 [ 43 ] >>> https://www.quora.com/How-do-emulators-work
2019-04-14 15:19:55.900662 [ 59 ] >>> https://en.wikibooks.org/wiki/Emulation/How_does_it_work%3F
2019-04-14 15:21:56.101828 [ 65 ] >>> https://www.quora.com/How-does-the-Remote-Desktop-Connection-work
2019-04-14 15:22:01.097793 [ 44 ] >>> How does the Remote Desktop Connection work?
2019-04-14 15:22:12.929539 [ 29 ] >>> How Does Remote Desktop Work?
2019-04-14 15:22:20.272569 [ 49 ] >>> https://www.cyberlinkasp.com/remote-desktop-work/
2019-04-14 15:24:52.794433 [ 29 ] >>> How do virtual machines work?
2019-04-14 15:24:59.940254 [ 50 ] >>> https://www.quora.com/How-do-virtual-machines-work
2019-04-14 15:25:12.800782 [ 26 ] >>> What is a virtual machine?
2019-04-14 15:25:19.126114 [ 69 ] >>> https://azure.microsoft.com/en-us/overview/what-is-a-virtual-machine/
2019-04-14 15:25:53.803368 [ 20 ] >>> virtual machine (VM)
2019-04-14 15:26:00.550286 [ 76 ] >>> https://searchservervirtualization.techtarget.com/definition/virtual-machine
2019-04-14 15:26:14.733390 [ 54 ] >>> What Is a Virtual Machine? Everything You Need to Know
2019-04-14 15:26:19.847160 [ 65 ] >>> https://www.makeuseof.com/tag/virtual-machine-makeuseof-explains/
2019-04-14 15:26:31.902698 [ 58 ] >>> $$$ What Is a Virtual Machine? Everything You Need to Know
2019-04-14 15:26:41.065586 [ 44 ] >>> What is a Virtual Machine? How does it work?
2019-04-14 15:26:48.416552 [ 107 ] >>> https://www.reddit.com/r/explainlikeimfive/comments/1a86vh/eli5_what_is_a_virtual_machine_how_does_it_work/
2019-04-14 15:33:57.211389 [ 26 ] >>> What Is a Virtual Machine?
2019-04-14 15:33:57.219657 [ 283 ] >>> A virtual machine is a program that acts as a virtual computer. It runs on your current operating system (the host operating system) and provides virtual hardware to guest operating systems. The guest OS runs in a window on your host OS, just like any other program on your computer.
2019-04-14 15:33:57.222745 [ 96 ] >>> From the guest operating system’s perspective, the virtual machine is a real, physical computer.
2019-04-14 15:33:57.225802 [ 367 ] >>> The virtual machine’s emulation engine, called a hypervisor, handles the virtual hardware, including a CPU, memory, hard drive, network interface, and other devices. The virtual hardware devices provided by the hypervisor map to real hardware on your physical machine. For example, a virtual machine’s virtual hard disk is stored in a file located on your hard drive.
2019-04-14 15:39:20.979188 [ 9 ] >>> lang="ko"
2019-04-14 15:42:59.792885 [ 70 ] >>> https://www.redhat.com/ko/topics/virtualization/what-is-virtualization
2019-04-14 15:43:14.920096 [ 11 ] >>> 가상화란 무엇일까요?
2019-04-14 15:45:03.770624 [ 6 ] >>> 하이퍼바이저
2019-04-14 15:45:14.705226 [ 36 ] >>> https://ko.wikipedia.org/wiki/하이퍼바이저
2019-04-14 15:45:46.236750 [ 173 ] >>>  호스트 컴퓨터에서 다수의 운영 체제(operating system)를 동시에 실행하기 위한 논리적 플랫폼(platform)을 말한다. 가상화 머신 모니터 또는 가상화 머신 매니저(영어: virtual machine monitor 또는 virtual machine manager, 줄여서 VMM)라고도 부른다.
2019-04-14 19:40:42.487655 [ 12 ] >>> 172.20.10.10
2019-04-14 21:56:15.917570 [ 13 ] >>> 192.168.11.10
2019-04-14 22:03:27.131487 [ 9 ] >>> import os
2019-04-14 22:03:27.134792 [ 11 ] >>> import time
2019-04-14 22:03:27.137920 [ 19 ] >>> def measure_temp():
2019-04-14 22:03:27.140175 [ 59 ] >>>         temp = os.popen("vcgencmd measure_temp").readline()
2019-04-14 22:03:27.142261 [ 41 ] >>>         return (temp.replace("temp=",""))
2019-04-14 22:03:27.144969 [ 11 ] >>> while True:
2019-04-14 22:03:27.146675 [ 29 ] >>>         print(measure_temp())
2019-04-14 22:03:27.148413 [ 21 ] >>>         time.sleep(1)
2019-04-14 22:11:57.498268 [ 33 ] >>> /opt/vc/bin/vcgencmd measure_temp
2019-04-14 22:12:53.525640 [ 15 ] >>> [ bash script ]
2019-04-14 22:12:53.530082 [ 20 ] >>> - 특정 프로세스 찾아서 찍어주기 -
2019-04-14 22:12:53.533104 [ 103 ] >>> while true; do ps -ef | grep /Users/jack/Desktop; date; echo; seq -f "=" -s '' 100; echo; sleep 3; done
2019-04-14 22:12:53.536496 [ 108 ] >>> while true; do ps -ef | grep -e Clipboard -e CopyList; date; echo; seq -f "=" -s '' 100; echo; sleep 3; done
2019-04-14 22:13:09.208173 [ 11 ] >>> bash script
2019-04-14 22:14:55.430167 [ 103 ] >>> while true; do /opt/vc/bin/vcgencmd measure_temp; date; echo; seq -f "=" -s '' 100; echo; sleep 3; done
2019-04-14 22:16:45.736284 [ 94 ] >>> while true; do /opt/vc/bin/vcgencmd measure_temp; date; echo "=========="; echo; sleep 3; done
2019-04-14 22:21:28.462846 [ 15 ] >>> monitor_temp.sh
2019-04-14 22:26:12.526685 [ 14 ] >>> /usr/local/bin
2019-04-14 22:27:57.381928 [ 11 ] >>> slackclient
2019-04-14 22:36:46.613728 [ 36 ] >>> from time import localtime, strftime
2019-04-14 22:37:36.014738 [ 38 ] >>> strftime("%Y%m%d_%H%M%S", localtime())
2019-04-14 22:42:37.316356 [ 15 ] >>> import requests
2019-04-14 22:42:37.318969 [ 11 ] >>> import json
2019-04-14 23:05:09.069826 [ 101 ] >>> def post_a_message_to_slack(requests_post_url, channel_name, poster_name, message_text, poster_icon):
2019-04-14 23:05:09.078399 [ 79 ] >>> 	def create_json_message(channel_name, poster_name, message_text, poster_icon):
2019-04-14 23:05:09.080836 [ 116 ] >>> 		json_message = {"channel": channel_name, "username": poster_name, "text": message_text, "icon_emoji": poster_icon}
2019-04-14 23:05:09.083423 [ 21 ] >>> 		return json_message
2019-04-14 23:05:09.086839 [ 65 ] >>> 	def post_json_message_to_slack(requests_post_url, json_message):
2019-04-14 23:05:09.089456 [ 64 ] >>> 		response = requests.post(requests_post_url, json=json_message)
2019-04-14 23:05:09.092420 [ 59 ] >>> 		print("message posting response :", response.status_code)
2019-04-14 23:05:09.095352 [ 89 ] >>> 	json_message = create_json_message(channel_name, poster_name, message_text, poster_icon)
2019-04-14 23:05:09.097276 [ 39 ] >>> 	print("json_message : ", json_message)
2019-04-14 23:05:09.099990 [ 60 ] >>> 	post_json_message_to_slack(requests_post_url, json_message)
2019-04-14 23:05:09.102762 [ 85 ] >>> def post_a_file_to_slack(file_full_path, channel_id): # token is miraitranslate token
2019-04-14 23:05:09.104843 [ 45 ] >>> 	files = {'file': open(file_full_path, 'rb')}
2019-04-14 23:05:09.106752 [ 118 ] >>> 	param = {'token':'xoxp-17749732742-24121635890-519188856742-d96fc9a765ebaa0436011e4588c9ffaf', 'channels':channel_id}
2019-04-14 23:05:09.108695 [ 94 ] >>> 	response = requests.post(url="https://slack.com/api/files.upload", params=param, files=files)
2019-04-14 23:05:09.110562 [ 56 ] >>> 	print("files posting response :", response.status_code)
2019-04-14 23:07:00.658903 [ 1 ] >>> 	
2019-04-14 23:07:19.348054 [ 82 ] >>>     def create_json_message(channel_name, poster_name, message_text, poster_icon):
2019-04-14 23:07:19.355313 [ 122 ] >>>         json_message = {"channel": channel_name, "username": poster_name, "text": message_text, "icon_emoji": poster_icon}
2019-04-14 23:07:19.358638 [ 27 ] >>>         return json_message
2019-04-14 23:07:19.365652 [ 68 ] >>>     def post_json_message_to_slack(requests_post_url, json_message):
2019-04-14 23:07:19.370412 [ 70 ] >>>         response = requests.post(requests_post_url, json=json_message)
2019-04-14 23:07:19.373955 [ 65 ] >>>         print("message posting response :", response.status_code)
2019-04-14 23:07:19.376827 [ 92 ] >>>     json_message = create_json_message(channel_name, poster_name, message_text, poster_icon)
2019-04-14 23:07:19.378913 [ 42 ] >>>     print("json_message : ", json_message)
2019-04-14 23:07:19.381721 [ 63 ] >>>     post_json_message_to_slack(requests_post_url, json_message)
2019-04-14 23:07:19.385484 [ 48 ] >>>     files = {'file': open(file_full_path, 'rb')}
2019-04-14 23:07:19.387433 [ 121 ] >>>     param = {'token':'xoxp-17749732742-24121635890-519188856742-d96fc9a765ebaa0436011e4588c9ffaf', 'channels':channel_id}
2019-04-14 23:07:19.389419 [ 97 ] >>>     response = requests.post(url="https://slack.com/api/files.upload", params=param, files=files)
2019-04-14 23:07:19.392390 [ 59 ] >>>     print("files posting response :", response.status_code)
2019-04-14 23:11:59.532517 [ 31 ] >>> # -----------------------------
2019-04-14 23:11:59.540387 [ 6 ] >>> # --- 
2019-04-14 23:31:33.396762 [ 18 ] >>> raspberry_raspbian
2019-04-14 23:36:26.877388 [ 76 ] >>> xoxp-607809333856-611341093959-611675659382-d6d85dd187c601d1a25233519189a860
2019-04-14 23:38:48.900927 [ 38 ] >>> pi@raspberrypi:/usr/local/bin $ ls -ll
2019-04-14 23:38:48.908649 [ 8 ] >>> total 16
2019-04-14 23:38:48.911359 [ 64 ] >>> -rwxr-xr-x 1 root staff  38 Apr 14 22:26 call_monitor_temp_py.sh
2019-04-14 23:38:48.913910 [ 45 ] >>> -rwxr-xr-x 1 root root   54 Apr 14 22:59 c.sh
2019-04-14 23:38:48.916202 [ 56 ] >>> -rw-r--r-- 1 root staff 331 Apr 14 22:45 monitor_temp.py
2019-04-14 23:38:48.918445 [ 56 ] >>> -rwxr-xr-x 1 root staff 106 Apr 14 22:18 monitor_temp.sh
2019-04-14 23:38:48.920657 [ 57 ] >>> pi@raspberrypi:/usr/local/bin $ sudo vim monitor_temp.py 
2019-04-14 23:38:48.922837 [ 56 ] >>> pi@raspberrypi:/usr/local/bin $ sudo vi monitor_temp.py 
2019-04-14 23:38:48.925806 [ 71 ] >>> pi@raspberrypi:/usr/local/bin $ sudo cp monitor_temp.py monitor_temp.xx
2019-04-14 23:38:48.927941 [ 57 ] >>> pi@raspberrypi:/usr/local/bin $ sudo vim monitor_temp.xx 
2019-04-14 23:38:48.930164 [ 75 ] >>> pi@raspberrypi:/usr/local/bin $ sudo mv monitor_temp.xx monitor_temp.py.tmp
2019-04-14 23:38:48.932261 [ 75 ] >>> pi@raspberrypi:/usr/local/bin $ sudo cp monitor_temp.py.tmp monitor_temp.py
2019-04-14 23:38:48.934430 [ 37 ] >>> pi@raspberrypi:/usr/local/bin $ clear
2019-04-14 23:38:49.014680 [ 8 ] >>> total 20
2019-04-14 23:38:49.020559 [ 65 ] >>> -rwxr-xr-x 1 root staff   38 Apr 14 22:26 call_monitor_temp_py.sh
2019-04-14 23:38:49.023494 [ 46 ] >>> -rwxr-xr-x 1 root root    54 Apr 14 22:59 c.sh
2019-04-14 23:38:49.025827 [ 57 ] >>> -rw-r--r-- 1 root staff 1495 Apr 14 23:08 monitor_temp.py
2019-04-14 23:38:49.028145 [ 61 ] >>> -rw-r--r-- 1 root staff 1495 Apr 14 23:08 monitor_temp.py.tmp
2019-04-14 23:38:49.033549 [ 57 ] >>> -rwxr-xr-x 1 root staff  106 Apr 14 22:18 monitor_temp.sh
2019-04-14 23:38:49.037474 [ 56 ] >>> pi@raspberrypi:/usr/local/bin $ sudo vim monitor_temp.py
2019-04-14 23:38:49.125791 [ 28 ] >>> # --------------------------
2019-04-14 23:38:49.129015 [ 21 ] >>> # --- func definition
2019-04-14 23:38:49.135070 [ 55 ] >>>     temp = os.popen("vcgencmd measure_temp").readline()
2019-04-14 23:38:49.138201 [ 37 ] >>>     return (temp.replace("temp=",""))
2019-04-14 23:38:49.158467 [ 55 ] >>>     param = {'token':your_token, 'channels':channel_id}
2019-04-14 23:38:49.167001 [ 29 ] >>> # ---------------------------
2019-04-14 23:38:49.170407 [ 10 ] >>> # --- call
2019-04-14 23:38:49.175336 [ 91 ] >>> your_token = 'xoxp-607809333856-611341093959-611675659382-d6d85dd187c601d1a25233519189a860'
2019-04-14 23:38:49.182040 [ 17 ] >>>     print("="*33)
2019-04-14 23:38:49.184968 [ 53 ] >>>     print(strftime("%Y-%m-%d %H:%M:%S", localtime()))
2019-04-14 23:38:49.187458 [ 33 ] >>>     current_temp = measure_temp()
2019-04-14 23:38:49.189806 [ 23 ] >>>     print(current_temp)
2019-04-14 23:38:49.192020 [ 17 ] >>>     time.sleep(5)
2019-04-14 23:38:49.194232 [ 134 ] >>> ~                                                                                                                                     
2019-04-14 23:38:49.229122 [ 133 ] >>> -- (insert) VISUAL --                                                                                     1         29,43         All
2019-04-14 23:40:18.304771 [ 10 ] >>> your_token
2019-04-14 23:40:28.191244 [ 60 ] >>> post_a_file_to_slack(file_full_path, channel_id, your_token)
2019-04-14 23:41:53.984787 [ 42 ] >>> strftime("%Y-%m-%d %H:%M:%S", localtime())
2019-04-14 23:42:11.416154 [ 15 ] >>> check_temp_time
2019-04-14 23:42:26.870239 [ 6 ] >>> 	# ---
2019-04-14 23:42:43.924556 [ 96 ] >>> post_a_message_to_slack(requests_post_url, channel_name, poster_name, message_text, poster_icon)
2019-04-15 06:03:47.287904 [ 9 ] >>> CHPED5S1F
2019-04-15 06:04:57.458256 [ 10 ] >>> channel_id
2019-04-15 06:05:17.499286 [ 17 ] >>> requests_post_url
2019-04-15 06:05:29.935486 [ 12 ] >>> channel_name
2019-04-15 06:05:46.261525 [ 18 ] >>> respberry_raspbian
2019-04-15 06:05:53.856497 [ 11 ] >>> poster_name
2019-04-15 06:06:24.896863 [ 12 ] >>> message_text
2019-04-15 06:06:52.062878 [ 15 ] >>> message_text = 
2019-04-15 06:07:20.656751 [ 6 ] >>> "="*33
2019-04-15 06:07:51.404906 [ 12 ] >>> current_temp
2019-04-15 06:08:07.639381 [ 4 ] >>> "\n"
2019-04-15 06:08:21.924686 [ 11 ] >>> poster_icon
2019-04-15 06:10:43.536822 [ 38 ] >>> https://slack.com/api/chat.postMessage
2019-04-15 06:14:11.987965 [ 40 ] >>> "https://slack.com/api/chat.postMessage"
2019-04-15 06:14:47.552327 [ 65 ] >>> def post_a_file_to_slack(file_full_path, channel_id, your_token):
2019-04-15 06:14:47.578206 [ 60 ] >>> requests_post_url = "https://slack.com/api/chat.postMessage"
2019-04-15 06:14:47.580959 [ 35 ] >>> channel_name = 'respberry_raspbian'
2019-04-15 06:14:47.586895 [ 30 ] >>> poster_name = 'pyscript_on_py'
2019-04-15 06:14:47.589399 [ 28 ] >>> poster_icon = 'simple_smile'
2019-04-15 06:14:47.596974 [ 24 ] >>> channel_id = 'CHPED5S1F'
2019-04-15 06:14:47.608177 [ 61 ] >>> 	check_temp_time = strftime("%Y-%m-%d %H:%M:%S", localtime())
2019-04-15 06:14:47.612885 [ 30 ] >>> 	current_temp = measure_temp()
2019-04-15 06:14:47.621960 [ 26 ] >>>     print(check_temp_time)
2019-04-15 06:14:47.631261 [ 86 ] >>> 	message_text = "="*33 + "\n" + str(check_temp_time) + "\n" + str(current_temp) + "\n"
2019-04-15 06:14:47.667260 [ 97 ] >>> 	post_a_message_to_slack(requests_post_url, channel_name, poster_name, message_text, poster_icon)
2019-04-15 06:14:47.680071 [ 61 ] >>> 	post_a_file_to_slack(file_full_path, channel_id, your_token)
2019-04-15 06:23:10.239848 [ 77 ] >>> https://hooks.slack.com/services/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
2019-04-15 06:30:02.639384 [ 4 ] >>> 5928
2019-04-15 06:31:16.287795 [ 4 ] >>> 5985
2019-04-15 06:37:29.158502 [ 4 ] >>> 6018
2019-04-15 06:41:37.695090 [ 38 ] >>> /usr/local/bin/call_monitor_temp_py.sh
2019-04-15 06:45:45.011905 [ 4 ] >>> 6263
2019-04-15 06:47:47.744917 [ 4 ] >>> 6784
2019-04-15 07:12:45.809776 [ 19 ] >>> xxx@xxx.xxx.xxx.xxx
2019-04-15 07:22:38.568072 [ 67 ] >>>         # print("message posting response :", response.status_code)
2019-04-15 07:22:38.599894 [ 44 ] >>>     # print("json_message : ", json_message)
2019-04-15 07:22:38.612277 [ 61 ] >>>     # print("files posting response :", response.status_code)
2019-04-15 07:22:38.618370 [ 9 ] >>> # --- var
2019-04-15 07:22:38.621797 [ 99 ] >>> requests_post_url = "https://hooks.slack.com/services/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"
2019-04-15 07:22:38.636032 [ 60 ] >>> check_temp_time = strftime("%Y-%m-%d %H:%M:%S", localtime())
2019-04-15 07:22:38.639776 [ 29 ] >>> current_temp = measure_temp()
2019-04-15 07:22:38.643136 [ 4 ] >>>     
2019-04-15 07:22:38.646284 [ 5 ] >>> # ---
2019-04-15 07:22:38.649168 [ 15 ] >>> # print("="*33)
2019-04-15 07:22:38.651651 [ 24 ] >>> # print(check_temp_time)
2019-04-15 07:22:38.654297 [ 21 ] >>> # print(current_temp)
2019-04-15 07:22:38.659010 [ 85 ] >>> message_text = "="*33 + "\n" + str(check_temp_time) + "\n" + str(current_temp) + "\n"
2019-04-15 07:22:38.664751 [ 62 ] >>> # post_a_file_to_slack(file_full_path, channel_id, your_token)
2019-04-15 07:23:46.667320 [ 10 ] >>> matplotlib
2019-04-15 07:27:11.683205 [ 106 ] >>> build-essential python-dev python-distlib python-setuptools python-pip python-wheel libzmq-dev libgdal-dev
2019-04-15 07:32:12.707257 [ 338 ] >>> xsel xclip libxml2-dev libxslt-dev python-lxml python-h5py python-numexpr python-dateutil python-six python-tz python-bs4 python-html5lib python-openpyxl python-tables python-xlrd python-xlwt cython python-sqlalchemy python-xlsxwriter python-jinja2 python-boto python-gflags python-googleapi python-httplib2 python-zmq libspatialindex-dev
2019-04-15 07:35:55.413153 [ 16 ] >>> bottleneck rtree
2019-04-15 07:37:13.955310 [ 118 ] >>> python-numpy python-matplotlib python-mpltoolkits.basemap python-scipy python-sklearn python-statsmodels python-pandas
2019-04-15 07:41:42.474167 [ 82 ] >>> python-requests python-pil python-scrapy python-geopy python-shapely python-pyproj
2019-04-15 07:44:25.123206 [ 23 ] >>> jupyter geopandas osmnx
2019-04-15 07:51:17.229864 [ 21 ] >>> libapache2-mod-php -y
2019-04-15 07:53:37.289874 [ 28 ] >>> <?php echo "hello world"; ?>
2019-04-15 07:53:50.176643 [ 25 ] >>> echo date('Y-m-d H:i:s');
2019-04-15 07:59:54.069198 [ 70 ] >>> Preparing to unpack .../3-php7.0-opcache_7.0.33-0+deb9u3_armhf.deb ...
2019-04-15 07:59:54.074670 [ 46 ] >>> Unpacking php7.0-opcache (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.077809 [ 56 ] >>> Selecting previously unselected package php7.0-readline.
2019-04-15 07:59:54.080752 [ 71 ] >>> Preparing to unpack .../4-php7.0-readline_7.0.33-0+deb9u3_armhf.deb ...
2019-04-15 07:59:54.083548 [ 47 ] >>> Unpacking php7.0-readline (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.086184 [ 51 ] >>> Selecting previously unselected package php7.0-cli.
2019-04-15 07:59:54.089018 [ 66 ] >>> Preparing to unpack .../5-php7.0-cli_7.0.33-0+deb9u3_armhf.deb ...
2019-04-15 07:59:54.091692 [ 42 ] >>> Unpacking php7.0-cli (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.094515 [ 62 ] >>> Selecting previously unselected package libapache2-mod-php7.0.
2019-04-15 07:59:54.097167 [ 77 ] >>> Preparing to unpack .../6-libapache2-mod-php7.0_7.0.33-0+deb9u3_armhf.deb ...
2019-04-15 07:59:54.100054 [ 53 ] >>> Unpacking libapache2-mod-php7.0 (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.103361 [ 59 ] >>> Selecting previously unselected package libapache2-mod-php.
2019-04-15 07:59:54.106644 [ 67 ] >>> Preparing to unpack .../7-libapache2-mod-php_1%3a7.0+49_all.deb ...
2019-04-15 07:59:54.109581 [ 43 ] >>> Unpacking libapache2-mod-php (1:7.0+49) ...
2019-04-15 07:59:54.112311 [ 47 ] >>> Selecting previously unselected package php7.0.
2019-04-15 07:59:54.115018 [ 60 ] >>> Preparing to unpack .../8-php7.0_7.0.33-0+deb9u3_all.deb ...
2019-04-15 07:59:54.117856 [ 38 ] >>> Unpacking php7.0 (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.120623 [ 44 ] >>> Selecting previously unselected package php.
2019-04-15 07:59:54.123373 [ 52 ] >>> Preparing to unpack .../9-php_1%3a7.0+49_all.deb ...
2019-04-15 07:59:54.126112 [ 28 ] >>> Unpacking php (1:7.0+49) ...
2019-04-15 07:59:54.128867 [ 32 ] >>> Setting up php-common (1:49) ...
2019-04-15 07:59:54.131533 [ 122 ] >>> Created symlink /etc/systemd/system/timers.target.wants/phpsessionclean.timer → /lib/systemd/system/phpsessionclean.timer.
2019-04-15 07:59:54.134263 [ 46 ] >>> Processing triggers for man-db (2.7.6.1-2) ...
2019-04-15 07:59:54.137016 [ 46 ] >>> Setting up php7.0-common (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.141136 [ 78 ] >>> Creating config file /etc/php/7.0/mods-available/calendar.ini with new version
2019-04-15 07:59:54.145126 [ 75 ] >>> Creating config file /etc/php/7.0/mods-available/ctype.ini with new version
2019-04-15 07:59:54.149198 [ 74 ] >>> Creating config file /etc/php/7.0/mods-available/exif.ini with new version
2019-04-15 07:59:54.153221 [ 78 ] >>> Creating config file /etc/php/7.0/mods-available/fileinfo.ini with new version
2019-04-15 07:59:54.157180 [ 73 ] >>> Creating config file /etc/php/7.0/mods-available/ftp.ini with new version
2019-04-15 07:59:54.161291 [ 77 ] >>> Creating config file /etc/php/7.0/mods-available/gettext.ini with new version
2019-04-15 07:59:54.165244 [ 75 ] >>> Creating config file /etc/php/7.0/mods-available/iconv.ini with new version
2019-04-15 07:59:54.169289 [ 73 ] >>> Creating config file /etc/php/7.0/mods-available/pdo.ini with new version
2019-04-15 07:59:54.173388 [ 74 ] >>> Creating config file /etc/php/7.0/mods-available/phar.ini with new version
2019-04-15 07:59:54.177475 [ 75 ] >>> Creating config file /etc/php/7.0/mods-available/posix.ini with new version
2019-04-15 07:59:54.181687 [ 75 ] >>> Creating config file /etc/php/7.0/mods-available/shmop.ini with new version
2019-04-15 07:59:54.186052 [ 77 ] >>> Creating config file /etc/php/7.0/mods-available/sockets.ini with new version
2019-04-15 07:59:54.190176 [ 77 ] >>> Creating config file /etc/php/7.0/mods-available/sysvmsg.ini with new version
2019-04-15 07:59:54.194272 [ 77 ] >>> Creating config file /etc/php/7.0/mods-available/sysvsem.ini with new version
2019-04-15 07:59:54.198465 [ 77 ] >>> Creating config file /etc/php/7.0/mods-available/sysvshm.ini with new version
2019-04-15 07:59:54.202632 [ 79 ] >>> Creating config file /etc/php/7.0/mods-available/tokenizer.ini with new version
2019-04-15 07:59:54.205678 [ 48 ] >>> Setting up php7.0-readline (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.210678 [ 78 ] >>> Creating config file /etc/php/7.0/mods-available/readline.ini with new version
2019-04-15 07:59:54.214043 [ 47 ] >>> Setting up php7.0-opcache (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.218341 [ 77 ] >>> Creating config file /etc/php/7.0/mods-available/opcache.ini with new version
2019-04-15 07:59:54.221237 [ 44 ] >>> Setting up php7.0-json (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.225483 [ 74 ] >>> Creating config file /etc/php/7.0/mods-available/json.ini with new version
2019-04-15 07:59:54.228914 [ 43 ] >>> Setting up php7.0-cli (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.231891 [ 85 ] >>> update-alternatives: using /usr/bin/php7.0 to provide /usr/bin/php (php) in auto mode
2019-04-15 07:59:54.234911 [ 88 ] >>> update-alternatives: using /usr/bin/phar7.0 to provide /usr/bin/phar (phar) in auto mode
2019-04-15 07:59:54.237916 [ 103 ] >>> update-alternatives: using /usr/bin/phar.phar7.0 to provide /usr/bin/phar.phar (phar.phar) in auto mode
2019-04-15 07:59:54.242127 [ 62 ] >>> Creating config file /etc/php/7.0/cli/php.ini with new version
2019-04-15 07:59:54.245021 [ 54 ] >>> Setting up libapache2-mod-php7.0 (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.249208 [ 66 ] >>> Creating config file /etc/php/7.0/apache2/php.ini with new version
2019-04-15 07:59:54.252096 [ 26 ] >>> Module mpm_event disabled.
2019-04-15 07:59:54.255326 [ 28 ] >>> Enabling module mpm_prefork.
2019-04-15 07:59:54.258444 [ 36 ] >>> apache2_switch_mpm Switch to prefork
2019-04-15 07:59:54.261351 [ 36 ] >>> apache2_invoke: Enable module php7.0
2019-04-15 07:59:54.264332 [ 44 ] >>> Setting up libapache2-mod-php (1:7.0+49) ...
2019-04-15 07:59:54.267420 [ 39 ] >>> Setting up php7.0 (7.0.33-0+deb9u3) ...
2019-04-15 07:59:54.270430 [ 29 ] >>> Setting up php (1:7.0+49) ...
2019-04-15 07:59:54.273522 [ 36 ] >>> pi@raspberrypi:/var/www/html $ clear
2019-04-15 07:59:54.277838 [ 36 ] >>> pi@raspberrypi:/var/www/html $ s -ll
2019-04-15 07:59:54.281107 [ 27 ] >>> -bash: s: command not found
2019-04-15 07:59:54.284109 [ 37 ] >>> pi@raspberrypi:/var/www/html $ ls -ll
2019-04-15 07:59:54.287056 [ 8 ] >>> total 12
2019-04-15 07:59:54.290145 [ 48 ] >>> -rw-r--r-- 1 pi pi 10701 Apr 15 07:47 index.html
2019-04-15 07:59:54.293097 [ 64 ] >>> pi@raspberrypi:/var/www/html $ sudo mv index.html index.html.org
2019-04-15 07:59:54.296074 [ 49 ] >>> pi@raspberrypi:/var/www/html $ sudo vim index.php
2019-04-15 07:59:54.414534 [ 5 ] >>> <?php
2019-04-15 07:59:54.417575 [ 21 ] >>> echo "Hello world !";
2019-04-15 07:59:54.420637 [ 16 ] >>> echo "<br><br>";
2019-04-15 07:59:54.424001 [ 58 ] >>> echo "This page is powered by apache2 on Jack's raspbian";
2019-04-15 07:59:54.431736 [ 2 ] >>> ?>
2019-04-15 07:59:54.543825 [ 133 ] >>> -- INSERT --                                                                                                        7,1           All
2019-04-15 08:04:43.503199 [ 23 ] >>> # -*- coding: utf-8 -*-
2019-04-15 08:04:43.516001 [ 18 ] >>> import numpy as np
2019-04-15 08:04:43.519503 [ 31 ] >>> import matplotlib.pyplot as plt
2019-04-15 08:04:43.523027 [ 36 ] >>> from matplotlib.pyplot import figure
2019-04-15 08:04:43.529323 [ 154 ] >>> ##########################################################################################################################################################
2019-04-15 08:04:43.533484 [ 20 ] >>> ### GLOBAL VARIABLES
2019-04-15 08:04:43.539231 [ 72 ] >>> ########################################################################
2019-04-15 08:04:43.545624 [ 65 ] >>> #################################################################
2019-04-15 08:04:43.552464 [ 53 ] >>> #####################################################
2019-04-15 08:04:43.559270 [ 39 ] >>> #######################################
2019-04-15 08:04:43.566358 [ 51 ] >>> ############### slack receiver url, token, channles
2019-04-15 08:04:43.571143 [ 9 ] >>> #### prod
2019-04-15 08:04:43.578235 [ 21 ] >>> prod_channel_info = {
2019-04-15 08:04:43.581858 [ 100 ] >>> 'requests_post_url':'https://hooks.slack.com/services/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',
2019-04-15 08:04:43.584959 [ 86 ] >>> 'token':'xoxp-17749732742-24121635890-319078635584-39a7d6168bb472cda0bef6b8b713495d', 
2019-04-15 08:04:43.588098 [ 23 ] >>> 'channels':'CEZUWA085'}
2019-04-15 08:04:43.596442 [ 19 ] >>> #### mirai_incident
2019-04-15 08:04:43.600359 [ 31 ] >>> mirai_incident_channel_info = {
2019-04-15 08:04:43.603576 [ 26 ] >>> 'requests_post_url':'xxx',
2019-04-15 08:04:43.610236 [ 17 ] >>> 'channels':'xxx'}
2019-04-15 08:04:43.616905 [ 16 ] >>> #### jack direct
2019-04-15 08:04:43.620057 [ 28 ] >>> jack_direct_channel_info = {
2019-04-15 08:04:43.626986 [ 85 ] >>> 'token':'xoxp-17749732742-24121635890-319078635584-39a7d6168bb472cda0bef6b8b713495d',
2019-04-15 08:04:43.631706 [ 23 ] >>> 'channels':'D1KEP10P3'}
2019-04-15 08:04:43.637802 [ 134 ] >>> time_log_folder_path = "/home/jack/project/automation/selenium/paradox/kanshi/prod_site/paradox_kanshi-production_v1.1.3/04_analysis/"
2019-04-15 08:04:43.642944 [ 56 ] >>> time_log_file_name = "file_translation_duration_log.txt"
2019-04-15 08:04:43.648013 [ 67 ] >>> time_log_file_full_path = time_log_folder_path + time_log_file_name
2019-04-15 08:04:43.652699 [ 147 ] >>> screenshot_folder_path = "/home/jack/project/automation/selenium/paradox/kanshi/prod_site/paradox_kanshi-production_v1.1.3/04_analysis/screenshot/"
2019-04-15 08:04:43.656159 [ 56 ] >>> screenshot_file_name = "file_translation_time_graph.png"
2019-04-15 08:04:43.661799 [ 73 ] >>> screenshot_file_full_path = screenshot_folder_path + screenshot_file_name
2019-04-15 08:04:43.670120 [ 19 ] >>> ### FUNC DEFINITION
2019-04-15 08:04:43.686835 [ 28 ] >>> ############ func definition
2019-04-15 08:04:43.694709 [ 34 ] >>> def create_filetrans_time_graph():
2019-04-15 08:04:43.701248 [ 44 ] >>> 	f = open(time_log_file_full_path, mode="r")
2019-04-15 08:04:43.704617 [ 44 ] >>> 	filetrans_time_list = f.read().splitlines()
2019-04-15 08:04:43.710999 [ 73 ] >>> 	figure(num=None, figsize=(30, 10), dpi=80, facecolor='w', edgecolor='k')
2019-04-15 08:04:43.716465 [ 6 ] >>> 	i = 0
2019-04-15 08:04:43.719766 [ 11 ] >>> 	x = list()
2019-04-15 08:04:43.723308 [ 11 ] >>> 	y = list()
2019-04-15 08:04:43.728150 [ 43 ] >>> 	for filetrans_time in filetrans_time_list:
2019-04-15 08:04:43.732126 [ 11 ] >>> 		i = i + 1
2019-04-15 08:04:43.735488 [ 13 ] >>> 		x.append(i)
2019-04-15 08:04:43.738828 [ 33 ] >>> 		y.append(float(filetrans_time))
2019-04-15 08:04:43.745226 [ 18 ] >>> 	plt.scatter(x, y)
2019-04-15 08:04:43.749333 [ 15 ] >>> 	plt.plot(x, y)
2019-04-15 08:04:43.752630 [ 56 ] >>> 	plt.title('File Translation Time Graph', fontsize = 70)
2019-04-15 08:04:43.755934 [ 47 ] >>> 	plt.xlabel('Translation Count', fontsize = 30)
2019-04-15 08:04:43.760205 [ 49 ] >>> 	plt.ylabel('Time spent ( sec )', fontsize = 30)	
2019-04-15 08:04:43.764154 [ 39 ] >>> 	plt.savefig(screenshot_file_full_path)
2019-04-15 08:04:43.767563 [ 13 ] >>> 	# plt.show()
2019-04-15 08:04:43.773534 [ 25 ] >>> ###### create post script
2019-04-15 08:04:43.777823 [ 76 ] >>> def create_post_script(channel_name, posting_user_name, target_text, emoji):
2019-04-15 08:04:43.782056 [ 106 ] >>> 	return {"channel": channel_name, "username": posting_user_name, "text": target_text, "icon_emoji": emoji}
2019-04-15 08:04:43.787097 [ 20 ] >>> ###### post a script
2019-04-15 08:04:43.791047 [ 62 ] >>> def post_to_a_channel(driver, requests_post_url, post_script):
2019-04-15 08:04:43.795370 [ 62 ] >>> 	response = requests.post(requests_post_url, json=post_script)
2019-04-15 08:04:43.799217 [ 57 ] >>> 	print "posting to slack response :",response.status_code
2019-04-15 08:04:43.804157 [ 24 ] >>> ###### post a screenshot
2019-04-15 08:04:43.807751 [ 66 ] >>> def post_a_screenshot(screenshot_file_full_path, token, channels):
2019-04-15 08:04:43.812089 [ 56 ] >>> 	files = {'file': open(screenshot_file_full_path, 'rb')}
2019-04-15 08:04:43.815839 [ 45 ] >>> 	param = {'token':token, 'channels':channels}
2019-04-15 08:04:43.819192 [ 93 ] >>> 	response = requests.post(url="https://slack.com/api/files.upload",params=param, files=files)
2019-04-15 08:04:43.823152 [ 74 ] >>> 	print "response from post image to slack response :",response.status_code
2019-04-15 08:04:43.837765 [ 29 ] >>> create_filetrans_time_graph()
2019-04-15 08:04:43.842155 [ 111 ] >>> post_a_screenshot(screenshot_file_full_path, prod_channel_info.get('token'), prod_channel_info.get('channels'))
2019-04-15 08:08:09.842067 [ 15 ] >>> log_folder_path
2019-04-15 08:08:13.160108 [ 18 ] >>> temp_log_file_name
2019-04-15 08:08:44.898528 [ 22 ] >>> screenshot_folder_path
2019-04-15 08:09:17.170803 [ 5 ] >>> image
2019-04-15 08:09:32.632439 [ 17 ] >>> image_folder_path
2019-04-15 08:09:35.429903 [ 20 ] >>> temp_image_file_name
2019-04-15 08:10:58.101557 [ 14 ] >>> filetrans_time
2019-04-15 08:12:06.608032 [ 23 ] >>> temp_log_file_full_path
2019-04-15 08:12:16.562111 [ 20 ] >>> temp_image_full_path
2019-04-15 08:15:23.773613 [ 24 ] >>> def create_temp_graph():
2019-04-15 08:15:23.782983 [ 47 ] >>>     f = open(temp_log_file_full_path, mode="r")
2019-04-15 08:15:23.787940 [ 37 ] >>>     temp_list = f.read().splitlines()
2019-04-15 08:15:23.794311 [ 76 ] >>>     figure(num=None, figsize=(30, 10), dpi=80, facecolor='w', edgecolor='k')
2019-04-15 08:15:23.801208 [ 9 ] >>>     i = 0
2019-04-15 08:15:23.806143 [ 14 ] >>>     x = list()
2019-04-15 08:15:23.810026 [ 14 ] >>>     y = list()
2019-04-15 08:15:23.813955 [ 26 ] >>>     for temp in temp_list:
2019-04-15 08:15:23.817544 [ 17 ] >>>         i = i + 1
2019-04-15 08:15:23.820991 [ 19 ] >>>         x.append(i)
2019-04-15 08:15:23.824439 [ 29 ] >>>         y.append(float(temp))
2019-04-15 08:15:23.829267 [ 21 ] >>>     plt.scatter(x, y)
2019-04-15 08:15:23.832771 [ 18 ] >>>     plt.plot(x, y)
2019-04-15 08:15:23.836196 [ 42 ] >>>     plt.title('Temp Graph', fontsize = 70)
2019-04-15 08:15:23.839665 [ 51 ] >>>     plt.xlabel('Temp Measure Count', fontsize = 30)
2019-04-15 08:15:23.843186 [ 52 ] >>>     plt.ylabel('Time Spent ( sec )', fontsize = 30) 
2019-04-15 08:15:23.846526 [ 37 ] >>>     plt.savefig(temp_image_full_path)
2019-04-15 08:15:23.849944 [ 16 ] >>>     # plt.show()
2019-04-15 08:15:23.896154 [ 25 ] >>> # - info for post message
2019-04-15 08:15:23.908022 [ 22 ] >>> # - info for post file
2019-04-15 08:15:23.917224 [ 13 ] >>> # - file path
2019-04-15 08:15:23.921187 [ 25 ] >>> log_folder_path = "/log/"
2019-04-15 08:15:23.925510 [ 35 ] >>> temp_log_file_name = "temp_log.txt"
2019-04-15 08:15:23.929049 [ 62 ] >>> temp_log_file_full_path = log_folder_path + temp_log_file_name
2019-04-15 08:15:23.934358 [ 29 ] >>> image_folder_path = "/image/"
2019-04-15 08:15:23.937944 [ 39 ] >>> temp_image_file_name = "temp_graph.png"
2019-04-15 08:15:23.941991 [ 63 ] >>> temp_image_full_path = image_folder_path + temp_image_file_name
2019-04-15 08:15:23.977538 [ 66 ] >>> post_a_file_to_slack(temp_image_full_path, channel_id, your_token)
2019-04-15 08:28:17.500508 [ 2 ] >>> 'C
2019-04-15 08:36:15.146842 [ 52 ] >>> no display name and no $DISPLAY environment variable
2019-04-15 08:41:39.217838 [ 10 ] >>> jfaljsdfla
2019-04-15 08:41:39.240141 [ 11 ] >>> ldajflksdjf
2019-04-15 08:41:39.244028 [ 12 ] >>> ldsajflkjsdf
2019-04-15 08:41:39.248042 [ 9 ] >>> ladjfkljf
2019-04-15 23:26:27.287003 [ 19 ] >>> iphone xs max キーボード
2019-04-15 23:39:04.166375 [ 29 ] >>> EXECUTIVE Bluetooth キーボード ケース
2019-04-15 23:39:55.499872 [ 19 ] >>> bluetooth キーボード ケース
2019-04-16 06:13:50.282025 [ 16 ] >>> 6 x 9.2 x 2.2 cm
2019-04-16 06:41:36.784050 [ 12 ] >>> Image.resize
2019-04-16 06:43:56.241327 [ 10 ] >>> Image.open
2019-04-16 06:47:29.784008 [ 21 ] >>> from PIL import Image
2019-04-16 06:48:28.378552 [ 56 ] >>> def resize_image_file_size(log_checking_image_fullpath):
2019-04-16 06:48:28.383412 [ 54 ] >>> 	 foo = Image.open(log_checking_image_fullpath) # 72kb
2019-04-16 06:48:28.392087 [ 45 ] >>> 	 foo = foo.resize((900,700),Image.ANTIALIAS)
2019-04-16 06:48:28.398830 [ 56 ] >>> 	 foo.save(log_checking_image_fullpath, quality=100) # 2
2019-04-16 06:48:57.524950 [ 53 ] >>> 	foo = Image.open(log_checking_image_fullpath) # 72kb
2019-04-16 06:48:57.529043 [ 44 ] >>> 	foo = foo.resize((900,700),Image.ANTIALIAS)
2019-04-16 06:48:57.532555 [ 55 ] >>> 	foo.save(log_checking_image_fullpath, quality=100) # 2
2019-04-16 07:20:03.664617 [ 47 ] >>> 0 * * * * python /usr/local/bin/monitor_temp.py
2019-04-16 07:38:08.210123 [ 57 ] >>> pi@raspberrypi:~/github/my_source_code/tools $ git commit
2019-04-16 07:38:08.221678 [ 31 ] >>> *** Please tell me who you are.
2019-04-16 07:38:08.227206 [ 3 ] >>> Run
2019-04-16 07:38:08.232462 [ 50 ] >>>   git config --global user.email "you@example.com"
2019-04-16 07:38:08.237832 [ 43 ] >>>   git config --global user.name "Your Name"
2019-04-16 07:38:08.243552 [ 39 ] >>> to set your account's default identity.
2019-04-16 07:38:08.247428 [ 58 ] >>> Omit --global to set the identity only in this repository.
2019-04-16 07:38:08.252751 [ 50 ] >>> fatal: empty ident name (for <(null)>) not allowed
2019-04-16 07:38:08.256447 [ 46 ] >>> pi@raspberrypi:~/github/my_source_code/tools $
2019-04-16 07:50:16.302501 [ 51 ] >>> pi@raspberrypi:~/github/my_source_code $ git commit
2019-04-16 07:50:16.338386 [ 92 ] >>> pi@raspberrypi:~/github/my_source_code $ git config --global user.email imjackicle@gmail.com
2019-04-16 07:50:16.345913 [ 81 ] >>> pi@raspberrypi:~/github/my_source_code $ git config --global user.name imjackicle
2019-04-16 07:50:16.355312 [ 54 ] >>> [dev 231f2e3f] add monitoring/cpu_temp_check_slack_img
2019-04-16 07:50:16.361201 [ 35 ] >>>  3 files changed, 983 insertions(+)
2019-04-16 07:50:16.365300 [ 82 ] >>>  create mode 100644 tools/monitoring/cpu_temp_check_slack_img/image/temp_graph.png
2019-04-16 07:50:16.368970 [ 78 ] >>>  create mode 100644 tools/monitoring/cpu_temp_check_slack_img/log/temp_log.txt
2019-04-16 07:50:16.374587 [ 77 ] >>>  create mode 100755 tools/monitoring/cpu_temp_check_slack_img/monitor_temp.py
2019-04-16 07:50:16.378829 [ 51 ] >>> pi@raspberrypi:~/github/my_source_code $ git status
2019-04-16 07:50:16.385446 [ 13 ] >>> On branch dev
2019-04-16 07:50:16.391782 [ 49 ] >>> Your branch is ahead of 'origin/dev' by 1 commit.
2019-04-16 07:50:16.399497 [ 48 ] >>>   (use "git push" to publish your local commits)
2019-04-16 07:50:16.405600 [ 37 ] >>> nothing to commit, working tree clean
2019-04-16 07:50:16.412754 [ 49 ] >>> pi@raspberrypi:~/github/my_source_code $ git push
2019-04-16 07:50:16.416907 [ 45 ] >>> Username for 'https://github.com': imjackicle
2019-04-16 07:50:16.422751 [ 45 ] >>> Password for 'https://imjackicle@github.com':
2019-04-16 07:50:16.432721 [ 27 ] >>> Counting objects: 10, done.
2019-04-16 07:50:16.438711 [ 40 ] >>> Delta compression using up to 4 threads.
2019-04-16 07:50:16.446829 [ 38 ] >>> Compressing objects: 100% (8/8), done.
2019-04-16 07:50:16.452913 [ 59 ] >>> Writing objects: 100% (10/10), 93.33 KiB | 0 bytes/s, done.
2019-04-16 07:50:16.458869 [ 38 ] >>> Total 10 (delta 2), reused 0 (delta 0)
2019-04-16 07:50:16.463044 [ 69 ] >>> remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
2019-04-16 07:50:16.466800 [ 53 ] >>> To https://github.com/21centuryguy/my_source_code.git
2019-04-16 07:50:16.472555 [ 33 ] >>>    bae9516b..231f2e3f  dev -> dev
2019-04-16 07:50:16.482843 [ 40 ] >>> pi@raspberrypi:~/github/my_source_code $
2019-04-16 07:51:57.825336 [ 54 ] >>> iphone tethering android tablet authentication problem
2019-04-16 07:52:45.701975 [ 44 ] >>> https://discussions.apple.com/thread/8584297
2019-04-16 07:53:17.848452 [ 8 ] >>> tekfranz
2019-04-16 07:53:17.856283 [ 19 ] >>> User level: Level 1
2019-04-16 07:53:17.860963 [ 11 ] >>> (39 points)
2019-04-16 07:53:17.865343 [ 36 ] >>> iCloudSpeciality level out of ten: 1
2019-04-16 07:53:17.869069 [ 47 ] >>> Oct 20, 2018 7:42 PM in response to slava_flash
2019-04-16 07:53:17.874740 [ 373 ] >>> I am having the same issue. Windows and Apple Laptops connect fine to the iPhone xs Hotspot. Bluetooth internet also works to the Our Samsung Galaxy Tab A's but when we use the WiFi fromt he Personal hotspot the Android tablets cannot stay connected. They act like they are authenticating and the Hotspot briefly shows them connected but then the connection never finishes.
2019-04-16 07:53:17.880471 [ 79 ] >>> Troubleshooting we have tried on multiple iPhone XS and Samsung Galaxy Tab A's:
2019-04-16 07:53:17.884436 [ 30 ] >>> Verifying the Wi-Fi Passwords.
2019-04-16 07:53:17.888371 [ 23 ] >>> Rebooting Both Devices.
2019-04-16 07:53:17.892269 [ 23 ] >>> Toggling Airplane Mode.
2019-04-16 07:53:17.896122 [ 24 ] >>> Trying with Bluetooth on
2019-04-16 07:53:17.899953 [ 26 ] >>> Trying with Bluetooth Off.
2019-04-16 07:53:17.903922 [ 67 ] >>> Turning off our Home WiFi in case there was frequency interference.
2019-04-16 07:53:17.907942 [ 66 ] >>> Changing Both the iPhone Name and the WiFi Password on the iPhone.
2019-04-16 07:53:17.911929 [ 34 ] >>> Manually configuring a Connection.
2019-04-16 07:53:17.915791 [ 29 ] >>> Resetting the Android Device.
2019-04-16 07:53:17.921699 [ 78 ] >>> Nothing helps so I guess we switch from Androids to iPad until there is a fix?
2019-04-16 07:53:17.925819 [ 42 ] >>> Reply Helpful  Thread reply - more options
2019-04-16 07:53:17.929728 [ 42 ] >>> User profile for user: Andrew--- Andrew---
2019-04-16 07:53:17.933783 [ 9 ] >>> Andrew---
2019-04-16 07:53:17.939721 [ 10 ] >>> (4 points)
2019-04-16 07:53:17.943644 [ 44 ] >>> Oct 20, 2018 7:49 PM in response to tekfranz
2019-04-16 07:53:17.949363 [ 250 ] >>> You could try changing the hotspot to not using a password to see if you're able to connect without authentication, or change the password encryption to WEP. These aren't great ideas for permanent solutions but could get it to work in the short term.
2019-04-16 07:53:17.955310 [ 40 ] >>> User profile for user: tekfranz tekfranz
2019-04-16 07:53:17.966746 [ 45 ] >>> Oct 20, 2018 7:52 PM in response to Andrew---
2019-04-16 07:53:17.973210 [ 85 ] >>> Yes I wanted to do that,but I don't believe there is an option for WEP on the iPhone.
2019-04-16 07:53:17.979452 [ 36 ] >>> User profile for user: Dan4n4 Dan4n4
2019-04-16 07:53:17.983656 [ 6 ] >>> Dan4n4
2019-04-16 07:53:17.991631 [ 47 ] >>> Nov 24, 2018 2:11 AM in response to slava_flash
2019-04-16 07:53:17.998298 [ 201 ] >>> I’m having the same problem connecting my xiaomi phone to iphone xs. Previously worked without any problems connecting to iphone6s. Tried all combinations i can think of, rebooting, etc.  DOESNT WORK! 
2019-04-16 07:53:18.005053 [ 50 ] >>> For now, switched to connect via bluetooth instead
2019-04-16 07:53:18.010533 [ 46 ] >>> Reply Helpful (1)  Thread reply - more options
2019-04-16 07:53:18.014819 [ 40 ] >>> User profile for user: hezilaer hezilaer
2019-04-16 07:53:18.019286 [ 8 ] >>> hezilaer
2019-04-16 07:53:18.025356 [ 10 ] >>> (8 points)
2019-04-16 07:53:18.029732 [ 42 ] >>> Nov 29, 2018 2:01 PM in response to Dan4n4
2019-04-16 07:53:18.035883 [ 295 ] >>> I'm having the exact same problem with u using the same xiaomi phone. Is there any ways we can resolve this? I've tried connecting hotspot to the other iPhone 6/7 and there's no problem. Seems to be isolated to iphone Xs/ Max... Such an expensive device but the simplest function unable to work.
2019-04-16 07:53:18.040154 [ 46 ] >>> Reply Helpful (3)  Thread reply - more options
2019-04-16 07:53:18.044715 [ 11 ] >>> Page 1 of 1
2019-04-16 07:54:55.724839 [ 26 ] >>> [[[[[[[[[[[[[]]]]]]]]]]]]]
2019-04-16 07:54:55.729612 [ 26 ] >>> [[[                    ]]]
2019-04-16 07:54:55.733777 [ 26 ] >>> [[[       python       ]]]
2019-04-16 07:54:55.747840 [ 19 ] >>> [ set python path ]
2019-04-16 07:54:55.754438 [ 17 ] >>> #!/usr/bin/python
2019-04-16 07:54:55.761982 [ 5 ] >>> -----
2019-04-16 07:54:55.768559 [ 45 ] >>> [ set encoding as utf-8 ( for source code ) ]
2019-04-16 07:54:55.774619 [ 23 ] >>> # -*- Coding: utf-8 -*-
2019-04-16 07:54:55.786592 [ 43 ] >>> [ set encoding as utf-8 ( for read data ) ]
2019-04-16 07:54:55.792608 [ 55 ] >>> import sys; reload(sys); sys.setdefaultencoding('utf8')
2019-04-16 07:54:55.804546 [ 21 ] >>> [ call func by name ]
2019-04-16 07:54:55.810713 [ 26 ] >>> if __name__ == '__main__':
2019-04-16 07:54:55.822828 [ 16 ] >>> [ py2app build ]
2019-04-16 07:54:55.828828 [ 25 ] >>> python setup.py py2app -A
2019-04-16 07:54:55.840989 [ 19 ] >>> [ update combobox ]
2019-04-16 07:54:55.847192 [ 24 ] >>> listbox.delete(0, 'end')
2019-04-16 07:54:55.851238 [ 34 ] >>> data = sorted(data, key=str.lower)
2019-04-16 07:54:55.855567 [ 17 ] >>> for item in data:
2019-04-16 07:54:55.859653 [ 27 ] >>> listbox.insert('end', item)
2019-04-16 07:54:55.872455 [ 19 ] >>> [ gui file select ]
2019-04-16 07:54:55.878910 [ 19 ] >>> root = tkinter.Tk()
2019-04-16 07:54:55.883168 [ 15 ] >>> root.withdraw()
2019-04-16 07:54:55.887530 [ 145 ] >>> target_buitin_lib_path = tkinter.filedialog.askdirectory(parent=root,initialdir="/Users/jack/miniconda2/envs/",title='Please select a directory')
2019-04-16 07:54:55.918604 [ 32 ] >>> [ remove an element from array ]
2019-04-16 07:54:55.926327 [ 10 ] >>> - python -
2019-04-16 07:54:55.931694 [ 28 ] >>> >>> a = ['a', 'b', 'c', 'd']
2019-04-16 07:54:55.936329 [ 17 ] >>> >>> a.remove('b')
2019-04-16 07:54:55.940651 [ 11 ] >>> >>> print a
2019-04-16 07:54:55.944990 [ 15 ] >>> ['a', 'c', 'd']
2019-04-16 07:54:55.951313 [ 5 ] >>> - c -
2019-04-16 07:54:55.955579 [ 3 ] >>> xxx
2019-04-16 07:54:55.960002 [ 7 ] >>> - c++ -
2019-04-16 07:54:55.968802 [ 6 ] >>> - c# -
2019-04-16 07:54:55.977596 [ 8 ] >>> - java -
2019-04-16 07:54:55.990389 [ 31 ] >>> [ date time with microseconds ]
2019-04-16 07:54:56.001422 [ 29 ] >>> from datetime import datetime
2019-04-16 07:54:56.006164 [ 38 ] >>> datetime.now().strftime("%H:%M:%S.%f")
2019-04-16 07:54:56.021576 [ 12 ] >>> [ get size ]
2019-04-16 07:54:56.029746 [ 13 ] >>> >>> import os
2019-04-16 07:54:56.035339 [ 53 ] >>> >>> your_file_size = os.path.getsize("/path/foo.txt")
2019-04-16 07:54:56.047912 [ 47 ] >>> [ make path from zero ( folder or even file ) ]
2019-04-16 07:54:56.054991 [ 25 ] >>> import distutils.dir_util
2019-04-16 07:54:56.059679 [ 48 ] >>> distutils.dir_util.mkpath(your_folder_file_path)
2019-04-16 07:54:56.070988 [ 26 ] >>> [ resize image file size ]
2019-04-16 07:54:56.082089 [ 47 ] >>> def resize_image_file_size(original_file_path):
2019-04-16 07:54:56.086993 [ 37 ] >>> 	foo = Image.open(original_file_path)
2019-04-16 07:54:56.093571 [ 40 ] >>> 	foo.save(result_file_path, quality=100)
2019-04-16 07:54:56.104841 [ 10 ] >>> [ shutil ]
2019-04-16 07:54:56.111343 [ 13 ] >>> import shutil
2019-04-16 07:54:56.115883 [ 37 ] >>> shutil.copy(source_path, target_path)
2019-04-16 07:54:56.126491 [ 16 ] >>> [ resize image ]
2019-04-16 07:54:56.183709 [ 7 ] >>> [ xxx ]
2019-04-16 07:54:56.220006 [ 4 ] >>> ----
2019-04-16 07:54:56.416669 [ 34 ] >>> [[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]
2019-04-16 07:54:56.421753 [ 34 ] >>> [[[                            ]]]
2019-04-16 07:54:56.426605 [ 34 ] >>> [[[      python selenium       ]]]
2019-04-16 07:54:56.445523 [ 20 ] >>> [ change font-size ]
2019-04-16 07:54:56.454094 [ 10 ] >>> [ syntax ]
2019-04-16 07:54:56.459284 [ 77 ] >>> driver.execute_script("$(' `target section in css` ').css('zoom',{number});")
2019-04-16 07:54:56.467082 [ 11 ] >>> [ example ]
2019-04-16 07:54:56.471805 [ 53 ] >>> driver.execute_script("$('.mygrid').css('zoom', 1);")
2019-04-16 07:54:56.476302 [ 55 ] >>> driver.execute_script("$('.mygrid').css('zoom', 0.5);")
2019-04-16 07:54:56.480838 [ 55 ] >>> driver.execute_script("$('.mygrid').css('zoom', 0.7);")
2019-04-16 07:54:56.487531 [ 90 ] >>> https://stackoverflow.com/questions/18303387/python-selenium-change-texts-size-zoomsetting
2019-04-16 07:54:56.498567 [ 25 ] >>> [ change browser zoom % ]
2019-04-16 07:54:56.508147 [ 61 ] >>> driver.execute_script("document.body.style.zoom='{number}%'")
2019-04-16 07:54:56.518479 [ 56 ] >>> driver.execute_script("document.body.style.zoom='100%'")
2019-04-16 07:54:56.523786 [ 56 ] >>> driver.execute_script("document.body.style.zoom='150%'")
2019-04-16 07:54:56.528396 [ 55 ] >>> driver.execute_script("document.body.style.zoom='50%'")
2019-04-16 07:54:56.535305 [ 113 ] >>> https://stackoverflow.com/questions/28111539/can-we-zoom-the-browser-window-in-python-selenium-webdriver/47086145
2019-04-16 07:54:56.546597 [ 43 ] >>> [ press down key ( kind of mouse scroll ) ]
2019-04-16 07:54:56.556249 [ 64 ] >>> from selenium.webdriver.common.action_chains import ActionChains
2019-04-16 07:54:56.564324 [ 16 ] >>> def move_donw():
2019-04-16 07:54:56.569358 [ 31 ] >>> 	actions = ActionChains(driver)
2019-04-16 07:54:56.574145 [ 44 ] >>> 	actions.send_keys(Keys.PAGE_DOWN).perform()
2019-04-16 07:54:56.585505 [ 54 ] >>> [ press down key ( exactly equal to press down key ) ]
2019-04-16 07:54:56.592474 [ 16 ] >>> import pyautogui
2019-04-16 07:54:56.597187 [ 23 ] >>> pyautogui.press('down')
2019-04-16 07:54:56.625814 [ 33 ] >>> [[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]
2019-04-16 07:54:56.630608 [ 33 ] >>> [[[                           ]]]
2019-04-16 07:54:56.635330 [ 33 ] >>> [[[       python - tkinter    ]]]
2019-04-16 07:54:56.653381 [ 13 ] >>> [ iconify() ]
2019-04-16 07:54:56.660314 [ 14 ] >>> root.iconify()
2019-04-16 07:54:56.668129 [ 32 ] >>> command=lambda:[root.iconify()])
2019-04-16 07:54:56.672714 [ 40 ] >>> command=lambda:[root.iconify(), quit()])
2019-04-16 07:54:56.679521 [ 63 ] >>> http://www.java2s.com/Code/Python/GUI-Tk/FrameactionIconify.htm
2019-04-16 07:54:56.744179 [ 26 ] >>> [[[         git        ]]]
2019-04-16 07:54:56.764916 [ 36 ] >>> [ git status / add / commit / push ]
2019-04-16 07:54:56.928157 [ 26 ] >>> [[[     bash script    ]]]
2019-04-16 07:54:56.947347 [ 14 ] >>> [ while bash ]
2019-04-16 07:54:57.028052 [ 26 ] >>> [[[       xxxxxx       ]]]
2019-04-17 06:19:39.330108 [ 58 ] >>> file:///Users/jack/Desktop/Linux_Distribution_Timeline.svg
2019-04-17 06:23:02.582477 [ 8 ] >>> Chromium
2019-04-17 06:26:12.231981 [ 77 ] >>> sudo dpkg -i chromium-chromedriver_61.0.3163.79-0ubuntu0.14.04.1196_armhf.deb
2019-04-17 06:30:33.517795 [ 46 ] >>> Finding Your Raspberry Pi’s System Information
2019-04-17 06:31:41.086341 [ 71 ] >>> https://www.maketecheasier.com/finding-raspberry-pi-system-information/
2019-04-17 06:31:52.854651 [ 17 ] >>> cat /proc/cpuinfo
2019-04-17 06:38:35.463052 [ 8 ] >>> chromium
2019-04-17 06:39:13.501296 [ 13 ] >>> 72.0.3626.121
2019-04-17 06:41:33.830819 [ 102 ] >>> http://launchpadlibrarian.net/412924840/chromium-chromedriver_72.0.3626.119-0ubuntu0.16.04.1_armhf.deb
2019-04-17 06:44:45.498852 [ 12 ] >>> chromedriver
2019-04-17 06:52:00.110134 [ 23 ] >>> #! /usr/bin/env python3
2019-04-17 06:52:00.125585 [ 10 ] >>> import sys
2019-04-17 06:52:00.130624 [ 63 ] >>> sys.path.append('/home/pi/.local/lib/python3.5/site-packages/')
2019-04-17 06:52:00.135494 [ 30 ] >>> from selenium import webdriver
2019-04-17 06:52:00.142741 [ 84 ] >>> browser = webdriver.Chrome(executable_path="/usr/lib/chromium-browser/chromedriver")
2019-04-17 06:52:00.147705 [ 38 ] >>> browser.get('https://www.google.com/')
2019-04-17 07:06:03.780624 [ 53 ] >>> from selenium.webdriver.chrome.options import Options
2019-04-17 07:07:23.343087 [ 22 ] >>> 			options = Options()
2019-04-17 07:07:23.351754 [ 37 ] >>> 			options.add_argument('--headless')
2019-04-17 07:07:23.357227 [ 40 ] >>> 			options.add_argument('--disable-gpu')
2019-04-17 07:07:23.363585 [ 55 ] >>> 			self.driver=webdriver.Chrome(chrome_options=options)
2019-04-17 07:53:41.536100 [ 16 ] >>> //*[@id="query"]
2019-04-17 07:58:33.660831 [ 29 ] >>> //*[@id="search_btn"]/span[2]
2019-04-17 08:12:21.741634 [ 14 ] >>> exchange rate,
2019-04-17 08:14:33.309683 [ 84 ] >>> pi@raspberrypi:~/github/local/automation/selenium/python/raspberry_chromium $ ls -ll
2019-04-17 08:14:33.318395 [ 8 ] >>> total 56
2019-04-17 08:14:33.323699 [ 48 ] >>> drwxr-xr-x 2 pi pi  4096 Apr 17 07:42 screenshot
2019-04-17 08:14:33.329643 [ 46 ] >>> -rw-r--r-- 1 pi pi   266 Apr 17 06:54 test1.py
2019-04-17 08:14:33.334865 [ 46 ] >>> -rw-r--r-- 1 pi pi   670 Apr 17 07:13 test2.py
2019-04-17 08:14:33.339675 [ 46 ] >>> -rw-r--r-- 1 pi pi 39123 Apr 17 06:59 test.png
2019-04-17 08:14:33.344513 [ 45 ] >>> -rw-r--r-- 1 pi pi   809 Apr 17 07:42 test.py
2019-04-17 08:14:33.349245 [ 90 ] >>> pi@raspberrypi:~/github/local/automation/selenium/python/raspberry_chromium $ cat test2.py
2019-04-17 08:14:33.370034 [ 22 ] >>> # --------------------
2019-04-17 08:14:33.377258 [ 91 ] >>> screenshot_save_path = "screenshot/" + str(strftime("%Y%m%d_%H%M%S", localtime())) + ".png"
2019-04-17 08:14:33.386605 [ 23 ] >>> # ---------------------
2019-04-17 08:14:33.391318 [ 20 ] >>> # --- driver setting
2019-04-17 08:14:33.396189 [ 19 ] >>> options = Options()
2019-04-17 08:14:33.402294 [ 34 ] >>> options.add_argument('--headless')
2019-04-17 08:14:33.407667 [ 37 ] >>> options.add_argument('--disable-gpu')
2019-04-17 08:14:33.412695 [ 49 ] >>> driver = webdriver.Chrome(chrome_options=options)
2019-04-17 08:14:33.417622 [ 67 ] >>> # driver= webdriver.Chrome(executable_path="/usr/bin/chromedriver")
2019-04-17 08:14:33.427060 [ 18 ] >>> # --- open browser
2019-04-17 08:14:33.431852 [ 37 ] >>> driver.get('https://www.google.com/')
2019-04-17 08:14:33.436821 [ 44 ] >>> driver.save_screenshot(screenshot_save_path)
2019-04-17 08:14:33.444138 [ 97 ] >>> pi@raspberrypi:~/github/local/automation/selenium/python/raspberry_chromium $ cp test.py test3.py
2019-04-17 08:14:33.451053 [ 97 ] >>> pi@raspberrypi:~/github/local/automation/selenium/python/raspberry_chromium $ cp test.py test4.py
2019-04-17 08:14:33.456125 [ 83 ] >>> pi@raspberrypi:~/github/local/automation/selenium/python/raspberry_chromium $ clear
2019-04-17 08:14:33.463354 [ 27 ] >>>   1 # -*- coding: utf-8 -*-
2019-04-17 08:14:33.468352 [ 3 ] >>>   2
2019-04-17 08:14:33.473298 [ 14 ] >>>   3 import sys
2019-04-17 08:14:33.478295 [ 34 ] >>>   4 from selenium import webdriver
2019-04-17 08:14:33.483121 [ 57 ] >>>   5 from selenium.webdriver.chrome.options import Options
2019-04-17 08:14:33.487841 [ 15 ] >>>   6 import time
2019-04-17 08:14:33.492762 [ 40 ] >>>   7 from time import localtime, strftime
2019-04-17 08:14:33.497843 [ 3 ] >>>   8
2019-04-17 08:14:33.502758 [ 3 ] >>>   9
2019-04-17 08:14:33.507755 [ 26 ] >>>  10 # --------------------
2019-04-17 08:14:33.512645 [ 13 ] >>>  11 # --- var
2019-04-17 08:14:33.517616 [ 95 ] >>>  12 screenshot_save_path = "screenshot/" + str(strftime("%Y%m%d_%H%M%S", localtime())) + ".png"
2019-04-17 08:14:33.522664 [ 3 ] >>>  13
2019-04-17 08:14:33.527635 [ 17 ] >>>  14 class Mytest:
2019-04-17 08:14:33.532530 [ 3 ] >>>  15
2019-04-17 08:14:33.537644 [ 27 ] >>>  16     def __init__(self):
2019-04-17 08:14:33.542746 [ 31 ] >>>  17         options = Options()
2019-04-17 08:14:33.547746 [ 46 ] >>>  18         options.add_argument('--headless')
2019-04-17 08:14:33.552621 [ 49 ] >>>  19         options.add_argument('--disable-gpu')
2019-04-17 08:14:33.557647 [ 66 ] >>>  20         self.driver = webdriver.Chrome(chrome_options=options)
2019-04-17 08:14:33.563942 [ 3 ] >>>  21
2019-04-17 08:14:33.569264 [ 29 ] >>>  22     def do_mytest (self):
2019-04-17 08:14:33.574241 [ 32 ] >>>  23         driver = self.driver
2019-04-17 08:14:33.579165 [ 3 ] >>>  24
2019-04-17 08:14:33.584157 [ 41 ] >>>  25         # ---------------------------
2019-04-17 08:14:33.589197 [ 37 ] >>>  26         # --- function definition
2019-04-17 08:14:33.594174 [ 3 ] >>>  27
2019-04-17 08:14:33.599239 [ 37 ] >>>  28         def open_browser(driver):
2019-04-17 08:14:33.604408 [ 50 ] >>>  29             driver.set_window_size(1400, 1000)
2019-04-17 08:14:33.609314 [ 52 ] >>>  30             driver.get('https://www.naver.com/')
2019-04-17 08:14:33.614263 [ 60 ] >>>  31             driver.save_screenshot(screenshot_save_path)
2019-04-17 08:14:33.619282 [ 3 ] >>>  32
2019-04-17 08:14:33.625900 [ 60 ] >>>  33         def search_with_keyword(driver, target_keyword):
2019-04-17 08:14:33.630989 [ 53 ] >>>  34             search_box_xpath = "//*[@id='query']"
2019-04-17 08:14:33.635934 [ 69 ] >>>  35             search_button_xpath = "//*[@id='search_btn']/span[2]"
2019-04-17 08:14:33.640848 [ 70 ] >>>  36             driver.find_element_by_xpath(search_box_xpath).click()
2019-04-17 08:14:33.645877 [ 88 ] >>>  37             driver.find_element_by_xpath(search_box_xpath).send_keys(target_keyword)
2019-04-17 08:14:33.650765 [ 73 ] >>>  38             driver.find_element_by_xpath(search_button_xpath).click()
2019-04-17 08:14:33.655648 [ 29 ] >>>  39             time.sleep(1)
2019-04-17 08:14:33.660666 [ 60 ] >>>  40             driver.save_screenshot(screenshot_save_path)
2019-04-17 08:14:33.665694 [ 3 ] >>>  41
2019-04-17 08:14:33.670701 [ 3 ] >>>  42
2019-04-17 08:14:33.675735 [ 37 ] >>>  43         # -----------------------
2019-04-17 08:14:33.680763 [ 31 ] >>>  44         # --- call function
2019-04-17 08:14:33.685812 [ 32 ] >>>  45         open_browser(driver)
2019-04-17 08:14:33.690964 [ 51 ] >>>  46         target_keyword = "exchange rate" # "환율"
2019-04-17 08:14:33.696383 [ 55 ] >>>  47         search_with_keyword(driver, target_keyword)
2019-04-17 08:14:33.701461 [ 3 ] >>>  48
2019-04-17 08:14:33.706501 [ 3 ] >>>  49
2019-04-17 08:14:33.711611 [ 17 ] >>>  50 ob = Mytest()
2019-04-17 08:14:33.716745 [ 18 ] >>>  51 ob.do_mytest()
2019-04-17 08:14:33.721875 [ 1 ] >>> ~
2019-04-17 08:14:33.771620 [ 133 ] >>>                                                                                                                     12,25         All
2019-04-17 08:14:47.103657 [ 68 ] >>> "screenshot/" + str(strftime("%Y%m%d_%H%M%S", localtime())) + ".png"
2019-04-17 08:19:35.038410 [ 42 ] >>> Last login: Wed Apr 17 06:55:20 on ttys002
2019-04-17 08:19:35.049070 [ 6 ] >>> jack ~
2019-04-17 08:19:35.054808 [ 20 ] >>> $ ssh pi@172.20.10.4
2019-04-17 08:19:35.059948 [ 26 ] >>> pi@172.20.10.4's password:
2019-04-17 08:19:35.065330 [ 75 ] >>> Linux raspberrypi 4.14.98-v7+ #1200 SMP Tue Feb 12 20:27:48 GMT 2019 armv7l
2019-04-17 08:19:35.075071 [ 73 ] >>> The programs included with the Debian GNU/Linux system are free software;
2019-04-17 08:19:35.080362 [ 66 ] >>> the exact distribution terms for each program are described in the
2019-04-17 08:19:35.085512 [ 47 ] >>> individual files in /usr/share/doc/*/copyright.
2019-04-17 08:19:35.093641 [ 65 ] >>> Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
2019-04-17 08:19:35.101075 [ 28 ] >>> permitted by applicable law.
2019-04-17 08:19:35.106996 [ 18 ] >>> You have new mail.
2019-04-17 08:19:35.112126 [ 53 ] >>> Last login: Wed Apr 17 06:04:03 2019 from 172.20.10.3
2019-04-17 08:19:35.117377 [ 18 ] >>> pi@raspberrypi:~ $
2019-04-17 08:19:35.127377 [ 31 ] >>> pi@raspberrypi:~ $ cd /home/pi/
2019-04-17 08:19:35.132393 [ 113 ] >>> .cache/            Documents/         .gnupg/            Music/             .pki/              thinclient_drives/
2019-04-17 08:19:35.137369 [ 102 ] >>> .config/           Downloads/         .local/            .nano/             Public/            Videos/
2019-04-17 08:19:35.142620 [ 100 ] >>> Desktop/           github/            MagPi/             Pictures/          Templates/         .vnc/
2019-04-17 08:19:35.167606 [ 44 ] >>> pi@raspberrypi:~ $ cd /home/pi/github/local/
2019-04-17 08:19:35.172721 [ 112 ] >>> algorithms/       build_app/        game_programming/ learning/         snippets/         web_programming/  zen/
2019-04-17 08:19:35.177777 [ 97 ] >>> automation/       framework/        just_try_it/      project/          tools/            widget/
2019-04-17 08:19:35.191351 [ 86 ] >>> pi@raspberrypi:~ $ cd /home/pi/github/local/tools/monitoring/cpu_temp_check_slack_img/
2019-04-17 08:19:35.196983 [ 11 ] >>> image/ log/
2019-04-17 08:19:35.224130 [ 79 ] >>> pi@raspberrypi:~/github/local/tools/monitoring/cpu_temp_check_slack_img $ clear
2019-04-17 08:19:35.255835 [ 40 ] >>> import matplotlib; matplotlib.use('Agg')
2019-04-17 08:19:35.283057 [ 36 ] >>>     temp = temp.replace("temp=", "")
2019-04-17 08:19:35.288145 [ 33 ] >>>     temp = temp.replace("'C", "")
2019-04-17 08:19:35.293156 [ 50 ] >>>     with open(temp_log_file_full_path, "a+") as f:
2019-04-17 08:19:35.298335 [ 21 ] >>>         f.write(temp)
2019-04-17 08:19:35.303372 [ 15 ] >>>     return temp
2019-04-17 08:19:35.350417 [ 55 ] >>>     plt.title('Raspbery CPU Temp Graph', fontsize = 70)
2019-04-17 08:19:35.355801 [ 59 ] >>>     plt.xlabel('Temp Measure Count(/ 1min)', fontsize = 30)
2019-04-17 08:19:35.362572 [ 46 ] >>>     plt.ylabel("CPU Temp ('C)", fontsize = 30)
2019-04-17 08:19:35.413002 [ 29 ] >>> def resize_image_file_size():
2019-04-17 08:19:35.420383 [ 49 ] >>>     foo = Image.open(temp_image_full_path) # 72kb
2019-04-17 08:19:35.427783 [ 48 ] >>>     foo = foo.resize((1200,400),Image.ANTIALIAS)
2019-04-17 08:19:35.433820 [ 51 ] >>>     foo.save(temp_image_full_path, quality=100) # 2
2019-04-17 08:19:35.451286 [ 15 ] >>> monitor_temp.py
2019-04-17 08:28:32.300962 [ 9 ] >>> CHY79JN3X
2019-04-18 06:18:56.699235 [ 46 ] >>> http://rosettacode.org/wiki/Help:Similar_Sites
2019-04-18 06:22:13.444386 [ 9 ] >>> insertion
2019-04-18 06:29:27.337262 [ 66 ] >>> http://www.cplusplus.com/reference/ostream/ostream/operator%3C%3C/
2019-04-18 06:33:45.958949 [ 54 ] >>> http://www.hamyeondoinda.com/jack_mediawiki/index.php/
2019-04-18 06:33:46.385737 [ 13 ] >>> New_page_test
2019-04-18 06:37:05.040299 [ 6 ] >>> object
2019-04-18 06:37:19.941561 [ 22 ] >>> Standard output stream
2019-04-18 06:37:28.336030 [ 23 ] >>> Object of class ostream
2019-04-18 06:37:38.910894 [ 151 ] >>> Object of class ostream that represents the standard output stream oriented to narrow characters (of type char). It corresponds to the C stream stdout.
2019-04-18 06:37:44.562063 [ 57 ] >>> http://www.cplusplus.com/reference/iostream/cout/?kw=cout
2019-04-18 06:38:42.137337 [ 58 ] >>> What is the difference between printf () & cout () in C++?
2019-04-18 06:38:57.443266 [ 71 ] >>> https://www.quora.com/What-is-the-difference-between-printf-cout-in-C++
2019-04-18 06:39:13.230119 [ 6 ] >>> printf
2019-04-18 06:40:22.906378 [ 24 ] >>> std::ostream::operator<<
2019-04-18 06:42:14.989784 [ 61 ] >>> http://rigaux.org/language-study/syntax-across-languages.html
2019-04-18 06:42:34.468813 [ 23 ] >>> syntax-across-languages
2019-04-18 06:43:42.110172 [ 22 ] >>> http://rosettacode.org
2019-04-18 06:43:49.241679 [ 54 ] >>> http://rosettacode.org/wiki/Category:Programming_Tasks
2019-04-18 06:47:42.961689 [ 71 ] >>> https://commons.wikimedia.org/wiki/File:Linux_Distribution_Timeline.svg
2019-04-18 06:47:56.960434 [ 36 ] >>> File:Linux Distribution Timeline.svg
2019-04-18 06:52:18.215686 [ 33 ] >>> https://www.mamedev.org/index.php
2019-04-18 06:53:32.394201 [ 48 ] >>> How to Download Game Roms for retropie & Install
2019-04-18 06:53:42.666997 [ 59 ] >>> https://trickiknow.com/download-game-roms-retropie-install/
2019-04-18 06:55:03.723352 [ 37 ] >>> https://coolrom.com.au/emulators/mac/
2019-04-18 06:55:11.576824 [ 33 ] >>> https://coolrom.com.au/emulators/
2019-04-18 06:56:50.213444 [ 54 ] >>> How do I check if a package is installed on my server?
2019-04-18 06:56:56.298807 [ 92 ] >>> https://askubuntu.com/questions/423355/how-do-i-check-if-a-package-is-installed-on-my-server
2019-04-18 06:57:24.626735 [ 27 ] >>> sudo dpkg -S {package_name}
2019-04-18 06:58:34.691480 [ 39 ] >>> pi@raspberrypi:~ $ dpkg -l | grep chrom
2019-04-18 06:58:34.698673 [ 144 ] >>> ii  chromium-browser                          72.0.3626.121-0+rpt4              armhf        Chromium web browser, open-source version of Chrome
2019-04-18 06:58:34.706504 [ 127 ] >>> ii  chromium-browser-l10n                     72.0.3626.121-0+rpt4              all          chromium-browser language packages
2019-04-18 06:58:34.711830 [ 134 ] >>> ii  chromium-chromedriver                     72.0.3626.119-0ubuntu0.16.04.1    armhf        WebDriver driver for the Chromium Browser
2019-04-18 06:58:34.717215 [ 137 ] >>> ii  chromium-codecs-ffmpeg-extra              72.0.3626.121-0+rpt4              armhf        Extra ffmpeg codecs for the Chromium Browser
2019-04-18 06:58:34.725227 [ 118 ] >>> ii  libchromaprint1:armhf                     1.4.2-1                           armhf        audio fingerprint library
2019-04-18 06:58:34.730737 [ 131 ] >>> ii  rpi-chromium-mods                         20190409                          armhf        Raspberry Pi-specific mods to Chromium
2019-04-18 07:00:10.078484 [ 94 ] >>> https://launchpad.net/ubuntu/xenial/armhf/chromium-chromedriver/72.0.3626.119-0ubuntu0.16.04.1
2019-04-18 07:00:31.534640 [ 21 ] >>> chromium-chromedriver
2019-04-18 07:00:38.696018 [ 64 ] >>> https://launchpad.net/ubuntu/xenial/armhf/chromium-chromedriver/
2019-04-18 07:01:52.031788 [ 23 ] >>> $ pip3 install selenium
2019-04-18 07:02:59.140079 [ 44 ] >>> ls -l /usr/lib/chromium-browser/chromedriver
2019-04-18 07:08:30.550474 [ 22 ] >>> http://zum.com/#!/home
2019-04-18 07:09:28.467567 [ 21 ] >>> //*[@id="searchText"]
2019-04-18 07:10:20.520500 [ 28 ] >>> //*[@id="searchSubmit"]/span
2019-04-18 07:21:11.539185 [ 81 ] >>> http://search.zum.com/search.zum?method=uni&option=accu&qm=f_typing&rd=1&query=환율
2019-04-18 07:35:26.067939 [ 22 ] >>> https://torrentwal.com
2019-04-18 07:36:03.955839 [ 32 ] >>> https://thepiratebay.org/top/601
2019-04-18 07:37:36.695953 [ 35 ] >>> http://www.jma.go.jp/jma/index.html
2019-04-18 07:50:37.710373 [ 11 ] >>> os.getcwd()
2019-04-18 07:53:10.908104 [ 42 ] >>> os.path.dirname(os.path.abspath(__file__))
2019-04-18 08:01:21.069399 [ 37 ] >>> http://www.jma.go.jp/jp/yoho/319.html
2019-04-18 08:05:04.553865 [ 37 ] >>> sudo apt-get install ttf-unfonts-core
2019-04-18 08:10:59.751165 [ 57 ] >>> https://www.raspberrypi.org/forums/viewtopic.php?t=152665
2019-04-18 08:12:10.410773 [ 25 ] >>> sudo apt-get install ibus
2019-04-18 08:12:10.421531 [ 32 ] >>> sudo apt-get install ibus-hangul
2019-04-18 08:12:37.678183 [ 18 ] >>> fonts-unfonts-core
2019-04-18 08:13:53.704566 [ 50 ] >>> If you mean the directory of the script being run:
2019-04-18 08:14:13.595796 [ 42 ] >>> If you mean the current working directory:
2019-04-18 08:14:34.221590 [ 54 ] >>> $$$ If you mean the directory of the script being run:
2019-04-18 08:14:34.235315 [ 12 ] >>> ```import os
2019-04-18 08:14:34.241688 [ 45 ] >>> os.path.dirname(os.path.abspath(__file__))```
2019-04-18 08:14:34.247549 [ 3 ] >>> ---
2019-04-18 08:14:34.253140 [ 46 ] >>> $$$ If you mean the current working directory:
2019-04-18 08:14:34.264317 [ 14 ] >>> os.getcwd()```
2019-04-18 08:30:29.915331 [ 8 ] >>> v0_1_0_6
2019-04-18 08:30:29.923352 [ 8 ] >>> v0_1_0_5
2019-04-18 08:30:29.929790 [ 8 ] >>> v0_1_0_0
2019-04-18 08:30:29.936418 [ 3 ] >>> dev
2019-04-18 08:30:29.942831 [ 6 ] >>> master
2019-04-18 08:30:29.949025 [ 13 ] >>> changelog.txt